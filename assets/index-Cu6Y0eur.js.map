{"version":3,"mappings":"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","names":["registerSW","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","updateServiceWorker","_reloadPage","register","Workbox","__vitePreload","event","r","e","intervalMS","swUrl","setInterval","installing","navigator","onLine","resp","fetch","cache","headers","status","update","MWMediaType","updateId","useBookmarkStore","create","persist","immer","set","bookmarks","updateQueue","removeBookmark","id","s","push","toString","action","tmdbId","addBookmark","meta","type","title","year","releaseYear","poster","updatedAt","Date","now","replaceBookmarks","items","clear","clearUpdateQueue","removeUpdateItem","filter","v","name","storeCallbacks","stores","initializeOldStores","store","internal","Object","values","versions","sort","a","b","version","data","_raw","dataVersion","relevantVersions","mostRecentData","migrate","setItem","key","JSON","stringify","err","console","error","length","save","buildStorageObject","latestVersion","onChange","cb","destroy","makeRaw","getRaw","item","localStorage","getItem","parse","withVersion","forEach","window","structuredClone","get","assertStore","versionListSorted","i","arr","Error","migrations","pop","createVersionedStore","_data","setKey","addVersion","ver","build","storageObject","JW_API_BASE","JW_IMAGE_BASE","mediaTypeToJW","MOVIE","SERIES","JWMediaToMediaType","formatJWMeta","media","season","object_type","seasons","season_number","map","number","original_release_year","replace","undefined","seasonData","episodes","episode_number","APP_VERSION","import","DISCORD_LINK","GITHUB_LINK","DONATION_LINK","GA_ID","BACKEND_URL","define_import_meta_env_default","TMDBContentTypes","allowedExtensionRange","isAllowedExtensionVersion","satisfies","isExtensionReady","Promise","resolve","setTimeout","activeExtension","sendMessage","message","payload","arguments","timeout","sendToBackgroundViaRelay","body","then","res","catch","sendExtensionRequest","ops","setDomainRule","sendPage","extensionInfo","isExtensionActiveCached","isExtensionActive","info","success","allowed","hasPermission","useAuthStore","account","backendUrl","proxySet","setAccount","acc","removeAccount","setBackendUrl","setProxySet","urls","setAccountProfile","profile","updateAccount","updateDeviceName","deviceName","metricsEndpoint","captchaMetricsEndpoint","batchId","nanoid","getScrapeTool","getState","getStackTrace","lines","topMessage","stackTraceLines","stack","split","join","reportProviders","ofetch","method","tool","segmentStatusMap","notfound","failure","pending","waiting","scrapeSourceOutputToProviderMetric","providerId","embedId","episodeId","episode","seasonId","errorMessage","fullError","scrapeSegmentToProviderMetric","segment","reason","scrapePartsToProviderMetric","order","sources","output","orderItem","source","children","embed","metric","useReportProviders","report","useCallback","reportCaptchaSolve","metaDataCache","token","setCachedMetadata","getCachedMetadata","setApiToken","newToken","getTokenIfValid","jwtDecode","exp","fetchMetadata","base","mwFetch","flat","scrapeMediaToQueryMedia","extra","episodeNumber","episodeTmdbId","seasonNumber","seasonTmdbId","imdbId","addQueryDataToUrl","url","entries","entry","searchParams","makeProviderUrl","makeUrl","URL","p","scrapeSource","sourceId","scrapeAll","scrapeEmbed","embedUrl","getApiToken","apiToken","isTurnstileInitialized","getTurnstileToken","parseEventInput","inp","connectServerSideEvents","endEvents","parsedUrl","eventSource","EventSource","promReject","promResolve","promise","reject","evt","addEventListener","close","errObj","NotFoundError","assign","ev","on","originalUrls","conf","PROXY_URLS","types","canParseUrl","isParsedUrlType","includes","parseParams","input","entriesParams","param","part","fromEntries","getParsedUrls","startsWith","match","exec","getProxyUrls","getProviderApiUrls","getBodyTypeFromBody","FormData","URLSearchParams","convertBodyToObject","makeLoadbalancedList","getter","listIndex","fetchers","Math","floor","random","proxyUrl","getLoadbalancedProxyUrl","getLoadbalancedProviderApiUrl","fetchButWithApiTokens","init","Headers","response","newApiToken","makeLoadBalancedSimpleProxyFetcher","fetcher","makeSimpleProxyFetcher","makeFinalHeaders","readHeaders","lowercasedHeaders","toLowerCase","makeExtensionFetcher","result","bodyType","finalUrl","statusCode","baseFetch","retry","_ref","k","encodeURIComponent","singularProxiedFetch","combinedUrl","baseURL","endsWith","slice","params","_ref2","query","_ref3","destination","onResponse","context","tokenHeader","proxiedFetch","mediaTypeToTMDB","TV","mediaItemTypeToMediaType","TMDBMediaToMediaType","TMDBMediaToMediaItemType","formatTMDBMeta","air_date","formatTMDBMetaToMediaItem","TMDBIdToUrlId","slugify","lower","strict","mediaItemToId","decodeTMDBId","paramId","prefix","mediaType","accept","Authorization","TMDB_READ_API_KEY","encodeURI","multiSearch","results","include_adult","language","page","media_type","generateQuickSearchMediaUrl","getMediaDetails","append_to_response","getMediaPoster","posterPath","getEpisodes","getMovieFromExternalId","movie","external_source","movie_results","formatTMDBSearchResult","mediatype","show","poster_path","first_air_date","getFullYear","release_date","formatTMDBMetaResult","details","getMetaFromId","external_ids","imdb_id","selectedSeason","find","tmdbmeta","getLegacyMetaFromId","queryType","FetchError","provider","external_id","seasonToScrape","isLegacyUrl","isLegacyMediaType","convertLegacyUrl","urlParts","suffix","movieId","SimpleCache","INTERVAL_MS","_storage","initialize","_interval","val","expiry","clearInterval","setCompare","compare","_compare","has","foundValue","value","expirySeconds","getTime","remove","searchQuery","trim","searchForMedia","formattedResult","movieWithPosters","movieWithoutPosters","sortedresult","concat","normalizeTitle","compareTitle","getMetas","uniqueMedias","oldData","yearsAreClose","abs","mediaMetas","relevantItems","all","Number","relevantItem","mediaId","Boolean","keys","Set","watchedEntry","num","max","migrateV1Bookmarks","old","t","migrateV2Videos","newData","oldWatched","newItem","progress","percentage","watchedAt","series","isNotNull","obj","migrateId","migrateV2Bookmarks","updatedBookmarks","migrateV3Videos","migratedId","clone","typeMap","ANIME","oldBookmarks","newItems","oldBookmark","locales","en","ca","cs","de","fr","it","nl","pl","tr","vi","zh","he","sv","pirate","minion","lv","th","ne","ar","es","et","tok","hi","ptbr","ptpt","uk","bg","bn","el","fa","gu","ja","ko","sl","ta","zhhant","is","ru","gl","pa","ro","fi","nv","langCodes","resources","translation","i18n","use","initReactI18next","fallbackLng","interpolation","escapeValue","appLanguageOptions","lang","langObj","getLocaleInfo","useSubtitleStore","enabled","lastSync","lastSelectedLanguage","overrideCasing","delay","styling","color","backgroundOpacity","size","resetSubtitleSpecificSettings","updateStyling","newStyling","min","setLanguage","setCustomSubs","setOverrideCasing","setDelay","importSubtitleLanguage","captionSettings","style","fontSize","backgroundColor","langStore","useLanguageStore","subtitleStore","opacitySplit","parseInt","useVolumeStore","volume","setVolume","useEmpheralVolumeStore","showVolume","setShowVolume","bool","useProgressStore","removeItem","replaceItems","updateItem","duration","watched","migrateV4Videos","oldItem","episodeTitle","ep","ReactGA","trackingId","getAuthHeaders","authorization","bookmarkMediaToInput","userId","seedFromMnemonic","mnemonic","pbkdf2Async","sha256","c","dkLen","verifyValidMnemonic","validateMnemonic","wordlist","keysFromMnemonic","seed","privateKey","publicKey","forge","pki","ed25519","generateKeyPair","genMnemonic","generateMnemonic","signCode","code","sign","encoding","bytesToBase64","bytes","util","encode64","String","fromCodePoint","bytesToBase64Url","signChallenge","challengeCode","signature","base64ToBuffer","binary","base64","decode","base64ToStringBuffer","createBuffer","stringBufferToBase64","buffer","getBytes","encryptData","secret","byteLength","iv","cipher","createCipher","start","tagLength","finish","encryptedData","tag","mode","decryptData","decipher","createDecipher","importProgress","progressItems","importBookmarks","getLoginChallengeToken","loginAccount","namespace","progressUpdateItemToInput","NaN","progressMediaItemToInputs","flatMap","_","toISOString","setProgress","removeProgress","getRegisterChallengeToken","captchaToken","registerAccount","getSessions","updateSession","sessionId","removeSession","updateSettings","settings","getSettings","bookmarkResponsesToEntries","responses","bookmark","progressResponsesToEntries","getUser","editUser","object","deleteUser","getBookmarks","getProgress","useAuthData","loggedIn","clearBookmarks","clearProgress","setTheme","useThemeStore","setAppLanguage","login","loginResponse","user","session","device","logout","syncData","_user","_session","applicationLanguage","defaultSubtitleLanguage","applicationTheme","proxyUrls","useBackendUrl","useAuth","currentAccount","userDataLogout","userDataLogin","loginData","publicKeyBase64Url","challenge","loginResult","userData","seedBase64","registerData","recaptchaToken","registerResult","importData","progressInputs","bookmarkInputs","restore","anyError","AUTH_CHECK_INTERVAL","useAuthRestore","hasRestored","useRef","useInterval","useAsync","current","finally","useQueryParams","loc","useLocation","queryParams","useMemo","search","useQueryParam","location","navigate","useNavigate","currentValue","parsed","delete","useOverlayStore","transition","routes","anchorPoint","setTransition","newTrans","registerRoute","route","setAnchorPoint","point","splitPath","path","joinPath","useRouterAnchorUpdate","routerActive","anchor","document","getElementById","rect","getBoundingClientRect","h","height","w","width","x","y","useEffect","resizeEvent","removeEventListener","useInternalOverlayRouter","setRoute","makePath","oldRoute","newRoute","from","to","showBackwardsTransition","isCurrentPage","isOverlayActive","preventRouteClear","open","defaultRoute","activeRoute","currentRoute","useOverlayRouter","router","isRouterActive","useBannerStore","banners","isOnline","isTurnstile","updateOnline","updateTurnstile","setLocation","showBanner","hideBanner","updateHeight","found","useBannerSize","currentLocation","reduce","useRegisterBanner","ref","useMeasure","useOnlineListener","counter","abort","interval","AbortController","signal","getBackendMeta","createCastingSlice","casting","instance","player","controller","setInstance","setPlayer","setController","setIsCasting","isCasting","interface","qualitySorting","unknown","sortedQualities","getPreferredQuality","availableQualites","qualityPreferences","automaticQuality","lastChosenQuality","chosenQualityIndex","indexOf","nearestChoseQuality","selectQuality","stream","quality","availableQualities","qualities","qualityNameMap","allQualities","qualityToString","useQualityStore","setLastChosenQuality","setAutomaticQuality","playerStatus","IDLE","SCRAPING","PLAYING","SCRAPE_NOT_FOUND","PLAYBACK_ERROR","metaToScrapeMedia","createSourceSlice","captionList","currentQuality","caption","selected","asTrack","setSourceId","setStatus","setMeta","newStatus","hideNextEpisodeBtn","setCaption","display","setSource","captions","startAt","loadableStream","redisplaySource","load","preferredQuality","switchQuality","selectedQuality","time","changeQuality","enableAutomaticQuality","createDisplaySlice","setDisplay","newDisplay","mediaPlaying","isPaused","isPlaying","hasPlayedOnce","isFullscreen","vol","buffered","isLoading","needsTrack","canAirplay","rate","playbackRate","reset","_a","thumbnails","images","VideoPlayerTimeFormat","PlayerHoverState","createInterfaceSlice","hasOpenOverlay","isSeeking","lastVolume","leftControlHovering","isHoveringControls","hovering","NOT_HOVERING","lastHoveringState","volumeChangedWithKeybind","volumeChangedWithKeybindDebounce","timeFormat","REGULAR","shouldStartFromBeginning","setShouldStartFromBeginning","setLastVolume","state","setHasOpenOverlay","setTimeFormat","format","updateInterfaceHovering","newState","setSeeking","seeking","setHoveringLeftControls","setHoveringAnyControls","hideNextEpisodeButton","createPlayingSlice","isDragSeeking","play","pause","createProgressSlice","draggingTime","setDraggingTime","nearestImageAt","at","indexPastTimestamp","findIndex","index","image","imagePastTimestamp","imageBeforeTimestamp","distanceBefore","distancePast","createThumbnailSlice","resetImages","addImage","img","exactOrPastImageIndex","exactOrPastImage","splice","usePlayerStore","sanitize","DOMPurify","captionIsVisible","end","currentTime","delayedStart","delayedEnd","makeQueId","convertSubtitlesToVtt","text","textTrimmed","vtt","convert","detect","convertSubtitlesToSrt","srt","parseSubtitles","_language","cue","stringToBase64","btoa","TextEncoder","encode","convertSubtitlesToSrtDataurl","convertSubtitlesToObjectUrl","createObjectURL","Blob","convertProviderCaption","needsProxy","hasCorsRestrictions","subtitleTypeList","list","downloadCache","downloadCaption","cached","responseType","useCaptions","selectCaptionById","captionId","srtData","selectLanguage","disable","selectLastUsedLanguage","toggleLastUsed","selectLastUsedLanguageIfEnabled","useInitializePlayer","useInitializeSource","sourceIdentifier","funRef","usePlayer","progressStore","m","playMedia","startAtOverride","setScrapeStatus","setScrapeNotFound","isSafari","test","userAgent","cachedVolumeResult","canChangeVolume","timeoutPromise","video","createElement","handler","race","canFullscreenAnyElement","fscreen","fullscreenEnabled","canWebkitFullscreen","canFullscreen","canPictureInPicture","canWebkitPictureInPicture","canPlayHlsNatively","Hls","isSupported","canPlayType","detectExtensionInstall","makePercentageString","toFixed","makePercentage","isClickEvent","getEventX","pageX","changedTouches","useProgressBar","barRef","commit","commitImmediately","mouseDown","setMouseDown","useState","mouseMove","pos","left","offsetWidth","mouseUp","removeAttribute","dragMouseDown","setAttribute","dragging","dragPercentage","formatSeconds","secs","showHours","isNaN","seconds","minutes","hours","paddedSecs","padStart","paddedMins","durationExceedsHour","useVolume","setStoredVolume","toggleVolume","newVolume","toggleMute","useIsMobile","horizontal","isMobile","setIsMobile","isMobileCurrent","onResize","innerHeight","innerWidth","extractDomain","hostname","extractDomainsFromStream","playlist","buildHeadersFromStream","preferredHeaders","prepareStream","ruleId","targetDomains","requestHeaders","getProviders","makeProviders","target","targets","BROWSER_EXTENSION","consistentIpForRequests","makeStandardFetcher","proxiedFetcher","BROWSER","allowedQualitiesMap","allowedQualities","allowedFileTypes","isAllowedQuality","convertRunoutputToSource","out","warn","useEmbedScraping","routerId","request","run","useAsyncFn","providerApiUrl","baseUrlMaker","runEmbedScraper","loading","errored","useSourceScraping","scrapeMedia","runSourceScraper","embeds","embedResult","watching","Menu","Cards","Links","Sections","Misc","usePlayerMeta","setDirectMeta","setPlayerMeta","playerMeta","hasAiredCache","hasAired","date","airDate","handleBuffered","mediaErrorMap","getMediaErrorDetails","processCdnLink","replacements","CDN_REPLACEMENTS","before","after","port","protocol","makeEmitter","listeners","eventName","fn","off","emit","levelConversionMap","hlsLevelToQuality","level","qualityToHlsLevel","hlsLevelsToQualities","levels","makeVideoElementDisplayInterface","hls","videoElement","containerElement","isPausedBeforeSeeking","preferenceQuality","reportLevels","convertedLevels","setupQualityForHls","currentLevel","loadLevel","availableQuality","levelIndex","setupSource","vid","src","maxBufferSize","fragLoadPolicy","default","maxLoadTimeMs","maxTimeToFirstByteMs","errorRetry","maxNumRetry","retryDelayMs","maxRetryDelayMs","timeoutRetry","Events","ERROR","fatal","frag","baseurl","stackTrace","errorName","MANIFEST_LOADED","LEVEL_SWITCHED","attachMedia","loadSource","errorDetails","muted","availability","unloadSource","destroyVideoElement","fullscreenChange","fullscreenElement","webkitFullscreenElement","getType","newAutomaticQuality","newPreferredQuality","processVideoElement","processContainerElement","container","active","paused","setTime","toggleFullscreen","exitFullscreen","requestFullscreen","webkitEnterFullscreen","togglePictureInPicture","webkitPlayer","webkitSetPresentationMode","webkitPresentationMode","pictureInPictureElement","requestPictureInPicture","exitPictureInPicture","startAirplay","videoPlayer","webkitShowPlaybackTargetPicker","setPlaybackRate","makeChromecastDisplayInterface","listenForEvents","listen","field","cast","framework","RemotePlayerEventType","ANY_CHANGE","stop","metaData","chrome","GenericMediaMetadata","mediaInfo","MediaInfo","contentUrl","streamType","StreamType","BUFFERED","metadata","customData","LoadRequest","autoplay","staticMedia","hlsSegmentFormat","HlsSegmentFormat","FMP4","hlsVideoSegmentFormat","HlsVideoSegmentFormat","getCurrentSession","loadMedia","stopListening","loadOps","newCaption","playOrPause","seek","volumeLevel","setVolumeLevel","CHROMECAST_SENDER_SDK","callbacks","_available","available","isChromecastAvailable","initializeChromecast","__onGCastApiAvailable","isAvailable","script","appendChild","useChromecastAvailable","setAvailable","useDebounce","debouncedValue","setDebouncedValue","clearTimeout","decodeURIComponent","useSearchQuery","useParams","setSearch","updateParams","commitToUrl","generatePath","newSearch","defaultProgress","progressIsCompleted","progressIsNotStarted","progressIsAcceptableRange","shouldShowProgress","epi","useSlashFocus","listener","activeElement","tagName","preventDefault","focus","shouldGiveJokeTitle","useRandomTranslation","useTranslation","shouldJoke","defaultTitle","returnObjects","defaultValue","Array","isArray","getRandomTranslation","useRedirectBack","setCompleted","useOnboardingStore","redirectBack","completeAndRedirect","useNavigateOnboarding","nav","pathname","useHistoryStore","useHistoryListener","useEffectOnce","useLastNonPlayerLink","lastNonPlayerLink","reversedRoutes","reverse"],"sources":["../../../../../../../@vite-plugin-pwa/virtual:pwa-register","../../src/setup/pwa.ts","../../src/backend/metadata/types/mw.ts","../../src/stores/bookmarks/index.ts","../../src/stores/__old/migrations.ts","../../src/backend/metadata/types/justwatch.ts","../../src/backend/metadata/justwatch.ts","../../src/setup/constants.ts","../../src/setup/config.ts","../../src/backend/metadata/types/tmdb.ts","../../src/backend/extension/compatibility.ts","../../src/backend/extension/messaging.ts","../../src/stores/auth/index.ts","../../src/backend/helpers/report.ts","../../src/backend/helpers/providerApi.ts","../../src/utils/proxyUrls.ts","../../src/backend/extension/request.ts","../../src/backend/providers/fetchers.ts","../../src/backend/helpers/fetch.ts","../../src/backend/metadata/tmdb.ts","../../src/backend/metadata/getmeta.ts","../../src/utils/cache.ts","../../src/backend/metadata/search.ts","../../src/stores/__old/utils.ts","../../src/stores/__old/watched/migrations/v2.ts","../../src/utils/typeguard.ts","../../src/stores/__old/watched/migrations/v3.ts","../../src/stores/__old/bookmark/store.ts","../../src/assets/languages.ts","../../src/setup/i18n.ts","../../src/stores/subtitles/index.ts","../../src/stores/__old/settings/store.ts","../../src/stores/volume/index.ts","../../src/stores/__old/volume/store.ts","../../src/stores/progress/index.ts","../../src/stores/__old/watched/migrations/v4.ts","../../src/stores/__old/watched/store.ts","../../src/setup/ga.ts","../../src/backend/accounts/auth.ts","../../src/backend/accounts/bookmarks.ts","../../src/backend/accounts/crypto.ts","../../src/backend/accounts/import.ts","../../src/backend/accounts/login.ts","../../src/backend/accounts/progress.ts","../../src/backend/accounts/register.ts","../../src/backend/accounts/sessions.ts","../../src/backend/accounts/settings.ts","../../src/backend/accounts/user.ts","../../src/hooks/auth/useAuthData.ts","../../src/hooks/auth/useBackendUrl.ts","../../src/hooks/auth/useAuth.ts","../../src/hooks/auth/useAuthRestore.ts","../../src/hooks/useQueryParams.ts","../../src/stores/overlay/store.ts","../../src/hooks/useOverlayRouter.ts","../../src/stores/banner/index.ts","../../src/hooks/usePing.ts","../../src/backend/accounts/meta.ts","../../src/stores/player/slices/casting.ts","../../src/stores/player/utils/qualities.ts","../../src/stores/quality/index.ts","../../src/stores/player/slices/source.ts","../../src/stores/player/slices/display.ts","../../src/stores/player/slices/interface.ts","../../src/stores/player/slices/playing.ts","../../src/stores/player/slices/progress.ts","../../src/stores/player/slices/thumbnails.ts","../../src/stores/player/store.ts","../../src/components/player/utils/captions.ts","../../src/backend/helpers/subs.ts","../../src/components/player/hooks/useCaptions.ts","../../src/components/player/hooks/useInitializePlayer.ts","../../src/components/player/hooks/usePlayer.ts","../../src/utils/detectFeatures.ts","../../src/hooks/useProgressBar.ts","../../src/utils/formatSeconds.ts","../../src/components/player/hooks/useVolume.ts","../../src/hooks/useIsMobile.ts","../../src/backend/extension/streams.ts","../../src/backend/providers/providers.ts","../../src/components/player/utils/convertRunoutputToSource.ts","../../src/components/player/hooks/useSourceSelection.ts","../../src/components/player/internals/ContextMenu/index.ts","../../src/components/player/hooks/usePlayerMeta.ts","../../src/components/player/utils/aired.ts","../../src/components/player/utils/handleBuffered.ts","../../src/components/player/utils/mediaErrorDetails.ts","../../src/utils/cdn.ts","../../src/utils/events.ts","../../src/components/player/display/base.ts","../../src/components/player/display/chromecast.ts","../../src/setup/chromecast.ts","../../src/hooks/useChromecastAvailable.ts","../../src/hooks/useDebounce.ts","../../src/hooks/useSearchQuery.ts","../../src/stores/progress/utils.ts","../../src/components/player/hooks/useSlashFocus.ts","../../src/hooks/useRandomTranslation.ts","../../src/pages/onboarding/onboardingHooks.ts","../../src/stores/history/index.ts"],"sourcesContent":["// src/client/build/register.ts\nvar autoUpdateMode = \"true\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await sendSkipWaitingMessage?.();\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      const { Workbox } = await import(\"workbox-window\");\n      wb = new Workbox(\"/sw.js\", { scope: \"/\", type: \"classic\" });\n      sendSkipWaitingMessage = async () => {\n        await wb?.messageSkipWaiting();\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb?.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh?.();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"/sw.js\", r);\n        else\n          onRegistered?.(r);\n      }).catch((e) => {\n        onRegisterError?.(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\nexport {\n  registerSW\n};\n","import { registerSW } from \"virtual:pwa-register\";\n\nconst intervalMS = 60 * 60 * 1000;\n\nregisterSW({\n  immediate: true,\n  onRegisteredSW(swUrl, r) {\n    if (!r) return;\n    setInterval(async () => {\n      if (!(!r.installing && navigator)) return;\n\n      if (\"connection\" in navigator && !navigator.onLine) return;\n\n      const resp = await fetch(swUrl, {\n        cache: \"no-store\",\n        headers: {\n          cache: \"no-store\",\n          \"cache-control\": \"no-cache\",\n        },\n      });\n\n      if (resp?.status === 200) {\n        await r.update();\n      }\n    }, intervalMS);\n  },\n});\n","export enum MWMediaType {\n  MOVIE = \"movie\",\n  SERIES = \"series\",\n  ANIME = \"anime\",\n}\n\nexport type MWSeasonMeta = {\n  id: string;\n  number: number;\n  title: string;\n};\n\nexport type MWSeasonWithEpisodeMeta = {\n  id: string;\n  number: number;\n  title: string;\n  episodes: {\n    id: string;\n    number: number;\n    title: string;\n    air_date: string;\n  }[];\n};\n\ntype MWMediaMetaBase = {\n  title: string;\n  id: string;\n  year?: string;\n  poster?: string;\n};\n\ntype MWMediaMetaSpecific =\n  | {\n      type: MWMediaType.MOVIE | MWMediaType.ANIME;\n      seasons: undefined;\n    }\n  | {\n      type: MWMediaType.SERIES;\n      seasons: MWSeasonMeta[];\n      seasonData: MWSeasonWithEpisodeMeta;\n    };\n\nexport type MWMediaMeta = MWMediaMetaBase & MWMediaMetaSpecific;\n\nexport interface MWQuery {\n  searchQuery: string;\n}\n\nexport interface DetailedMeta {\n  meta: MWMediaMeta;\n  imdbId?: string;\n  tmdbId?: string;\n}\n","import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\nimport { PlayerMeta } from \"@/stores/player/slices/source\";\n\nexport interface BookmarkMediaItem {\n  title: string;\n  year?: number;\n  poster?: string;\n  type: \"show\" | \"movie\";\n  updatedAt: number;\n}\n\nexport interface BookmarkUpdateItem {\n  tmdbId: string;\n  title?: string;\n  year?: number;\n  id: string;\n  poster?: string;\n  type?: \"show\" | \"movie\";\n  action: \"delete\" | \"add\";\n}\n\nexport interface BookmarkStore {\n  bookmarks: Record<string, BookmarkMediaItem>;\n  updateQueue: BookmarkUpdateItem[];\n  addBookmark(meta: PlayerMeta): void;\n  removeBookmark(id: string): void;\n  replaceBookmarks(items: Record<string, BookmarkMediaItem>): void;\n  clear(): void;\n  clearUpdateQueue(): void;\n  removeUpdateItem(id: string): void;\n}\n\nlet updateId = 0;\n\nexport const useBookmarkStore = create(\n  persist(\n    immer<BookmarkStore>((set) => ({\n      bookmarks: {},\n      updateQueue: [],\n      removeBookmark(id) {\n        set((s) => {\n          updateId += 1;\n          s.updateQueue.push({\n            id: updateId.toString(),\n            action: \"delete\",\n            tmdbId: id,\n          });\n\n          delete s.bookmarks[id];\n        });\n      },\n      addBookmark(meta) {\n        set((s) => {\n          updateId += 1;\n          s.updateQueue.push({\n            id: updateId.toString(),\n            action: \"add\",\n            tmdbId: meta.tmdbId,\n            type: meta.type,\n            title: meta.title,\n            year: meta.releaseYear,\n            poster: meta.poster,\n          });\n\n          s.bookmarks[meta.tmdbId] = {\n            type: meta.type,\n            title: meta.title,\n            year: meta.releaseYear,\n            poster: meta.poster,\n            updatedAt: Date.now(),\n          };\n        });\n      },\n      replaceBookmarks(items: Record<string, BookmarkMediaItem>) {\n        set((s) => {\n          s.bookmarks = items;\n        });\n      },\n      clear() {\n        set((s) => {\n          s.bookmarks = {};\n        });\n      },\n      clearUpdateQueue() {\n        set((s) => {\n          s.updateQueue = [];\n        });\n      },\n      removeUpdateItem(id: string) {\n        set((s) => {\n          s.updateQueue = [...s.updateQueue.filter((v) => v.id !== id)];\n        });\n      },\n    })),\n    {\n      name: \"__MW::bookmarks\",\n    },\n  ),\n);\n","interface StoreVersion<A> {\n  version: number;\n  migrate?(data: A): any;\n  create?: () => A;\n}\ninterface StoreRet<T> {\n  save: (data: T) => void;\n  get: () => T;\n  _raw: () => any;\n  onChange: (cb: (data: T) => void) => {\n    destroy: () => void;\n  };\n}\n\nexport interface StoreBuilder<T> {\n  setKey: (key: string) => StoreBuilder<T>;\n  addVersion: <A>(ver: StoreVersion<A>) => StoreBuilder<T>;\n  build: () => StoreRet<T>;\n}\n\ninterface InternalStoreData {\n  versions: StoreVersion<any>[];\n  key: string | null;\n}\n\nconst storeCallbacks: Record<string, ((data: any) => void)[]> = {};\nconst stores: Record<string, [StoreRet<any>, InternalStoreData]> = {};\n\nexport async function initializeOldStores() {\n  // migrate all stores\n  for (const [store, internal] of Object.values(stores)) {\n    const versions = internal.versions.sort((a, b) => a.version - b.version);\n\n    const data = store._raw();\n    const dataVersion =\n      data[\"--version\"] && typeof data[\"--version\"] === \"number\"\n        ? data[\"--version\"]\n        : 0;\n\n    // Find which versions need to be used for migrations\n    const relevantVersions = versions.filter((v) => v.version >= dataVersion);\n\n    // Migrate over each version\n    let mostRecentData = data;\n    try {\n      for (const version of relevantVersions) {\n        if (version.migrate) {\n          localStorage.setItem(\n            `BACKUP-v${version.version}-${internal.key}`,\n            JSON.stringify(mostRecentData),\n          );\n          mostRecentData = await version.migrate(mostRecentData);\n        }\n      }\n    } catch (err) {\n      console.error(`FAILED TO MIGRATE STORE ${internal.key}`, err);\n      // reset store to lastest version create\n      mostRecentData =\n        relevantVersions[relevantVersions.length - 1].create?.() ?? {};\n    }\n\n    store.save(mostRecentData);\n  }\n}\n\nfunction buildStorageObject<T>(store: InternalStoreData): StoreRet<T> {\n  const key = store.key ?? \"\";\n  const latestVersion = store.versions.sort((a, b) => b.version - a.version)[0];\n\n  function onChange(cb: (data: T) => void) {\n    if (!storeCallbacks[key]) storeCallbacks[key] = [];\n    storeCallbacks[key].push(cb);\n    return {\n      destroy() {\n        // remove function pointer from callbacks\n        storeCallbacks[key] = storeCallbacks[key].filter((v) => v === cb);\n      },\n    };\n  }\n\n  function makeRaw() {\n    const data = latestVersion.create?.() ?? {};\n    data[\"--version\"] = latestVersion.version;\n    return data;\n  }\n\n  function getRaw() {\n    const item = localStorage.getItem(key);\n    if (!item) return makeRaw();\n    try {\n      return JSON.parse(item);\n    } catch (err) {\n      // we assume user has fucked with the data, give them a fresh store\n      console.error(`FAILED TO PARSE LOCALSTORAGE FOR KEY ${key}`, err);\n      return makeRaw();\n    }\n  }\n\n  function save(data: T) {\n    const withVersion: any = { ...data };\n    withVersion[\"--version\"] = latestVersion.version;\n    localStorage.setItem(key, JSON.stringify(withVersion));\n\n    if (!storeCallbacks[key]) storeCallbacks[key] = [];\n    storeCallbacks[key].forEach((v) => v(window.structuredClone(data)));\n  }\n\n  return {\n    get() {\n      const data = getRaw();\n      delete data[\"--version\"];\n      return data as T;\n    },\n    _raw() {\n      return getRaw();\n    },\n    onChange,\n    save,\n  };\n}\n\nfunction assertStore(store: InternalStoreData) {\n  const versionListSorted = store.versions.sort(\n    (a, b) => a.version - b.version,\n  );\n  versionListSorted.forEach((v, i, arr) => {\n    if (i === 0) return;\n    if (v.version !== arr[i - 1].version + 1)\n      throw new Error(\"Version list of store is not incremental\");\n  });\n  versionListSorted.forEach((v) => {\n    if (v.version < 0) throw new Error(\"Versions cannot be negative\");\n  });\n\n  // version zero must exist\n  if (versionListSorted[0]?.version !== 0)\n    throw new Error(\"Version 0 doesn't exist in version list of store\");\n\n  // max version must have create function\n  if (!store.versions[store.versions.length - 1].create)\n    throw new Error(`Missing create function on latest version of store`);\n\n  // check storage string\n  if (!store.key) throw new Error(\"storage key not set in store\");\n\n  // check if all parts have migratio\n  const migrations = [...versionListSorted];\n  migrations.pop();\n  migrations.forEach((v) => {\n    if (!v.migrate)\n      throw new Error(`Migration missing on version ${v.version}`);\n  });\n}\n\nexport function createVersionedStore<T>(): StoreBuilder<T> {\n  const _data: InternalStoreData = {\n    versions: [],\n    key: null,\n  };\n\n  return {\n    setKey(key) {\n      _data.key = key;\n      return this;\n    },\n    addVersion(ver) {\n      _data.versions.push(ver);\n      return this;\n    },\n    build() {\n      assertStore(_data);\n      const storageObject = buildStorageObject<T>(_data);\n      stores[_data.key ?? \"\"] = [storageObject, _data];\n      return storageObject;\n    },\n  };\n}\n","export type JWContentTypes = \"movie\" | \"show\";\n\nexport type JWSearchQuery = {\n  content_types: JWContentTypes[];\n  page: number;\n  page_size: number;\n  query: string;\n};\n\nexport type JWPage<T> = {\n  items: T[];\n  page: number;\n  page_size: number;\n  total_pages: number;\n  total_results: number;\n};\n\nexport const JW_API_BASE = \"https://apis.justwatch.com\";\nexport const JW_IMAGE_BASE = \"https://images.justwatch.com\";\n\nexport type JWSeasonShort = {\n  title: string;\n  id: number;\n  season_number: number;\n};\n\nexport type JWEpisodeShort = {\n  title: string;\n  id: number;\n  episode_number: number;\n};\n\nexport type JWMediaResult = {\n  title: string;\n  poster?: string;\n  id: number;\n  original_release_year?: number;\n  jw_entity_id: string;\n  object_type: JWContentTypes;\n  seasons?: JWSeasonShort[];\n};\n\nexport type JWSeasonMetaResult = {\n  title: string;\n  id: string;\n  season_number: number;\n  episodes: JWEpisodeShort[];\n};\n\nexport type JWExternalIdType =\n  | \"eidr\"\n  | \"imdb_latest\"\n  | \"imdb\"\n  | \"tmdb_latest\"\n  | \"tmdb\"\n  | \"tms\";\n\nexport interface JWExternalId {\n  provider: JWExternalIdType;\n  external_id: string;\n}\n\nexport interface JWDetailedMeta extends JWMediaResult {\n  external_ids: JWExternalId[];\n}\n","import {\n  JWContentTypes,\n  JWMediaResult,\n  JWSeasonMetaResult,\n  JW_IMAGE_BASE,\n} from \"./types/justwatch\";\nimport { MWMediaMeta, MWMediaType, MWSeasonMeta } from \"./types/mw\";\n\nexport function mediaTypeToJW(type: MWMediaType): JWContentTypes {\n  if (type === MWMediaType.MOVIE) return \"movie\";\n  if (type === MWMediaType.SERIES) return \"show\";\n  throw new Error(\"unsupported type\");\n}\n\nexport function JWMediaToMediaType(type: string): MWMediaType {\n  if (type === \"movie\") return MWMediaType.MOVIE;\n  if (type === \"show\") return MWMediaType.SERIES;\n  throw new Error(\"unsupported type\");\n}\n\nexport function formatJWMeta(\n  media: JWMediaResult,\n  season?: JWSeasonMetaResult,\n): MWMediaMeta {\n  const type = JWMediaToMediaType(media.object_type);\n  let seasons: undefined | MWSeasonMeta[];\n  if (type === MWMediaType.SERIES) {\n    seasons = media.seasons\n      ?.sort((a, b) => a.season_number - b.season_number)\n      .map(\n        (v): MWSeasonMeta => ({\n          id: v.id.toString(),\n          number: v.season_number,\n          title: v.title,\n        }),\n      );\n  }\n\n  return {\n    title: media.title,\n    id: media.id.toString(),\n    year: media.original_release_year?.toString(),\n    poster: media.poster\n      ? `${JW_IMAGE_BASE}${media.poster.replace(\"{profile}\", \"s166\")}`\n      : undefined,\n    type,\n    seasons: seasons as any,\n    seasonData: season\n      ? ({\n          id: season.id.toString(),\n          number: season.season_number,\n          title: season.title,\n          episodes: season.episodes\n            .sort((a, b) => a.episode_number - b.episode_number)\n            .map((v) => ({\n              id: v.id.toString(),\n              number: v.episode_number,\n              title: v.title,\n            })),\n        } as any)\n      : (undefined as any),\n  };\n}\n\nexport function JWMediaToId(media: MWMediaMeta): string {\n  return [\"JW\", mediaTypeToJW(media.type), media.id].join(\"-\");\n}\n\nexport function decodeJWId(\n  paramId: string,\n): { id: string; type: MWMediaType } | null {\n  const [prefix, type, id] = paramId.split(\"-\", 3);\n  if (prefix !== \"JW\") return null;\n  let mediaType;\n  try {\n    mediaType = JWMediaToMediaType(type);\n  } catch {\n    return null;\n  }\n  return {\n    type: mediaType,\n    id,\n  };\n}\n","export const APP_VERSION = import.meta.env.PACKAGE_VERSION;\nexport const DISCORD_LINK = \"https://discord.movie-web.app\";\nexport const GITHUB_LINK = \"https://github.com/movie-web/movie-web\";\nexport const DONATION_LINK = \"https://ko-fi.com/movieweb\";\nexport const GA_ID = \"G-44YVXRL61C\";\nexport const BACKEND_URL = \"https://backend.movie-web.app\";\n","import {\n  APP_VERSION,\n  BACKEND_URL,\n  DISCORD_LINK,\n  DONATION_LINK,\n  GITHUB_LINK,\n} from \"./constants\";\n\ninterface Config {\n  APP_VERSION: string;\n  GITHUB_LINK: string;\n  DONATION_LINK: string;\n  DISCORD_LINK: string;\n  DMCA_EMAIL: string;\n  TMDB_READ_API_KEY: string;\n  CORS_PROXY_URL: string;\n  NORMAL_ROUTER: boolean;\n  BACKEND_URL: string;\n  DISALLOWED_IDS: string;\n  TURNSTILE_KEY: string;\n  CDN_REPLACEMENTS: string;\n  HAS_ONBOARDING: string;\n  ONBOARDING_CHROME_EXTENSION_INSTALL_LINK: string;\n  ONBOARDING_FIREFOX_EXTENSION_INSTALL_LINK: string;\n  ONBOARDING_PROXY_INSTALL_LINK: string;\n}\n\nexport interface RuntimeConfig {\n  APP_VERSION: string;\n  GITHUB_LINK: string;\n  DONATION_LINK: string;\n  DISCORD_LINK: string;\n  DMCA_EMAIL: string | null;\n  TMDB_READ_API_KEY: string;\n  NORMAL_ROUTER: boolean;\n  PROXY_URLS: string[];\n  BACKEND_URL: string;\n  DISALLOWED_IDS: string[];\n  TURNSTILE_KEY: string | null;\n  CDN_REPLACEMENTS: Array<string[]>;\n  HAS_ONBOARDING: boolean;\n  ONBOARDING_CHROME_EXTENSION_INSTALL_LINK: string | null;\n  ONBOARDING_FIREFOX_EXTENSION_INSTALL_LINK: string | null;\n  ONBOARDING_PROXY_INSTALL_LINK: string | null;\n}\n\nconst env: Record<keyof Config, undefined | string> = {\n  TMDB_READ_API_KEY: import.meta.env.VITE_TMDB_READ_API_KEY,\n  APP_VERSION: undefined,\n  GITHUB_LINK: undefined,\n  DONATION_LINK: undefined,\n  DISCORD_LINK: undefined,\n  ONBOARDING_CHROME_EXTENSION_INSTALL_LINK: import.meta.env\n    .VITE_ONBOARDING_CHROME_EXTENSION_INSTALL_LINK,\n  ONBOARDING_FIREFOX_EXTENSION_INSTALL_LINK: import.meta.env\n    .VITE_ONBOARDING_FIREFOX_EXTENSION_INSTALL_LINK,\n  ONBOARDING_PROXY_INSTALL_LINK: import.meta.env\n    .VITE_ONBOARDING_PROXY_INSTALL_LINK,\n  DMCA_EMAIL: import.meta.env.VITE_DMCA_EMAIL,\n  CORS_PROXY_URL: import.meta.env.VITE_CORS_PROXY_URL,\n  NORMAL_ROUTER: import.meta.env.VITE_NORMAL_ROUTER,\n  BACKEND_URL: import.meta.env.VITE_BACKEND_URL,\n  DISALLOWED_IDS: import.meta.env.VITE_DISALLOWED_IDS,\n  TURNSTILE_KEY: import.meta.env.VITE_TURNSTILE_KEY,\n  CDN_REPLACEMENTS: import.meta.env.VITE_CDN_REPLACEMENTS,\n  HAS_ONBOARDING: import.meta.env.VITE_HAS_ONBOARDING,\n};\n\n// loads from different locations, in order: environment (VITE_{KEY}), window (public/config.js)\nfunction getKeyValue(key: keyof Config): string | undefined {\n  let windowValue = (window as any)?.__CONFIG__?.[`VITE_${key}`];\n  if (\n    windowValue !== null &&\n    windowValue !== undefined &&\n    windowValue.length === 0\n  )\n    windowValue = undefined;\n  return env[key] ?? windowValue ?? undefined;\n}\n\nfunction getKey(key: keyof Config, defaultString?: string): string {\n  return getKeyValue(key)?.toString() ?? defaultString ?? \"\";\n}\n\nexport function conf(): RuntimeConfig {\n  const dmcaEmail = getKey(\"DMCA_EMAIL\");\n  const chromeExtension = getKey(\"ONBOARDING_CHROME_EXTENSION_INSTALL_LINK\");\n  const firefoxExtension = getKey(\"ONBOARDING_FIREFOX_EXTENSION_INSTALL_LINK\");\n  const proxyInstallLink = getKey(\"ONBOARDING_PROXY_INSTALL_LINK\");\n  const turnstileKey = getKey(\"TURNSTILE_KEY\");\n  return {\n    APP_VERSION,\n    GITHUB_LINK,\n    DONATION_LINK,\n    DISCORD_LINK,\n    DMCA_EMAIL: dmcaEmail.length > 0 ? dmcaEmail : null,\n    ONBOARDING_CHROME_EXTENSION_INSTALL_LINK:\n      chromeExtension.length > 0 ? chromeExtension : null,\n    ONBOARDING_FIREFOX_EXTENSION_INSTALL_LINK:\n      firefoxExtension.length > 0 ? firefoxExtension : null,\n    ONBOARDING_PROXY_INSTALL_LINK:\n      proxyInstallLink.length > 0 ? proxyInstallLink : null,\n    BACKEND_URL: getKey(\"BACKEND_URL\", BACKEND_URL),\n    TMDB_READ_API_KEY: getKey(\"TMDB_READ_API_KEY\"),\n    PROXY_URLS: getKey(\"CORS_PROXY_URL\")\n      .split(\",\")\n      .map((v) => v.trim()),\n    NORMAL_ROUTER: getKey(\"NORMAL_ROUTER\", \"false\") === \"true\",\n    HAS_ONBOARDING: getKey(\"HAS_ONBOARDING\", \"false\") === \"true\",\n    TURNSTILE_KEY: turnstileKey.length > 0 ? turnstileKey : null,\n    DISALLOWED_IDS: getKey(\"DISALLOWED_IDS\", \"\")\n      .split(\",\")\n      .map((v) => v.trim())\n      .filter((v) => v.length > 0), // Should be comma-seperated and contain the media type and ID, formatted like so: movie-753342,movie-753342,movie-753342\n    CDN_REPLACEMENTS: getKey(\"CDN_REPLACEMENTS\", \"\")\n      .split(\",\")\n      .map((v) =>\n        v\n          .split(\":\")\n          .map((s) => s.trim())\n          .filter((s) => s.length > 0),\n      )\n      .filter((v) => v.length === 2), // The format is <beforeA>:<afterA>,<beforeB>:<afterB>\n  };\n}\n","export enum TMDBContentTypes {\n  MOVIE = \"movie\",\n  TV = \"tv\",\n}\n\nexport type TMDBSeasonShort = {\n  title: string;\n  id: number;\n  season_number: number;\n};\n\nexport type TMDBEpisodeShort = {\n  title: string;\n  id: number;\n  episode_number: number;\n  air_date: string;\n};\n\nexport type TMDBMediaResult = {\n  title: string;\n  poster?: string;\n  id: number;\n  original_release_year?: number;\n  object_type: TMDBContentTypes;\n  seasons?: TMDBSeasonShort[];\n};\n\nexport type TMDBSeasonMetaResult = {\n  title: string;\n  id: string;\n  season_number: number;\n  episodes: TMDBEpisodeShort[];\n};\n\nexport interface TMDBShowData {\n  adult: boolean;\n  backdrop_path: string | null;\n  created_by: {\n    id: number;\n    credit_id: string;\n    name: string;\n    gender: number;\n    profile_path: string | null;\n  }[];\n  episode_run_time: number[];\n  first_air_date: string;\n  genres: {\n    id: number;\n    name: string;\n  }[];\n  homepage: string;\n  id: number;\n  in_production: boolean;\n  languages: string[];\n  last_air_date: string;\n  last_episode_to_air: {\n    id: number;\n    name: string;\n    overview: string;\n    vote_average: number;\n    vote_count: number;\n    air_date: string;\n    episode_number: number;\n    production_code: string;\n    runtime: number | null;\n    season_number: number;\n    show_id: number;\n    still_path: string | null;\n  } | null;\n  name: string;\n  next_episode_to_air: {\n    id: number;\n    name: string;\n    overview: string;\n    vote_average: number;\n    vote_count: number;\n    air_date: string;\n    episode_number: number;\n    production_code: string;\n    runtime: number | null;\n    season_number: number;\n    show_id: number;\n    still_path: string | null;\n  } | null;\n  networks: {\n    id: number;\n    logo_path: string;\n    name: string;\n    origin_country: string;\n  }[];\n  number_of_episodes: number;\n  number_of_seasons: number;\n  origin_country: string[];\n  original_language: string;\n  original_name: string;\n  overview: string;\n  popularity: number;\n  poster_path: string | null;\n  production_companies: {\n    id: number;\n    logo_path: string | null;\n    name: string;\n    origin_country: string;\n  }[];\n  production_countries: {\n    iso_3166_1: string;\n    name: string;\n  }[];\n  seasons: {\n    air_date: string;\n    episode_count: number;\n    id: number;\n    name: string;\n    overview: string;\n    poster_path: string | null;\n    season_number: number;\n  }[];\n  spoken_languages: {\n    english_name: string;\n    iso_639_1: string;\n    name: string;\n  }[];\n  status: string;\n  tagline: string;\n  type: string;\n  vote_average: number;\n  vote_count: number;\n  external_ids: {\n    imdb_id: string | null;\n  };\n}\n\nexport interface TMDBMovieData {\n  adult: boolean;\n  backdrop_path: string | null;\n  belongs_to_collection: {\n    id: number;\n    name: string;\n    poster_path: string | null;\n    backdrop_path: string | null;\n  } | null;\n  budget: number;\n  genres: {\n    id: number;\n    name: string;\n  }[];\n  homepage: string | null;\n  id: number;\n  imdb_id: string | null;\n  original_language: string;\n  original_title: string;\n  overview: string | null;\n  popularity: number;\n  poster_path: string | null;\n  production_companies: {\n    id: number;\n    logo_path: string | null;\n    name: string;\n    origin_country: string;\n  }[];\n  production_countries: {\n    iso_3166_1: string;\n    name: string;\n  }[];\n  release_date: string;\n  revenue: number;\n  runtime: number | null;\n  spoken_languages: {\n    english_name: string;\n    iso_639_1: string;\n    name: string;\n  }[];\n  status: string;\n  tagline: string | null;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n  external_ids: {\n    imdb_id: string | null;\n  };\n}\n\nexport interface TMDBEpisodeResult {\n  season: number;\n  number: number;\n  title: string;\n  ids: {\n    trakt: number;\n    tvdb: number;\n    imdb: string;\n    tmdb: number;\n  };\n}\n\nexport interface TMDBEpisode {\n  air_date: string;\n  episode_number: number;\n  id: number;\n  name: string;\n  overview: string;\n  production_code: string;\n  runtime: number;\n  season_number: number;\n  show_id: number;\n  still_path: string | null;\n  vote_average: number;\n  vote_count: number;\n  crew: any[];\n  guest_stars: any[];\n}\n\nexport interface TMDBSeason {\n  _id: string;\n  air_date: string;\n  episodes: TMDBEpisode[];\n  name: string;\n  overview: string;\n  id: number;\n  poster_path: string | null;\n  season_number: number;\n}\n\nexport interface ExternalIdMovieSearchResult {\n  movie_results: {\n    adult: boolean;\n    backdrop_path: string;\n    id: number;\n    title: string;\n    original_language: string;\n    original_title: string;\n    overview: string;\n    poster_path: string;\n    media_type: string;\n    genre_ids: number[];\n    popularity: number;\n    release_date: string;\n    video: boolean;\n    vote_average: number;\n    vote_count: number;\n  }[];\n  person_results: any[];\n  tv_results: any[];\n  tv_episode_results: any[];\n  tv_season_results: any[];\n}\n\nexport interface TMDBMovieSearchResult {\n  adult: boolean;\n  backdrop_path: string;\n  id: number;\n  title: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  poster_path: string;\n  media_type: TMDBContentTypes.MOVIE;\n  genre_ids: number[];\n  popularity: number;\n  release_date: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface TMDBShowSearchResult {\n  adult: boolean;\n  backdrop_path: string;\n  id: number;\n  name: string;\n  original_language: string;\n  original_name: string;\n  overview: string;\n  poster_path: string;\n  media_type: TMDBContentTypes.TV;\n  genre_ids: number[];\n  popularity: number;\n  first_air_date: string;\n  vote_average: number;\n  vote_count: number;\n  origin_country: string[];\n}\n\nexport interface TMDBSearchResult {\n  page: number;\n  results: (TMDBMovieSearchResult | TMDBShowSearchResult)[];\n  total_pages: number;\n  total_results: number;\n}\n","import { satisfies } from \"semver\";\n\nconst allowedExtensionRange = \"^1.0.2\";\n\nexport function isAllowedExtensionVersion(version: string): boolean {\n  return satisfies(version, allowedExtensionRange);\n}\n","import {\n  MessagesMetadata,\n  sendToBackgroundViaRelay,\n} from \"@plasmohq/messaging\";\n\nimport { isAllowedExtensionVersion } from \"@/backend/extension/compatibility\";\nimport { ExtensionMakeRequestResponse } from \"@/backend/extension/plasmo\";\n\n// for some reason, about 500 ms is needed after\n// page load before the extension starts responding properly\nconst isExtensionReady = new Promise<void>((resolve) => {\n  setTimeout(() => {\n    resolve();\n  }, 500);\n});\n\nlet activeExtension = false;\n\nasync function sendMessage<MessageKey extends keyof MessagesMetadata>(\n  message: MessageKey,\n  payload: MessagesMetadata[MessageKey][\"req\"] | undefined = undefined,\n  timeout: number = -1,\n) {\n  await isExtensionReady;\n  return new Promise<MessagesMetadata[MessageKey][\"res\"] | null>((resolve) => {\n    if (timeout >= 0) setTimeout(() => resolve(null), timeout);\n    sendToBackgroundViaRelay<\n      MessagesMetadata[MessageKey][\"req\"],\n      MessagesMetadata[MessageKey][\"res\"]\n    >({\n      name: message,\n      body: payload,\n    })\n      .then((res) => {\n        activeExtension = true;\n        resolve(res);\n      })\n      .catch(() => {\n        activeExtension = false;\n        resolve(null);\n      });\n  });\n}\n\nexport async function sendExtensionRequest<T>(\n  ops: MessagesMetadata[\"makeRequest\"][\"req\"],\n): Promise<ExtensionMakeRequestResponse<T> | null> {\n  return sendMessage(\"makeRequest\", ops);\n}\n\nexport async function setDomainRule(\n  ops: MessagesMetadata[\"prepareStream\"][\"req\"],\n): Promise<MessagesMetadata[\"prepareStream\"][\"res\"] | null> {\n  return sendMessage(\"prepareStream\", ops);\n}\n\nexport async function sendPage(\n  ops: MessagesMetadata[\"openPage\"][\"req\"],\n): Promise<MessagesMetadata[\"openPage\"][\"res\"] | null> {\n  return sendMessage(\"openPage\", ops);\n}\n\nexport async function extensionInfo(): Promise<\n  MessagesMetadata[\"hello\"][\"res\"] | null\n> {\n  const message = await sendMessage(\"hello\", undefined, 500);\n  return message;\n}\n\nexport function isExtensionActiveCached(): boolean {\n  return activeExtension;\n}\n\nexport async function isExtensionActive(): Promise<boolean> {\n  const info = await extensionInfo();\n  if (!info?.success) return false;\n  const allowedVersion = isAllowedExtensionVersion(info.version);\n  if (!allowedVersion) return false;\n  return info.allowed && info.hasPermission;\n}\n","import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\nexport interface Account {\n  profile: {\n    colorA: string;\n    colorB: string;\n    icon: string;\n  };\n}\n\nexport type AccountWithToken = Account & {\n  sessionId: string;\n  userId: string;\n  token: string;\n  seed: string;\n  deviceName: string;\n};\n\ninterface AuthStore {\n  account: null | AccountWithToken;\n  backendUrl: null | string;\n  proxySet: null | string[];\n  removeAccount(): void;\n  setAccount(acc: AccountWithToken): void;\n  updateDeviceName(deviceName: string): void;\n  updateAccount(acc: Account): void;\n  setAccountProfile(acc: Account[\"profile\"]): void;\n  setBackendUrl(url: null | string): void;\n  setProxySet(urls: null | string[]): void;\n}\n\nexport const useAuthStore = create(\n  persist(\n    immer<AuthStore>((set) => ({\n      account: null,\n      backendUrl: null,\n      proxySet: null,\n      setAccount(acc) {\n        set((s) => {\n          s.account = acc;\n        });\n      },\n      removeAccount() {\n        set((s) => {\n          s.account = null;\n        });\n      },\n      setBackendUrl(v) {\n        set((s) => {\n          s.backendUrl = v;\n        });\n      },\n      setProxySet(urls) {\n        set((s) => {\n          s.proxySet = urls;\n        });\n      },\n      setAccountProfile(profile) {\n        set((s) => {\n          if (s.account) {\n            s.account.profile = profile;\n          }\n        });\n      },\n      updateAccount(acc) {\n        set((s) => {\n          if (!s.account) return;\n          s.account = {\n            ...s.account,\n            ...acc,\n          };\n        });\n      },\n      updateDeviceName(deviceName) {\n        set((s) => {\n          if (!s.account) return;\n          s.account.deviceName = deviceName;\n        });\n      },\n    })),\n    {\n      name: \"__MW::auth\",\n    },\n  ),\n);\n","import { ScrapeMedia } from \"@movie-web/providers\";\nimport { nanoid } from \"nanoid\";\nimport { ofetch } from \"ofetch\";\nimport { useCallback } from \"react\";\n\nimport { isExtensionActiveCached } from \"@/backend/extension/messaging\";\nimport { ScrapingItems, ScrapingSegment } from \"@/hooks/useProviderScrape\";\nimport { useAuthStore } from \"@/stores/auth\";\nimport { PlayerMeta } from \"@/stores/player/slices/source\";\n\n// for anybody who cares - these are anonymous metrics.\n// They are just used for figuring out if providers are broken or not\nconst metricsEndpoint = \"https://backend.movie-web.app/metrics/providers\";\nconst captchaMetricsEndpoint = \"https://backend.movie-web.app/metrics/captcha\";\nconst batchId = () => nanoid(32);\n\nexport type ProviderMetric = {\n  tmdbId: string;\n  type: string;\n  title: string;\n  seasonId?: string;\n  episodeId?: string;\n  status: \"failed\" | \"notfound\" | \"success\";\n  providerId: string;\n  embedId?: string;\n  errorMessage?: string;\n  fullError?: string;\n};\n\nexport type ScrapeTool = \"default\" | \"custom-proxy\" | \"extension\";\n\nexport function getScrapeTool(): ScrapeTool {\n  if (isExtensionActiveCached()) return \"extension\";\n  const hasProxySet = !!useAuthStore.getState().proxySet;\n  if (hasProxySet) return \"custom-proxy\";\n  return \"default\";\n}\n\nfunction getStackTrace(error: Error, lines: number) {\n  const topMessage = error.toString();\n  const stackTraceLines = (error.stack ?? \"\").split(\"\\n\", lines + 1);\n  stackTraceLines.pop();\n  return `${topMessage}\\n\\n${stackTraceLines.join(\"\\n\")}`;\n}\n\nexport async function reportProviders(items: ProviderMetric[]): Promise<void> {\n  return ofetch(metricsEndpoint, {\n    method: \"POST\",\n    body: {\n      items,\n      tool: getScrapeTool(),\n      batchId: batchId(),\n    },\n  });\n}\n\nconst segmentStatusMap: Record<\n  ScrapingSegment[\"status\"],\n  ProviderMetric[\"status\"] | null\n> = {\n  success: \"success\",\n  notfound: \"notfound\",\n  failure: \"failed\",\n  pending: null,\n  waiting: null,\n};\n\nexport function scrapeSourceOutputToProviderMetric(\n  media: PlayerMeta,\n  providerId: string,\n  embedId: string | null,\n  status: ProviderMetric[\"status\"],\n  err: unknown | null,\n): ProviderMetric {\n  const episodeId = media.episode?.tmdbId;\n  const seasonId = media.season?.tmdbId;\n  let error: undefined | Error;\n  if (err instanceof Error) error = err;\n\n  return {\n    status,\n    providerId,\n    title: media.title,\n    tmdbId: media.tmdbId,\n    type: media.type,\n    embedId: embedId ?? undefined,\n    episodeId,\n    seasonId,\n    errorMessage: error?.message,\n    fullError: error ? getStackTrace(error, 5) : undefined,\n  };\n}\n\nexport function scrapeSegmentToProviderMetric(\n  media: ScrapeMedia,\n  providerId: string,\n  segment: ScrapingSegment,\n): ProviderMetric | null {\n  const status = segmentStatusMap[segment.status];\n  if (!status) return null;\n  let episodeId: string | undefined;\n  let seasonId: string | undefined;\n  if (media.type === \"show\") {\n    episodeId = media.episode.tmdbId;\n    seasonId = media.season.tmdbId;\n  }\n  let error: undefined | Error;\n  if (segment.error instanceof Error) error = segment.error;\n\n  return {\n    status,\n    providerId,\n    title: media.title,\n    tmdbId: media.tmdbId,\n    type: media.type,\n    embedId: segment.embedId,\n    episodeId,\n    seasonId,\n    errorMessage: segment.reason ?? error?.message,\n    fullError: error ? getStackTrace(error, 5) : undefined,\n  };\n}\n\nexport function scrapePartsToProviderMetric(\n  media: ScrapeMedia,\n  order: ScrapingItems[],\n  sources: Record<string, ScrapingSegment>,\n): ProviderMetric[] {\n  const output: ProviderMetric[] = [];\n\n  order.forEach((orderItem) => {\n    const source = sources[orderItem.id];\n    orderItem.children.forEach((embedId) => {\n      const embed = sources[embedId];\n      if (!embed.embedId) return;\n      const metric = scrapeSegmentToProviderMetric(media, source.id, embed);\n      if (!metric) return;\n      output.push(metric);\n    });\n\n    const metric = scrapeSegmentToProviderMetric(media, source.id, source);\n    if (!metric) return;\n    output.push(metric);\n  });\n\n  return output;\n}\n\nexport function useReportProviders() {\n  const report = useCallback((items: ProviderMetric[]) => {\n    if (items.length === 0) return;\n    reportProviders(items).catch(() => {});\n  }, []);\n\n  return { report };\n}\n\nexport function reportCaptchaSolve(success: boolean) {\n  ofetch(captchaMetricsEndpoint, {\n    method: \"POST\",\n    body: {\n      success,\n    },\n  }).catch(() => {});\n}\n","import { MetaOutput, NotFoundError, ScrapeMedia } from \"@movie-web/providers\";\nimport { jwtDecode } from \"jwt-decode\";\n\nimport { mwFetch } from \"@/backend/helpers/fetch\";\nimport { getTurnstileToken, isTurnstileInitialized } from \"@/stores/turnstile\";\n\nlet metaDataCache: MetaOutput[] | null = null;\nlet token: null | string = null;\n\nexport function setCachedMetadata(data: MetaOutput[]) {\n  metaDataCache = data;\n}\n\nexport function getCachedMetadata(): MetaOutput[] {\n  return metaDataCache ?? [];\n}\n\nexport function setApiToken(newToken: string) {\n  token = newToken;\n}\n\nfunction getTokenIfValid(): null | string {\n  if (!token) return null;\n  try {\n    const body = jwtDecode(token);\n    if (!body.exp) return `jwt|${token}`;\n    if (Date.now() / 1000 < body.exp) return `jwt|${token}`;\n  } catch (err) {\n    // we dont care about parse errors\n  }\n  return null;\n}\n\nexport async function fetchMetadata(base: string) {\n  if (metaDataCache) return;\n  const data = await mwFetch<MetaOutput[][]>(`${base}/metadata`);\n  metaDataCache = data.flat();\n}\n\nfunction scrapeMediaToQueryMedia(media: ScrapeMedia) {\n  let extra: Record<string, string> = {};\n  if (media.type === \"show\") {\n    extra = {\n      episodeNumber: media.episode.number.toString(),\n      episodeTmdbId: media.episode.tmdbId,\n      seasonNumber: media.season.number.toString(),\n      seasonTmdbId: media.season.tmdbId,\n    };\n  }\n\n  return {\n    type: media.type,\n    releaseYear: media.releaseYear.toString(),\n    imdbId: media.imdbId,\n    tmdbId: media.tmdbId,\n    title: media.title,\n    ...extra,\n  };\n}\n\nfunction addQueryDataToUrl(url: URL, data: Record<string, string | undefined>) {\n  Object.entries(data).forEach((entry) => {\n    if (entry[1]) url.searchParams.set(entry[0], entry[1]);\n  });\n}\n\nexport function makeProviderUrl(base: string) {\n  const makeUrl = (p: string) => new URL(`${base}${p}`);\n  return {\n    scrapeSource(sourceId: string, media: ScrapeMedia) {\n      const url = makeUrl(\"/scrape/source\");\n      addQueryDataToUrl(url, scrapeMediaToQueryMedia(media));\n      addQueryDataToUrl(url, { id: sourceId });\n      return url.toString();\n    },\n    scrapeAll(media: ScrapeMedia) {\n      const url = makeUrl(\"/scrape\");\n      addQueryDataToUrl(url, scrapeMediaToQueryMedia(media));\n      return url.toString();\n    },\n    scrapeEmbed(embedId: string, embedUrl: string) {\n      const url = makeUrl(\"/scrape/embed\");\n      addQueryDataToUrl(url, { id: embedId, url: embedUrl });\n      return url.toString();\n    },\n  };\n}\n\nexport async function getApiToken(): Promise<string | null> {\n  let apiToken = getTokenIfValid();\n  if (!apiToken && isTurnstileInitialized()) {\n    apiToken = `turnstile|${await getTurnstileToken()}`;\n  }\n  return apiToken;\n}\n\nfunction parseEventInput(inp: string): any {\n  if (inp.length === 0) return {};\n  return JSON.parse(inp);\n}\n\nexport async function connectServerSideEvents<T>(\n  url: string,\n  endEvents: string[],\n) {\n  const apiToken = await getApiToken();\n\n  // insert token, if its set\n  const parsedUrl = new URL(url);\n  if (apiToken) parsedUrl.searchParams.set(\"token\", apiToken);\n  const eventSource = new EventSource(parsedUrl.toString());\n\n  let promReject: (reason?: any) => void;\n  let promResolve: (value: T) => void;\n  const promise = new Promise<T>((resolve, reject) => {\n    promResolve = resolve;\n    promReject = reject;\n  });\n\n  endEvents.forEach((evt) => {\n    eventSource.addEventListener(evt, (e) => {\n      eventSource.close();\n      promResolve(parseEventInput(e.data));\n    });\n  });\n\n  eventSource.addEventListener(\"token\", (e) => {\n    setApiToken(parseEventInput(e.data));\n  });\n\n  eventSource.addEventListener(\"error\", (err: MessageEvent<any>) => {\n    eventSource.close();\n    if (err.data) {\n      const data = JSON.parse(err.data);\n      let errObj = new Error(\"scrape error\");\n      if (data.name === NotFoundError.name)\n        errObj = new NotFoundError(\"Notfound from server\");\n      Object.assign(errObj, data);\n      promReject(errObj);\n      return;\n    }\n\n    console.error(\"Failed to connect to SSE\", err);\n    promReject(err);\n  });\n\n  eventSource.addEventListener(\"message\", (ev) => {\n    if (!ev) {\n      eventSource.close();\n      return;\n    }\n    setTimeout(() => {\n      promReject(new Error(\"SSE closed improperly\"));\n    }, 1000);\n  });\n\n  return {\n    promise: () => promise,\n    on<Data>(event: string, cb: (data: Data) => void) {\n      eventSource.addEventListener(event, (e) => cb(JSON.parse(e.data)));\n    },\n  };\n}\n","import { conf } from \"@/setup/config\";\nimport { useAuthStore } from \"@/stores/auth\";\n\nconst originalUrls = conf().PROXY_URLS;\nconst types = [\"proxy\", \"api\"] as const;\n\ntype ParsedUrlType = (typeof types)[number];\n\nexport interface ParsedUrl {\n  url: string;\n  type: ParsedUrlType;\n}\n\nfunction canParseUrl(url: string): boolean {\n  try {\n    return !!new URL(url);\n  } catch {\n    return false;\n  }\n}\n\nfunction isParsedUrlType(type: string): type is ParsedUrlType {\n  return types.includes(type as any);\n}\n\n/**\n * Turn a string like \"a=b;c=d;d=e\" into a dictionary object\n */\nfunction parseParams(input: string): Record<string, string> {\n  const entriesParams = input\n    .split(\";\")\n    .map((param) => param.split(\"=\", 2).filter((part) => part.length !== 0))\n    .filter((v) => v.length === 2);\n  return Object.fromEntries(entriesParams);\n}\n\nexport function getParsedUrls() {\n  const urls = useAuthStore.getState().proxySet ?? originalUrls;\n  const output: ParsedUrl[] = [];\n  urls.forEach((url) => {\n    if (!url.startsWith(\"|\")) {\n      if (canParseUrl(url)) {\n        output.push({\n          url,\n          type: \"proxy\",\n        });\n        return;\n      }\n    }\n\n    const match = /^\\|([^|]+)\\|(.*)$/g.exec(url);\n    if (!match || !match[2]) return;\n    if (!canParseUrl(match[2])) return;\n    const params = parseParams(match[1]);\n    const type = params.type ?? \"proxy\";\n\n    if (!isParsedUrlType(type)) return;\n    output.push({\n      url: match[2],\n      type,\n    });\n  });\n\n  return output;\n}\n\nexport function getProxyUrls() {\n  return getParsedUrls()\n    .filter((v) => v.type === \"proxy\")\n    .map((v) => v.url);\n}\n\nexport function getProviderApiUrls() {\n  return getParsedUrls()\n    .filter((v) => v.type === \"api\")\n    .map((v) => v.url);\n}\n","import { ExtensionMakeRequestBodyType } from \"./plasmo\";\n\nexport function getBodyTypeFromBody(\n  body: unknown,\n): ExtensionMakeRequestBodyType {\n  if (typeof body === \"string\") return \"string\";\n  if (body instanceof FormData) return \"FormData\";\n  if (body instanceof URLSearchParams) return \"URLSearchParams\";\n  return \"object\";\n}\n\nexport function convertBodyToObject(body: unknown): any {\n  if (body instanceof FormData || body instanceof URLSearchParams) {\n    return [...body];\n  }\n  return body;\n}\n","import { Fetcher, makeSimpleProxyFetcher } from \"@movie-web/providers\";\n\nimport { sendExtensionRequest } from \"@/backend/extension/messaging\";\nimport { getApiToken, setApiToken } from \"@/backend/helpers/providerApi\";\nimport { getProviderApiUrls, getProxyUrls } from \"@/utils/proxyUrls\";\n\nimport { convertBodyToObject, getBodyTypeFromBody } from \"../extension/request\";\n\nfunction makeLoadbalancedList(getter: () => string[]) {\n  let listIndex = -1;\n  return () => {\n    const fetchers = getter();\n    if (listIndex === -1 || listIndex >= fetchers.length) {\n      listIndex = Math.floor(Math.random() * fetchers.length);\n    }\n    const proxyUrl = fetchers[listIndex];\n    listIndex = (listIndex + 1) % fetchers.length;\n    return proxyUrl;\n  };\n}\n\nexport const getLoadbalancedProxyUrl = makeLoadbalancedList(getProxyUrls);\nexport const getLoadbalancedProviderApiUrl =\n  makeLoadbalancedList(getProviderApiUrls);\n\nasync function fetchButWithApiTokens(\n  input: RequestInfo | URL,\n  init?: RequestInit | undefined,\n): Promise<Response> {\n  const apiToken = await getApiToken();\n  const headers = new Headers(init?.headers);\n  if (apiToken) headers.set(\"X-Token\", apiToken);\n  const response = await fetch(\n    input,\n    init\n      ? {\n          ...init,\n          headers,\n        }\n      : undefined,\n  );\n  const newApiToken = response.headers.get(\"X-Token\");\n  if (newApiToken) setApiToken(newApiToken);\n  return response;\n}\n\nexport function makeLoadBalancedSimpleProxyFetcher() {\n  const fetcher: Fetcher = async (a, b) => {\n    const currentFetcher = makeSimpleProxyFetcher(\n      getLoadbalancedProxyUrl(),\n      fetchButWithApiTokens,\n    );\n    return currentFetcher(a, b);\n  };\n  return fetcher;\n}\n\nfunction makeFinalHeaders(\n  readHeaders: string[],\n  headers: Record<string, string>,\n): Headers {\n  const lowercasedHeaders = readHeaders.map((v) => v.toLowerCase());\n  return new Headers(\n    Object.entries(headers).filter((entry) =>\n      lowercasedHeaders.includes(entry[0].toLowerCase()),\n    ),\n  );\n}\n\nexport function makeExtensionFetcher() {\n  const fetcher: Fetcher = async (url, ops) => {\n    const result = await sendExtensionRequest<any>({\n      url,\n      ...ops,\n      body: convertBodyToObject(ops.body),\n      bodyType: getBodyTypeFromBody(ops.body),\n    });\n    if (!result?.success) throw new Error(`extension error: ${result?.error}`);\n    const res = result.response;\n    return {\n      body: res.body,\n      finalUrl: res.finalUrl,\n      statusCode: res.statusCode,\n      headers: makeFinalHeaders(ops.readHeaders, res.headers),\n    };\n  };\n  return fetcher;\n}\n","import { ofetch } from \"ofetch\";\n\nimport { getApiToken, setApiToken } from \"@/backend/helpers/providerApi\";\nimport { getLoadbalancedProxyUrl } from \"@/backend/providers/fetchers\";\n\ntype P<T> = Parameters<typeof ofetch<T, any>>;\ntype R<T> = ReturnType<typeof ofetch<T, any>>;\n\nconst baseFetch = ofetch.create({\n  retry: 0,\n});\n\nexport function makeUrl(url: string, data: Record<string, string>) {\n  let parsedUrl: string = url;\n  Object.entries(data).forEach(([k, v]) => {\n    parsedUrl = parsedUrl.replace(`{${k}}`, encodeURIComponent(v));\n  });\n  return parsedUrl;\n}\n\nexport function mwFetch<T>(url: string, ops: P<T>[1] = {}): R<T> {\n  return baseFetch<T>(url, ops);\n}\n\nexport async function singularProxiedFetch<T>(\n  proxyUrl: string,\n  url: string,\n  ops: P<T>[1] = {},\n): R<T> {\n  let combinedUrl = ops?.baseURL ?? \"\";\n  if (\n    combinedUrl.length > 0 &&\n    combinedUrl.endsWith(\"/\") &&\n    url.startsWith(\"/\")\n  )\n    combinedUrl += url.slice(1);\n  else if (\n    combinedUrl.length > 0 &&\n    !combinedUrl.endsWith(\"/\") &&\n    !url.startsWith(\"/\")\n  )\n    combinedUrl += `/${url}`;\n  else combinedUrl += url;\n\n  const parsedUrl = new URL(combinedUrl);\n  Object.entries(ops?.params ?? {}).forEach(([k, v]) => {\n    parsedUrl.searchParams.set(k, v);\n  });\n  Object.entries(ops?.query ?? {}).forEach(([k, v]) => {\n    parsedUrl.searchParams.set(k, v);\n  });\n\n  let headers = ops.headers ?? {};\n  const apiToken = await getApiToken();\n  if (apiToken)\n    headers = {\n      ...headers,\n      \"X-Token\": apiToken,\n    };\n\n  return baseFetch<T>(proxyUrl, {\n    ...ops,\n    baseURL: undefined,\n    params: {\n      destination: parsedUrl.toString(),\n    },\n    query: {},\n    headers,\n    onResponse(context) {\n      const tokenHeader = context.response.headers.get(\"X-Token\");\n      if (tokenHeader) setApiToken(tokenHeader);\n      ops.onResponse?.(context);\n    },\n  });\n}\n\nexport function proxiedFetch<T>(url: string, ops: P<T>[1] = {}): R<T> {\n  return singularProxiedFetch<T>(getLoadbalancedProxyUrl(), url, ops);\n}\n","import slugify from \"slugify\";\n\nimport { conf } from \"@/setup/config\";\nimport { MediaItem } from \"@/utils/mediaTypes\";\n\nimport { MWMediaMeta, MWMediaType, MWSeasonMeta } from \"./types/mw\";\nimport {\n  ExternalIdMovieSearchResult,\n  TMDBContentTypes,\n  TMDBEpisodeShort,\n  TMDBMediaResult,\n  TMDBMovieData,\n  TMDBMovieSearchResult,\n  TMDBSearchResult,\n  TMDBSeason,\n  TMDBSeasonMetaResult,\n  TMDBShowData,\n  TMDBShowSearchResult,\n} from \"./types/tmdb\";\nimport { mwFetch } from \"../helpers/fetch\";\n\nexport function mediaTypeToTMDB(type: MWMediaType): TMDBContentTypes {\n  if (type === MWMediaType.MOVIE) return TMDBContentTypes.MOVIE;\n  if (type === MWMediaType.SERIES) return TMDBContentTypes.TV;\n  throw new Error(\"unsupported type\");\n}\n\nexport function mediaItemTypeToMediaType(type: MediaItem[\"type\"]): MWMediaType {\n  if (type === \"movie\") return MWMediaType.MOVIE;\n  if (type === \"show\") return MWMediaType.SERIES;\n  throw new Error(\"unsupported type\");\n}\n\nexport function TMDBMediaToMediaType(type: TMDBContentTypes): MWMediaType {\n  if (type === TMDBContentTypes.MOVIE) return MWMediaType.MOVIE;\n  if (type === TMDBContentTypes.TV) return MWMediaType.SERIES;\n  throw new Error(\"unsupported type\");\n}\n\nexport function TMDBMediaToMediaItemType(\n  type: TMDBContentTypes,\n): MediaItem[\"type\"] {\n  if (type === TMDBContentTypes.MOVIE) return \"movie\";\n  if (type === TMDBContentTypes.TV) return \"show\";\n  throw new Error(\"unsupported type\");\n}\n\nexport function formatTMDBMeta(\n  media: TMDBMediaResult,\n  season?: TMDBSeasonMetaResult,\n): MWMediaMeta {\n  const type = TMDBMediaToMediaType(media.object_type);\n  let seasons: undefined | MWSeasonMeta[];\n  if (type === MWMediaType.SERIES) {\n    seasons = media.seasons\n      ?.sort((a, b) => a.season_number - b.season_number)\n      .map(\n        (v): MWSeasonMeta => ({\n          title: v.title,\n          id: v.id.toString(),\n          number: v.season_number,\n        }),\n      );\n  }\n\n  return {\n    title: media.title,\n    id: media.id.toString(),\n    year: media.original_release_year?.toString(),\n    poster: media.poster,\n    type,\n    seasons: seasons as any,\n    seasonData: season\n      ? {\n          id: season.id.toString(),\n          number: season.season_number,\n          title: season.title,\n          episodes: season.episodes\n            .sort((a, b) => a.episode_number - b.episode_number)\n            .map((v) => ({\n              id: v.id.toString(),\n              number: v.episode_number,\n              title: v.title,\n              air_date: v.air_date,\n            })),\n        }\n      : (undefined as any),\n  };\n}\n\nexport function formatTMDBMetaToMediaItem(media: TMDBMediaResult): MediaItem {\n  const type = TMDBMediaToMediaItemType(media.object_type);\n\n  return {\n    title: media.title,\n    id: media.id.toString(),\n    year: media.original_release_year ?? 0,\n    poster: media.poster,\n    type,\n  };\n}\n\nexport function TMDBIdToUrlId(\n  type: MWMediaType,\n  tmdbId: string,\n  title: string,\n) {\n  return [\n    \"tmdb\",\n    mediaTypeToTMDB(type),\n    tmdbId,\n    slugify(title, { lower: true, strict: true }),\n  ].join(\"-\");\n}\n\nexport function TMDBMediaToId(media: MWMediaMeta): string {\n  return TMDBIdToUrlId(media.type, media.id, media.title);\n}\n\nexport function mediaItemToId(media: MediaItem): string {\n  return TMDBIdToUrlId(\n    mediaItemTypeToMediaType(media.type),\n    media.id,\n    media.title,\n  );\n}\n\nexport function decodeTMDBId(\n  paramId: string,\n): { id: string; type: MWMediaType } | null {\n  const [prefix, type, id] = paramId.split(\"-\", 3);\n  if (prefix !== \"tmdb\") return null;\n  let mediaType;\n  try {\n    mediaType = TMDBMediaToMediaType(type as TMDBContentTypes);\n  } catch {\n    return null;\n  }\n  return {\n    type: mediaType,\n    id,\n  };\n}\n\nconst baseURL = \"https://api.themoviedb.org/3\";\n\nconst headers = {\n  accept: \"application/json\",\n  Authorization: `Bearer ${conf().TMDB_READ_API_KEY}`,\n};\n\nasync function get<T>(url: string, params?: object): Promise<T> {\n  const res = await mwFetch<any>(encodeURI(url), {\n    headers,\n    baseURL,\n    params: {\n      ...params,\n    },\n  });\n  return res;\n}\n\nexport async function multiSearch(\n  query: string,\n): Promise<(TMDBMovieSearchResult | TMDBShowSearchResult)[]> {\n  const data = await get<TMDBSearchResult>(\"search/multi\", {\n    query,\n    include_adult: false,\n    language: \"en-US\",\n    page: 1,\n  });\n  // filter out results that aren't movies or shows\n  const results = data.results.filter(\n    (r) =>\n      r.media_type === TMDBContentTypes.MOVIE ||\n      r.media_type === TMDBContentTypes.TV,\n  );\n  return results;\n}\n\nexport async function generateQuickSearchMediaUrl(\n  query: string,\n): Promise<string | undefined> {\n  const data = await multiSearch(query);\n  if (data.length === 0) return undefined;\n  const result = data[0];\n  const title =\n    result.media_type === TMDBContentTypes.MOVIE ? result.title : result.name;\n\n  return `/media/${TMDBIdToUrlId(\n    TMDBMediaToMediaType(result.media_type),\n    result.id.toString(),\n    title,\n  )}`;\n}\n\n// Conditional type which for inferring the return type based on the content type\ntype MediaDetailReturn<T extends TMDBContentTypes> =\n  T extends TMDBContentTypes.MOVIE\n    ? TMDBMovieData\n    : T extends TMDBContentTypes.TV\n      ? TMDBShowData\n      : never;\n\nexport function getMediaDetails<\n  T extends TMDBContentTypes,\n  TReturn = MediaDetailReturn<T>,\n>(id: string, type: T): Promise<TReturn> {\n  if (type === TMDBContentTypes.MOVIE) {\n    return get<TReturn>(`/movie/${id}`, { append_to_response: \"external_ids\" });\n  }\n  if (type === TMDBContentTypes.TV) {\n    return get<TReturn>(`/tv/${id}`, { append_to_response: \"external_ids\" });\n  }\n  throw new Error(\"Invalid media type\");\n}\n\nexport function getMediaPoster(posterPath: string | null): string | undefined {\n  if (posterPath) return `https://image.tmdb.org/t/p/w342/${posterPath}`;\n}\n\nexport async function getEpisodes(\n  id: string,\n  season: number,\n): Promise<TMDBEpisodeShort[]> {\n  const data = await get<TMDBSeason>(`/tv/${id}/season/${season}`);\n  return data.episodes.map((e) => ({\n    id: e.id,\n    episode_number: e.episode_number,\n    title: e.name,\n    air_date: e.air_date,\n  }));\n}\n\nexport async function getMovieFromExternalId(\n  imdbId: string,\n): Promise<string | undefined> {\n  const data = await get<ExternalIdMovieSearchResult>(`/find/${imdbId}`, {\n    external_source: \"imdb_id\",\n  });\n\n  const movie = data.movie_results[0];\n  if (!movie) return undefined;\n\n  return movie.id.toString();\n}\n\nexport function formatTMDBSearchResult(\n  result: TMDBMovieSearchResult | TMDBShowSearchResult,\n  mediatype: TMDBContentTypes,\n): TMDBMediaResult {\n  const type = TMDBMediaToMediaType(mediatype);\n  if (type === MWMediaType.SERIES) {\n    const show = result as TMDBShowSearchResult;\n    return {\n      title: show.name,\n      poster: getMediaPoster(show.poster_path),\n      id: show.id,\n      original_release_year: new Date(show.first_air_date).getFullYear(),\n      object_type: mediatype,\n    };\n  }\n\n  const movie = result as TMDBMovieSearchResult;\n\n  return {\n    title: movie.title,\n    poster: getMediaPoster(movie.poster_path),\n    id: movie.id,\n    original_release_year: new Date(movie.release_date).getFullYear(),\n    object_type: mediatype,\n  };\n}\n","import { FetchError } from \"ofetch\";\n\nimport { formatJWMeta, mediaTypeToJW } from \"./justwatch\";\nimport {\n  TMDBIdToUrlId,\n  TMDBMediaToMediaType,\n  formatTMDBMeta,\n  getEpisodes,\n  getMediaDetails,\n  getMediaPoster,\n  getMovieFromExternalId,\n  mediaTypeToTMDB,\n} from \"./tmdb\";\nimport {\n  JWDetailedMeta,\n  JWSeasonMetaResult,\n  JW_API_BASE,\n} from \"./types/justwatch\";\nimport { MWMediaMeta, MWMediaType } from \"./types/mw\";\nimport {\n  TMDBContentTypes,\n  TMDBMediaResult,\n  TMDBMovieData,\n  TMDBSeasonMetaResult,\n  TMDBShowData,\n} from \"./types/tmdb\";\nimport { makeUrl, proxiedFetch } from \"../helpers/fetch\";\n\nexport interface DetailedMeta {\n  meta: MWMediaMeta;\n  imdbId?: string;\n  tmdbId?: string;\n}\n\nexport function formatTMDBMetaResult(\n  details: TMDBShowData | TMDBMovieData,\n  type: MWMediaType,\n): TMDBMediaResult {\n  if (type === MWMediaType.MOVIE) {\n    const movie = details as TMDBMovieData;\n    return {\n      id: details.id,\n      title: movie.title,\n      object_type: mediaTypeToTMDB(type),\n      poster: getMediaPoster(movie.poster_path) ?? undefined,\n      original_release_year: new Date(movie.release_date).getFullYear(),\n    };\n  }\n  if (type === MWMediaType.SERIES) {\n    const show = details as TMDBShowData;\n    return {\n      id: details.id,\n      title: show.name,\n      object_type: mediaTypeToTMDB(type),\n      seasons: show.seasons.map((v) => ({\n        id: v.id,\n        season_number: v.season_number,\n        title: v.name,\n      })),\n      poster: getMediaPoster(show.poster_path) ?? undefined,\n      original_release_year: new Date(show.first_air_date).getFullYear(),\n    };\n  }\n\n  throw new Error(\"unsupported type\");\n}\n\nexport async function getMetaFromId(\n  type: MWMediaType,\n  id: string,\n  seasonId?: string,\n): Promise<DetailedMeta | null> {\n  const details = await getMediaDetails(id, mediaTypeToTMDB(type));\n\n  if (!details) return null;\n\n  const imdbId = details.external_ids.imdb_id ?? undefined;\n\n  let seasonData: TMDBSeasonMetaResult | undefined;\n\n  if (type === MWMediaType.SERIES) {\n    const seasons = (details as TMDBShowData).seasons;\n\n    let selectedSeason = seasons.find((v) => v.id.toString() === seasonId);\n    if (!selectedSeason) {\n      selectedSeason = seasons.find((v) => v.season_number === 1);\n    }\n\n    if (selectedSeason) {\n      const episodes = await getEpisodes(\n        details.id.toString(),\n        selectedSeason.season_number,\n      );\n\n      seasonData = {\n        id: selectedSeason.id.toString(),\n        season_number: selectedSeason.season_number,\n        title: selectedSeason.name,\n        episodes,\n      };\n    }\n  }\n\n  const tmdbmeta = formatTMDBMetaResult(details, type);\n  if (!tmdbmeta) return null;\n  const meta = formatTMDBMeta(tmdbmeta, seasonData);\n  if (!meta) return null;\n\n  return {\n    meta,\n    imdbId,\n    tmdbId: id,\n  };\n}\n\nexport async function getLegacyMetaFromId(\n  type: MWMediaType,\n  id: string,\n  seasonId?: string,\n): Promise<DetailedMeta | null> {\n  const queryType = mediaTypeToJW(type);\n\n  let data: JWDetailedMeta;\n  try {\n    const url = makeUrl(\"/content/titles/{type}/{id}/locale/en_US\", {\n      type: queryType,\n      id,\n    });\n    data = await proxiedFetch<JWDetailedMeta>(url, { baseURL: JW_API_BASE });\n  } catch (err) {\n    if (err instanceof FetchError) {\n      // 400 and 404 are treated as not found\n      if (err.statusCode === 400 || err.statusCode === 404) return null;\n    }\n    throw err;\n  }\n\n  let imdbId = data.external_ids.find((v) => v.provider === \"imdb_latest\")\n    ?.external_id;\n  if (!imdbId)\n    imdbId = data.external_ids.find((v) => v.provider === \"imdb\")?.external_id;\n\n  let tmdbId = data.external_ids.find((v) => v.provider === \"tmdb_latest\")\n    ?.external_id;\n  if (!tmdbId)\n    tmdbId = data.external_ids.find((v) => v.provider === \"tmdb\")?.external_id;\n\n  let seasonData: JWSeasonMetaResult | undefined;\n  if (data.object_type === \"show\") {\n    const seasonToScrape = seasonId ?? data.seasons?.[0].id.toString() ?? \"\";\n    const url = makeUrl(\"/content/titles/show_season/{id}/locale/en_US\", {\n      id: seasonToScrape,\n    });\n    seasonData = await proxiedFetch<any>(url, { baseURL: JW_API_BASE });\n  }\n\n  return {\n    meta: formatJWMeta(data, seasonData),\n    imdbId,\n    tmdbId,\n  };\n}\n\nexport function isLegacyUrl(url: string): boolean {\n  if (url.startsWith(\"/media/JW\") || url.startsWith(\"/media/tmdb-show\"))\n    return true;\n  return false;\n}\n\nexport function isLegacyMediaType(url: string): boolean {\n  if (url.startsWith(\"/media/tmdb-show\")) return true;\n  return false;\n}\n\nexport async function convertLegacyUrl(\n  url: string,\n): Promise<string | undefined> {\n  if (!isLegacyUrl(url)) return undefined;\n\n  const urlParts = url.split(\"/\").slice(2);\n  const [, type, id] = urlParts[0].split(\"-\", 3);\n  const suffix = urlParts\n    .slice(1)\n    .map((v) => `/${v}`)\n    .join(\"\");\n\n  if (isLegacyMediaType(url)) {\n    const details = await getMediaDetails(id, TMDBContentTypes.TV);\n    return `/media/${TMDBIdToUrlId(\n      MWMediaType.SERIES,\n      details.id.toString(),\n      details.name,\n    )}${suffix}`;\n  }\n\n  const mediaType = TMDBMediaToMediaType(type as TMDBContentTypes);\n  const meta = await getLegacyMetaFromId(mediaType, id);\n\n  if (!meta) return undefined;\n  const { tmdbId, imdbId } = meta;\n  if (!tmdbId && !imdbId) return undefined;\n\n  // movies always have an imdb id on tmdb\n  if (imdbId && mediaType === MWMediaType.MOVIE) {\n    const movieId = await getMovieFromExternalId(imdbId);\n    if (movieId) {\n      return `/media/${TMDBIdToUrlId(mediaType, movieId, meta.meta.title)}`;\n    }\n\n    if (tmdbId) {\n      return `/media/${TMDBIdToUrlId(mediaType, tmdbId, meta.meta.title)}`;\n    }\n  }\n}\n","export class SimpleCache<Key, Value> {\n  protected readonly INTERVAL_MS = 2 * 60 * 1000; // 2 minutes\n\n  protected _interval: ReturnType<typeof setTimeout> | null = null;\n\n  protected _compare: ((a: Key, b: Key) => boolean) | null = null;\n\n  protected _storage: { key: Key; value: Value; expiry: Date }[] = [];\n\n  /*\n   ** initialize store, will start the interval\n   */\n  public initialize(): void {\n    if (this._interval) throw new Error(\"cache is already initialized\");\n    this._interval = setInterval(() => {\n      const now = new Date();\n      this._storage.filter((val) => {\n        if (val.expiry < now) return false; // remove if expiry date is in the past\n        return true;\n      });\n    }, this.INTERVAL_MS);\n  }\n\n  /*\n   ** destroy cache instance, its not safe to use the instance after calling this\n   */\n  public destroy(): void {\n    if (this._interval) clearInterval(this._interval);\n    this.clear();\n  }\n\n  /*\n   ** Set compare function, function must return true if A & B are equal\n   */\n  public setCompare(compare: (a: Key, b: Key) => boolean): void {\n    this._compare = compare;\n  }\n\n  /*\n   ** check if cache contains the item\n   */\n  public has(key: Key): boolean {\n    return !!this.get(key);\n  }\n\n  /*\n   ** get item from cache\n   */\n  public get(key: Key): Value | undefined {\n    if (!this._compare) throw new Error(\"Compare function not set\");\n    const foundValue = this._storage.find(\n      (item) => this._compare && this._compare(item.key, key),\n    );\n    if (!foundValue) return undefined;\n    return foundValue.value;\n  }\n\n  /*\n   ** set item from cache, if it already exists, it will overwrite\n   */\n  public set(key: Key, value: Value, expirySeconds: number): void {\n    if (!this._compare) throw new Error(\"Compare function not set\");\n    const foundValue = this._storage.find(\n      (item) => this._compare && this._compare(item.key, key),\n    );\n    const expiry = new Date(new Date().getTime() + expirySeconds * 1000);\n\n    // overwrite old value\n    if (foundValue) {\n      foundValue.key = key;\n      foundValue.value = value;\n      foundValue.expiry = expiry;\n      return;\n    }\n\n    // add new value to storage\n    this._storage.push({\n      key,\n      value,\n      expiry,\n    });\n  }\n\n  /*\n   ** remove item from cache\n   */\n  public remove(key: Key): void {\n    if (!this._compare) throw new Error(\"Compare function not set\");\n    this._storage.filter((val) => {\n      if (this._compare && this._compare(val.key, key)) return false; // remove if compare is success\n      return true;\n    });\n  }\n\n  /*\n   ** clear entire cache storage\n   */\n  public clear(): void {\n    this._storage = [];\n  }\n}\n","import { SimpleCache } from \"@/utils/cache\";\nimport { MediaItem } from \"@/utils/mediaTypes\";\n\nimport {\n  formatTMDBMetaToMediaItem,\n  formatTMDBSearchResult,\n  multiSearch,\n} from \"./tmdb\";\nimport { MWQuery } from \"./types/mw\";\n\nconst cache = new SimpleCache<MWQuery, MediaItem[]>();\ncache.setCompare((a, b) => {\n  return a.searchQuery.trim() === b.searchQuery.trim();\n});\ncache.initialize();\n\nexport async function searchForMedia(query: MWQuery): Promise<MediaItem[]> {\n  if (cache.has(query)) return cache.get(query) as MediaItem[];\n  const { searchQuery } = query;\n\n  const data = await multiSearch(searchQuery);\n  const results = data.map((v) => {\n    const formattedResult = formatTMDBSearchResult(v, v.media_type);\n    return formatTMDBMetaToMediaItem(formattedResult);\n  });\n\n  const movieWithPosters = results.filter((movie) => movie.poster);\n  const movieWithoutPosters = results.filter((movie) => !movie.poster);\n\n  const sortedresult = movieWithPosters.concat(movieWithoutPosters);\n\n  // cache results for 1 hour\n  cache.set(query, sortedresult, 3600);\n  return sortedresult;\n}\n","function normalizeTitle(title: string): string {\n  return title\n    .trim()\n    .toLowerCase()\n    .replace(/['\":]/g, \"\")\n    .replace(/[^a-zA-Z0-9]+/g, \"_\");\n}\n\nexport function compareTitle(a: string, b: string): boolean {\n  return normalizeTitle(a) === normalizeTitle(b);\n}\n","import { DetailedMeta, getMetaFromId } from \"@/backend/metadata/getmeta\";\nimport { searchForMedia } from \"@/backend/metadata/search\";\nimport { mediaItemTypeToMediaType } from \"@/backend/metadata/tmdb\";\nimport { MWMediaMeta, MWMediaType } from \"@/backend/metadata/types/mw\";\nimport { compareTitle } from \"@/stores/__old/utils\";\n\nimport { WatchedStoreData, WatchedStoreItem } from \"../types\";\n\ninterface OldMediaBase {\n  mediaId: number;\n  mediaType: MWMediaType;\n  percentage: number;\n  progress: number;\n  providerId: string;\n  title: string;\n  year: number;\n}\n\ninterface OldMovie extends OldMediaBase {\n  mediaType: MWMediaType.MOVIE;\n}\n\ninterface OldSeries extends OldMediaBase {\n  mediaType: MWMediaType.SERIES;\n  episodeId: number;\n  seasonId: number;\n}\n\nexport interface OldData {\n  items: (OldMovie | OldSeries)[];\n}\n\nexport interface OldBookmarks {\n  bookmarks: (OldMovie | OldSeries)[];\n}\n\nasync function getMetas(\n  uniqueMedias: Record<string, any>,\n  oldData?: OldData,\n): Promise<Record<string, Record<string, DetailedMeta | null>> | undefined> {\n  const yearsAreClose = (a: number, b: number) => {\n    return Math.abs(a - b) <= 1;\n  };\n\n  const mediaMetas: Record<string, Record<string, DetailedMeta | null>> = {};\n\n  const relevantItems = await Promise.all(\n    Object.values(uniqueMedias).map(async (item) => {\n      const year = Number(item.year.toString().split(\"-\")[0]);\n      const data = await searchForMedia({\n        searchQuery: `${item.title} ${year}`,\n      });\n      const relevantItem = data.find(\n        (res) =>\n          yearsAreClose(Number(res.year), year) &&\n          compareTitle(res.title, item.title),\n      );\n      if (!relevantItem) {\n        console.error(`No item found for migration: ${item.title}`);\n        return;\n      }\n      return {\n        id: item.mediaId,\n        data: relevantItem,\n      };\n    }),\n  );\n\n  for (const item of relevantItems.filter(Boolean)) {\n    if (!item) continue;\n\n    let keys: (string | null)[][] = [[\"0\", \"0\"]];\n    if (item.data.type === \"show\") {\n      const meta = await getMetaFromId(MWMediaType.SERIES, item.data.id);\n      if (!meta || !meta?.meta.seasons) return;\n      const seasonNumbers = [\n        ...new Set(\n          oldData?.items\n            ? oldData.items\n                .filter((watchedEntry: any) => watchedEntry.mediaId === item.id)\n                .map((watchedEntry: any) => watchedEntry.seasonId)\n            : [\"0\"],\n        ),\n      ];\n      const seasons = seasonNumbers.map((num) => ({\n        num,\n        season: meta.meta?.seasons?.[Math.max(0, (num as number) - 1)],\n      }));\n      keys = seasons\n        .map((season) => (season ? [season.num, season?.season?.id] : []))\n        .filter((entry) => entry.length > 0);\n    }\n\n    if (!mediaMetas[item.id]) mediaMetas[item.id] = {};\n    await Promise.all(\n      keys.map(async ([key, id]) => {\n        if (!key) return;\n        mediaMetas[item.id][key] = await getMetaFromId(\n          mediaItemTypeToMediaType(item.data.type),\n          item.data.id,\n          id === \"0\" || id === null ? undefined : id,\n        );\n      }),\n    );\n  }\n\n  return mediaMetas;\n}\n\nexport async function migrateV1Bookmarks(old: OldBookmarks) {\n  const oldData = old;\n  if (!oldData) return;\n\n  const uniqueMedias: Record<string, any> = {};\n  oldData.bookmarks.forEach((item: any) => {\n    if (uniqueMedias[item.mediaId]) return;\n    uniqueMedias[item.mediaId] = item;\n  });\n\n  const mediaMetas = await getMetas(uniqueMedias);\n  if (!mediaMetas) return;\n\n  const bookmarks = Object.keys(mediaMetas)\n    .map((key) => mediaMetas[key][\"0\"])\n    .map((t) => t?.meta)\n    .filter(Boolean);\n\n  return {\n    bookmarks,\n  };\n}\n\nexport async function migrateV2Videos(old: OldData) {\n  const oldData = old;\n  if (!oldData) return;\n\n  const uniqueMedias: Record<string, any> = {};\n  oldData.items.forEach((item: any) => {\n    if (uniqueMedias[item.mediaId]) return;\n    uniqueMedias[item.mediaId] = item;\n  });\n\n  const mediaMetas = await getMetas(uniqueMedias, oldData);\n  if (!mediaMetas) return;\n\n  // We've got all the metadata you can dream of now\n  // Now let's convert stuff into the new format.\n  const newData: WatchedStoreData = {\n    ...oldData,\n    items: [],\n  };\n\n  const now = Date.now();\n\n  for (const oldWatched of oldData.items) {\n    if (oldWatched.mediaType === \"movie\") {\n      if (!mediaMetas[oldWatched.mediaId][\"0\"]?.meta) continue;\n\n      const newItem: WatchedStoreItem = {\n        item: {\n          meta: mediaMetas[oldWatched.mediaId][\"0\"]?.meta as MWMediaMeta,\n        },\n        progress: oldWatched.progress,\n        percentage: oldWatched.percentage,\n        watchedAt: Date.now(), // There was no watchedAt in V2\n      };\n\n      oldData.items = oldData.items.filter(\n        (item) => JSON.stringify(item) !== JSON.stringify(oldWatched),\n      );\n      newData.items.push(newItem);\n    } else if (oldWatched.mediaType === \"series\") {\n      if (!mediaMetas[oldWatched.mediaId][oldWatched.seasonId]?.meta) continue;\n\n      const meta = mediaMetas[oldWatched.mediaId][oldWatched.seasonId]\n        ?.meta as MWMediaMeta;\n\n      if (meta.type !== \"series\") return;\n\n      const newItem: WatchedStoreItem = {\n        item: {\n          meta,\n          series: {\n            episode: Number(oldWatched.episodeId),\n            season: Number(oldWatched.seasonId),\n            seasonId: meta.seasonData.id,\n            episodeId:\n              meta.seasonData.episodes[Number(oldWatched.episodeId) - 1].id,\n          },\n        },\n        progress: oldWatched.progress,\n        percentage: oldWatched.percentage,\n        watchedAt:\n          now +\n          Number(oldWatched.seasonId) * 1000 +\n          Number(oldWatched.episodeId), // There was no watchedAt in V2\n        // JANK ALERT: Put watchedAt in the future to show last episode as most recently\n      };\n\n      if (\n        newData.items.find(\n          (item) =>\n            item.item.meta.id === newItem.item.meta.id &&\n            item.item.series?.episodeId === newItem.item.series?.episodeId,\n        )\n      )\n        continue;\n\n      oldData.items = oldData.items.filter(\n        (item) => JSON.stringify(item) !== JSON.stringify(oldWatched),\n      );\n      newData.items.push(newItem);\n    }\n  }\n\n  return newData;\n}\n","export function isNotNull<T>(obj: T | null): obj is T {\n  return obj != null;\n}\n\nexport type ValuesOf<T> = T[keyof T];\n","import { getLegacyMetaFromId } from \"@/backend/metadata/getmeta\";\nimport {\n  getEpisodes,\n  getMediaDetails,\n  getMovieFromExternalId,\n} from \"@/backend/metadata/tmdb\";\nimport { MWMediaType } from \"@/backend/metadata/types/mw\";\nimport { TMDBContentTypes } from \"@/backend/metadata/types/tmdb\";\nimport { BookmarkStoreData } from \"@/stores/__old/bookmark/types\";\nimport { isNotNull } from \"@/utils/typeguard\";\n\nimport { WatchedStoreData } from \"../types\";\n\nasync function migrateId(\n  id: string,\n  type: MWMediaType,\n): Promise<string | undefined> {\n  const meta = await getLegacyMetaFromId(type, id);\n\n  if (!meta) return undefined;\n  const { tmdbId, imdbId } = meta;\n  if (!tmdbId && !imdbId) return undefined;\n\n  // movies always have an imdb id on tmdb\n  if (imdbId && type === MWMediaType.MOVIE) {\n    const movieId = await getMovieFromExternalId(imdbId);\n    if (movieId) return movieId;\n  }\n\n  if (tmdbId) {\n    return tmdbId;\n  }\n}\n\nexport async function migrateV2Bookmarks(old: BookmarkStoreData) {\n  const updatedBookmarks = old.bookmarks.map(async (item) => ({\n    ...item,\n    id: await migrateId(item.id, item.type).catch(() => undefined),\n  }));\n\n  return {\n    bookmarks: (await Promise.all(updatedBookmarks)).filter((item) => item.id),\n  };\n}\n\nexport async function migrateV3Videos(\n  old: WatchedStoreData,\n): Promise<WatchedStoreData> {\n  const updatedItems = await Promise.all(\n    old.items.map(async (progress) => {\n      try {\n        const migratedId = await migrateId(\n          progress.item.meta.id,\n          progress.item.meta.type,\n        );\n\n        if (!migratedId) return null;\n\n        const clone = structuredClone(progress);\n        clone.item.meta.id = migratedId;\n        if (clone.item.series) {\n          const series = clone.item.series;\n          const details = await getMediaDetails(\n            migratedId,\n            TMDBContentTypes.TV,\n          );\n\n          const season = details.seasons.find(\n            (v) => v.season_number === series.season,\n          );\n          if (!season) return null;\n\n          const episodes = await getEpisodes(migratedId, season.season_number);\n          const episode = episodes.find(\n            (v) => v.episode_number === series.episode,\n          );\n          if (!episode) return null;\n\n          clone.item.series.episodeId = episode.id.toString();\n          clone.item.series.seasonId = season.id.toString();\n        }\n\n        return clone;\n      } catch (err) {\n        return null;\n      }\n    }),\n  );\n\n  return {\n    items: updatedItems.filter(isNotNull),\n  };\n}\n","import { MWMediaType } from \"@/backend/metadata/types/mw\";\nimport { BookmarkMediaItem, useBookmarkStore } from \"@/stores/bookmarks\";\n\nimport { BookmarkStoreData } from \"./types\";\nimport { createVersionedStore } from \"../migrations\";\nimport { OldBookmarks, migrateV1Bookmarks } from \"../watched/migrations/v2\";\nimport { migrateV2Bookmarks } from \"../watched/migrations/v3\";\n\nconst typeMap: Record<MWMediaType, \"show\" | \"movie\" | null> = {\n  [MWMediaType.ANIME]: null,\n  [MWMediaType.MOVIE]: \"movie\",\n  [MWMediaType.SERIES]: \"show\",\n};\n\nexport const BookmarkStore = createVersionedStore<BookmarkStoreData>()\n  .setKey(\"mw-bookmarks\")\n  .addVersion({\n    version: 0,\n    migrate(oldBookmarks: OldBookmarks) {\n      return migrateV1Bookmarks(oldBookmarks);\n    },\n  })\n  .addVersion({\n    version: 1,\n    migrate(old: BookmarkStoreData) {\n      return migrateV2Bookmarks(old);\n    },\n  })\n  .addVersion({\n    version: 2,\n    migrate(old: BookmarkStoreData): BookmarkStoreData {\n      const newItems: Record<string, BookmarkMediaItem> = {};\n\n      for (const oldBookmark of old.bookmarks) {\n        const type = typeMap[oldBookmark.type];\n        if (!type) continue;\n        newItems[oldBookmark.id] = {\n          title: oldBookmark.title,\n          year: oldBookmark.year ? Number(oldBookmark.year) : undefined,\n          poster: oldBookmark.poster,\n          type,\n          updatedAt: Date.now(),\n        };\n      }\n\n      useBookmarkStore.getState().replaceBookmarks(newItems);\n\n      return { bookmarks: [] };\n    },\n  })\n  .addVersion({\n    version: 3,\n    create() {\n      return {\n        bookmarks: [],\n      };\n    },\n  })\n  .build();\n","import ar from \"@/assets/locales/ar.json\";\nimport bg from \"@/assets/locales/bg.json\";\nimport bn from \"@/assets/locales/bn.json\";\nimport ca from \"@/assets/locales/ca.json\";\nimport cs from \"@/assets/locales/cs.json\";\nimport de from \"@/assets/locales/de.json\";\nimport el from \"@/assets/locales/el.json\";\nimport en from \"@/assets/locales/en.json\";\nimport es from \"@/assets/locales/es.json\";\nimport et from \"@/assets/locales/et.json\";\nimport fa from \"@/assets/locales/fa.json\";\nimport fi from \"@/assets/locales/fi-FI.json\";\nimport fr from \"@/assets/locales/fr.json\";\nimport gl from \"@/assets/locales/gl.json\";\nimport gu from \"@/assets/locales/gu.json\";\nimport he from \"@/assets/locales/he.json\";\nimport hi from \"@/assets/locales/hi.json\";\nimport id from \"@/assets/locales/id.json\";\nimport is from \"@/assets/locales/is-IS.json\";\nimport it from \"@/assets/locales/it.json\";\nimport ja from \"@/assets/locales/ja.json\";\nimport ko from \"@/assets/locales/ko.json\";\nimport lv from \"@/assets/locales/lv.json\";\nimport minion from \"@/assets/locales/minion.json\";\nimport ne from \"@/assets/locales/ne.json\";\nimport nl from \"@/assets/locales/nl.json\";\nimport nv from \"@/assets/locales/nv.json\";\nimport pa from \"@/assets/locales/pa.json\";\nimport pirate from \"@/assets/locales/pirate.json\";\nimport pl from \"@/assets/locales/pl.json\";\nimport ptbr from \"@/assets/locales/pt-BR.json\";\nimport ptpt from \"@/assets/locales/pt-PT.json\";\nimport ro from \"@/assets/locales/ro.json\";\nimport ru from \"@/assets/locales/ru.json\";\nimport sl from \"@/assets/locales/sl.json\";\nimport sv from \"@/assets/locales/sv.json\";\nimport ta from \"@/assets/locales/ta.json\";\nimport th from \"@/assets/locales/th.json\";\nimport tok from \"@/assets/locales/tok.json\";\nimport tr from \"@/assets/locales/tr.json\";\nimport uk from \"@/assets/locales/uk.json\";\nimport vi from \"@/assets/locales/vi.json\";\nimport zhhant from \"@/assets/locales/zh-Hant.json\";\nimport zh from \"@/assets/locales/zh.json\";\n\nexport const locales = {\n  en,\n  ca,\n  cs,\n  de,\n  fr,\n  it,\n  nl,\n  pl,\n  tr,\n  vi,\n  zh,\n  he,\n  sv,\n  pirate,\n  minion,\n  lv,\n  th,\n  ne,\n  ar,\n  es,\n  et,\n  tok,\n  hi,\n  \"pt-BR\": ptbr,\n  \"pt-PT\": ptpt,\n  uk,\n  bg,\n  bn,\n  el,\n  fa,\n  gu,\n  id,\n  ja,\n  ko,\n  sl,\n  ta,\n  \"zh-HANT\": zhhant,\n  is,\n  ru,\n  gl,\n  pa,\n  ro,\n  fi,\n  nv,\n};\n\nexport type Locales = keyof typeof locales;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport { locales } from \"@/assets/languages\";\nimport { getLocaleInfo } from \"@/utils/language\";\n\n// Languages\nconst langCodes = Object.keys(locales);\nconst resources = Object.fromEntries(\n  Object.entries(locales).map((entry) => [entry[0], { translation: entry[1] }]),\n);\ni18n.use(initReactI18next).init({\n  fallbackLng: \"en\",\n  resources,\n  interpolation: {\n    escapeValue: false, // not needed for react as it escapes by default\n  },\n});\n\nexport const appLanguageOptions = langCodes.map((lang) => {\n  const langObj = getLocaleInfo(lang);\n  if (!langObj)\n    throw new Error(`Language with code ${lang} cannot be found in database`);\n  return langObj;\n});\n\nexport default i18n;\n","import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\nexport interface SubtitleStyling {\n  /**\n   * Text color of subtitles, hex string\n   */\n  color: string;\n\n  /**\n   * size percentage, ranges between 0.01 and 2\n   */\n  size: number;\n\n  /**\n   * background opacity, ranges between 0 and 1\n   */\n  backgroundOpacity: number;\n}\n\nexport interface SubtitleStore {\n  lastSync: {\n    lastSelectedLanguage: string | null;\n  };\n  enabled: boolean;\n  lastSelectedLanguage: string | null;\n  styling: SubtitleStyling;\n  overrideCasing: boolean;\n  delay: number;\n  updateStyling(newStyling: Partial<SubtitleStyling>): void;\n  setLanguage(language: string | null): void;\n  setCustomSubs(): void;\n  setOverrideCasing(enabled: boolean): void;\n  setDelay(delay: number): void;\n  importSubtitleLanguage(lang: string | null): void;\n  resetSubtitleSpecificSettings(): void;\n}\n\nexport const useSubtitleStore = create(\n  persist(\n    immer<SubtitleStore>((set) => ({\n      enabled: false,\n      lastSync: {\n        lastSelectedLanguage: null,\n      },\n      lastSelectedLanguage: null,\n      overrideCasing: false,\n      delay: 0,\n      styling: {\n        color: \"#ffffff\",\n        backgroundOpacity: 0.5,\n        size: 1,\n      },\n      resetSubtitleSpecificSettings() {\n        set((s) => {\n          s.delay = 0;\n          s.overrideCasing = false;\n        });\n      },\n      updateStyling(newStyling) {\n        set((s) => {\n          if (newStyling.backgroundOpacity !== undefined)\n            s.styling.backgroundOpacity = newStyling.backgroundOpacity;\n          if (newStyling.color !== undefined)\n            s.styling.color = newStyling.color.toLowerCase();\n          if (newStyling.size !== undefined)\n            s.styling.size = Math.min(2, Math.max(0.01, newStyling.size));\n        });\n      },\n      setLanguage(lang) {\n        set((s) => {\n          s.enabled = !!lang;\n          if (lang) s.lastSelectedLanguage = lang;\n        });\n      },\n      setCustomSubs() {\n        set((s) => {\n          s.enabled = true;\n          s.lastSelectedLanguage = null;\n        });\n      },\n      setOverrideCasing(enabled) {\n        set((s) => {\n          s.overrideCasing = enabled;\n        });\n      },\n      setDelay(delay) {\n        set((s) => {\n          s.delay = Math.max(Math.min(500, delay), -500);\n        });\n      },\n      importSubtitleLanguage(lang) {\n        set((s) => {\n          s.lastSelectedLanguage = lang;\n          s.lastSync.lastSelectedLanguage = lang;\n        });\n      },\n    })),\n    {\n      name: \"__MW::subtitles\",\n    },\n  ),\n);\n","import { useLanguageStore } from \"@/stores/language\";\nimport { useSubtitleStore } from \"@/stores/subtitles\";\n\nimport { MWSettingsData, MWSettingsDataV1 } from \"./types\";\nimport { createVersionedStore } from \"../migrations\";\n\nexport const SettingsStore = createVersionedStore<Record<never, never>>()\n  .setKey(\"mw-settings\")\n  .addVersion({\n    version: 0,\n    create(): MWSettingsDataV1 {\n      return {\n        language: \"en\",\n        captionSettings: {\n          delay: 0,\n          style: {\n            color: \"#ffffff\",\n            fontSize: 25,\n            backgroundColor: \"#00000096\",\n          },\n        },\n      };\n    },\n    migrate(data: MWSettingsDataV1): MWSettingsData {\n      return {\n        language: data.language,\n        captionSettings: {\n          language: \"none\",\n          ...data.captionSettings,\n        },\n      };\n    },\n  })\n  .addVersion({\n    version: 1,\n    migrate(old: MWSettingsData): Record<never, never> {\n      const langStore = useLanguageStore.getState();\n      const subtitleStore = useSubtitleStore.getState();\n\n      const backgroundColor = old.captionSettings.style.backgroundColor;\n      let backgroundOpacity = 0.5;\n      if (backgroundColor.length === 9) {\n        const opacitySplit = backgroundColor.slice(7); // '#' + 6 digits\n        backgroundOpacity = parseInt(opacitySplit, 16) / 255; // read as hex;\n      }\n\n      langStore.setLanguage(old.language);\n      subtitleStore.updateStyling({\n        backgroundOpacity,\n        color: old.captionSettings.style.color,\n        size: old.captionSettings.style.fontSize / 25,\n      });\n      subtitleStore.importSubtitleLanguage(\n        old.captionSettings.language === \"none\"\n          ? null\n          : old.captionSettings.language,\n      );\n\n      return {};\n    },\n  })\n  .addVersion({\n    version: 2,\n    create(): Record<never, never> {\n      return {};\n    },\n  })\n  .build();\n","import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\nexport interface VolumeStore {\n  volume: number;\n  setVolume(v: number): void;\n}\n\nexport interface EmpheralVolumeStore {\n  showVolume: boolean;\n  setShowVolume(v: boolean): void;\n}\n\nexport const useVolumeStore = create(\n  persist(\n    immer<VolumeStore>((set) => ({\n      volume: 1,\n      setVolume(v: number) {\n        set((s) => {\n          s.volume = v;\n        });\n      },\n    })),\n    {\n      name: \"__MW::volume\",\n    },\n  ),\n);\n\nexport const useEmpheralVolumeStore = create(\n  immer<EmpheralVolumeStore>((set) => ({\n    showVolume: false,\n    setShowVolume(bool: boolean) {\n      set((s) => {\n        s.showVolume = bool;\n      });\n    },\n  })),\n);\n","import { useVolumeStore } from \"@/stores/volume\";\n\nimport { createVersionedStore } from \"../migrations\";\n\ninterface VolumeStoreData {\n  volume: number;\n}\n\nexport const volumeStore = createVersionedStore<Record<never, never>>()\n  .setKey(\"mw-volume\")\n  .addVersion({\n    version: 0,\n    create() {\n      return {\n        volume: 1,\n      };\n    },\n    migrate(data: VolumeStoreData): Record<never, never> {\n      useVolumeStore.getState().setVolume(data.volume);\n      return {};\n    },\n  })\n  .addVersion({\n    version: 1,\n    create() {\n      return {};\n    },\n  })\n  .build();\n","import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\nimport { PlayerMeta } from \"@/stores/player/slices/source\";\n\nexport interface ProgressItem {\n  watched: number;\n  duration: number;\n}\n\nexport interface ProgressSeasonItem {\n  title: string;\n  number: number;\n  id: string;\n}\n\nexport interface ProgressEpisodeItem {\n  title: string;\n  number: number;\n  id: string;\n  seasonId: string;\n  updatedAt: number;\n  progress: ProgressItem;\n}\n\nexport interface ProgressMediaItem {\n  title: string;\n  year?: number;\n  poster?: string;\n  type: \"show\" | \"movie\";\n  progress?: ProgressItem;\n  updatedAt: number;\n  seasons: Record<string, ProgressSeasonItem>;\n  episodes: Record<string, ProgressEpisodeItem>;\n}\n\nexport interface ProgressUpdateItem {\n  title?: string;\n  year?: number;\n  poster?: string;\n  type?: \"show\" | \"movie\";\n  progress?: ProgressItem;\n  tmdbId: string;\n  id: string;\n  episodeId?: string;\n  seasonId?: string;\n  episodeNumber?: number;\n  seasonNumber?: number;\n  action: \"upsert\" | \"delete\";\n}\n\nexport interface UpdateItemOptions {\n  meta: PlayerMeta;\n  progress: ProgressItem;\n}\n\nexport interface ProgressStore {\n  items: Record<string, ProgressMediaItem>;\n  updateQueue: ProgressUpdateItem[];\n  updateItem(ops: UpdateItemOptions): void;\n  removeItem(id: string): void;\n  replaceItems(items: Record<string, ProgressMediaItem>): void;\n  clear(): void;\n  clearUpdateQueue(): void;\n  removeUpdateItem(id: string): void;\n}\n\nlet updateId = 0;\n\nexport const useProgressStore = create(\n  persist(\n    immer<ProgressStore>((set) => ({\n      items: {},\n      updateQueue: [],\n      removeItem(id) {\n        set((s) => {\n          updateId += 1;\n          s.updateQueue.push({\n            id: updateId.toString(),\n            action: \"delete\",\n            tmdbId: id,\n          });\n\n          delete s.items[id];\n        });\n      },\n      replaceItems(items: Record<string, ProgressMediaItem>) {\n        set((s) => {\n          s.items = items;\n        });\n      },\n      updateItem({ meta, progress }) {\n        set((s) => {\n          // add to updateQueue\n          updateId += 1;\n          s.updateQueue.push({\n            tmdbId: meta.tmdbId,\n            title: meta.title,\n            year: meta.releaseYear,\n            poster: meta.poster,\n            type: meta.type,\n            progress: { ...progress },\n            id: updateId.toString(),\n            episodeId: meta.episode?.tmdbId,\n            seasonId: meta.season?.tmdbId,\n            seasonNumber: meta.season?.number,\n            episodeNumber: meta.episode?.number,\n            action: \"upsert\",\n          });\n\n          // add to progress store\n          if (!s.items[meta.tmdbId])\n            s.items[meta.tmdbId] = {\n              type: meta.type,\n              episodes: {},\n              seasons: {},\n              updatedAt: 0,\n              title: meta.title,\n              year: meta.releaseYear,\n              poster: meta.poster,\n            };\n          const item = s.items[meta.tmdbId];\n          item.updatedAt = Date.now();\n\n          if (meta.type === \"movie\") {\n            if (!item.progress)\n              item.progress = {\n                duration: 0,\n                watched: 0,\n              };\n            item.progress = { ...progress };\n            return;\n          }\n\n          if (!meta.episode || !meta.season) return;\n\n          if (!item.seasons[meta.season.tmdbId])\n            item.seasons[meta.season.tmdbId] = {\n              id: meta.season.tmdbId,\n              number: meta.season.number,\n              title: meta.season.title,\n            };\n\n          if (!item.episodes[meta.episode.tmdbId])\n            item.episodes[meta.episode.tmdbId] = {\n              id: meta.episode.tmdbId,\n              number: meta.episode.number,\n              title: meta.episode.title,\n              seasonId: meta.season.tmdbId,\n              updatedAt: Date.now(),\n              progress: {\n                duration: 0,\n                watched: 0,\n              },\n            };\n\n          item.episodes[meta.episode.tmdbId].progress = { ...progress };\n        });\n      },\n      clear() {\n        set((s) => {\n          s.items = {};\n        });\n      },\n      clearUpdateQueue() {\n        set((s) => {\n          s.updateQueue = [];\n        });\n      },\n      removeUpdateItem(id: string) {\n        set((s) => {\n          s.updateQueue = [...s.updateQueue.filter((v) => v.id !== id)];\n        });\n      },\n    })),\n    {\n      name: \"__MW::progress\",\n    },\n  ),\n);\n","import { MWMediaType } from \"@/backend/metadata/types/mw\";\nimport { ProgressMediaItem } from \"@/stores/progress\";\n\nimport { WatchedStoreData } from \"../types\";\n\nexport function migrateV4Videos(old: WatchedStoreData) {\n  // Convert items\n  const newItems: Record<string, ProgressMediaItem> = {};\n\n  for (const oldItem of old.items) {\n    if (oldItem.item.meta.type === MWMediaType.SERIES) {\n      // Upsert\n      if (!newItems[oldItem.item.meta.id]) {\n        newItems[oldItem.item.meta.id] = {\n          type: \"show\",\n          episodes: {},\n          seasons: {},\n          title: oldItem.item.meta.title,\n          updatedAt: oldItem.watchedAt,\n          poster: oldItem.item.meta.poster,\n          year: Number(oldItem.item.meta.year),\n        };\n      }\n\n      // Add episodes\n      if (\n        oldItem.item.series &&\n        !newItems[oldItem.item.meta.id].episodes[oldItem.item.series.episodeId]\n      ) {\n        // Find episode ID (barely ever works)\n        const episodeTitle = oldItem.item.meta.seasonData.episodes.find(\n          (ep) => ep.number === oldItem.item.series?.episode,\n        )?.title;\n\n        // Add season to season data\n        newItems[oldItem.item.meta.id].seasons[oldItem.item.series.seasonId] = {\n          id: oldItem.item.series.seasonId,\n          number: oldItem.item.series.season,\n          title:\n            oldItem.item.meta.seasons.find(\n              (s) => s.number === oldItem.item.series?.season,\n            )?.title || \"Unknown season\",\n        };\n\n        // Populate episode data\n        newItems[oldItem.item.meta.id].episodes[oldItem.item.series.episodeId] =\n          {\n            title: episodeTitle || \"Unknown\",\n            id: oldItem.item.series.episodeId,\n            number: oldItem.item.series.episode,\n            seasonId: oldItem.item.series.seasonId,\n            updatedAt: oldItem.watchedAt,\n            progress: {\n              duration: (100 / oldItem.percentage) * oldItem.progress,\n              watched: oldItem.progress,\n            },\n          };\n      }\n    } else {\n      newItems[oldItem.item.meta.id] = {\n        type: \"movie\",\n        episodes: {},\n        seasons: {},\n        title: oldItem.item.meta.title,\n        updatedAt: oldItem.watchedAt,\n        year: Number(oldItem.item.meta.year),\n        poster: oldItem.item.meta.poster,\n        progress: {\n          duration: (100 / oldItem.percentage) * oldItem.progress,\n          watched: oldItem.progress,\n        },\n      };\n    }\n  }\n\n  return newItems;\n}\n","import { useProgressStore } from \"@/stores/progress\";\n\nimport { OldData, migrateV2Videos } from \"./migrations/v2\";\nimport { migrateV3Videos } from \"./migrations/v3\";\nimport { migrateV4Videos } from \"./migrations/v4\";\nimport { WatchedStoreData } from \"./types\";\nimport { createVersionedStore } from \"../migrations\";\n\nexport const VideoProgressStore = createVersionedStore<WatchedStoreData>()\n  .setKey(\"video-progress\")\n  .addVersion({\n    version: 0,\n    migrate() {\n      return {\n        items: [], // dont migrate from version 0 to version 1, unmigratable\n      };\n    },\n  })\n  .addVersion({\n    version: 1,\n    async migrate(old: OldData) {\n      return migrateV2Videos(old);\n    },\n  })\n  .addVersion({\n    version: 2,\n    migrate(old: WatchedStoreData) {\n      return migrateV3Videos(old);\n    },\n  })\n  .addVersion({\n    version: 3,\n    migrate(old: WatchedStoreData): WatchedStoreData {\n      useProgressStore.getState().replaceItems(migrateV4Videos(old));\n\n      return {\n        items: [],\n      };\n    },\n  })\n  .addVersion({\n    version: 4,\n    create() {\n      return {\n        items: [],\n      };\n    },\n  })\n  .build();\n","import ReactGA from \"react-ga4\";\n\nimport { GA_ID } from \"@/setup/constants\";\n\nReactGA.initialize([\n  {\n    trackingId: GA_ID,\n  },\n]);\n","import { ofetch } from \"ofetch\";\n\nexport interface SessionResponse {\n  id: string;\n  userId: string;\n  createdAt: string;\n  accessedAt: string;\n  device: string;\n  userAgent: string;\n}\nexport interface LoginResponse {\n  session: SessionResponse;\n  token: string;\n}\n\nexport function getAuthHeaders(token: string): Record<string, string> {\n  return {\n    authorization: `Bearer ${token}`,\n  };\n}\n\nexport async function accountLogin(\n  url: string,\n  id: string,\n  deviceName: string,\n): Promise<LoginResponse> {\n  return ofetch<LoginResponse>(\"/auth/login\", {\n    method: \"POST\",\n    body: {\n      id,\n      device: deviceName,\n    },\n    baseURL: url,\n  });\n}\n","import { ofetch } from \"ofetch\";\n\nimport { getAuthHeaders } from \"@/backend/accounts/auth\";\nimport { BookmarkResponse } from \"@/backend/accounts/user\";\nimport { AccountWithToken } from \"@/stores/auth\";\nimport { BookmarkMediaItem } from \"@/stores/bookmarks\";\n\nexport interface BookmarkMetaInput {\n  title: string;\n  year: number;\n  poster?: string;\n  type: string;\n}\n\nexport interface BookmarkInput {\n  tmdbId: string;\n  meta: BookmarkMetaInput;\n}\n\nexport function bookmarkMediaToInput(\n  tmdbId: string,\n  item: BookmarkMediaItem,\n): BookmarkInput {\n  return {\n    meta: {\n      title: item.title,\n      type: item.type,\n      poster: item.poster,\n      year: item.year ?? 0,\n    },\n    tmdbId,\n  };\n}\n\nexport async function addBookmark(\n  url: string,\n  account: AccountWithToken,\n  input: BookmarkInput,\n) {\n  return ofetch<BookmarkResponse>(\n    `/users/${account.userId}/bookmarks/${input.tmdbId}`,\n    {\n      method: \"POST\",\n      headers: getAuthHeaders(account.token),\n      baseURL: url,\n      body: input,\n    },\n  );\n}\n\nexport async function removeBookmark(\n  url: string,\n  account: AccountWithToken,\n  id: string,\n) {\n  return ofetch<{ tmdbId: string }>(\n    `/users/${account.userId}/bookmarks/${id}`,\n    {\n      method: \"DELETE\",\n      headers: getAuthHeaders(account.token),\n      baseURL: url,\n    },\n  );\n}\n","import { pbkdf2Async } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { generateMnemonic, validateMnemonic } from \"@scure/bip39\";\nimport { wordlist } from \"@scure/bip39/wordlists/english\";\nimport forge from \"node-forge\";\n\ntype Keys = {\n  privateKey: Uint8Array;\n  publicKey: Uint8Array;\n  seed: Uint8Array;\n};\n\nasync function seedFromMnemonic(mnemonic: string) {\n  return pbkdf2Async(sha256, mnemonic, \"mnemonic\", {\n    c: 2048,\n    dkLen: 32,\n  });\n}\n\nexport function verifyValidMnemonic(mnemonic: string) {\n  return validateMnemonic(mnemonic, wordlist);\n}\n\nexport async function keysFromMnemonic(mnemonic: string): Promise<Keys> {\n  const seed = await seedFromMnemonic(mnemonic);\n\n  const { privateKey, publicKey } = forge.pki.ed25519.generateKeyPair({\n    seed,\n  });\n\n  return {\n    privateKey,\n    publicKey,\n    seed,\n  };\n}\n\nexport function genMnemonic(): string {\n  return generateMnemonic(wordlist);\n}\n\nexport async function signCode(\n  code: string,\n  privateKey: Uint8Array,\n): Promise<Uint8Array> {\n  return forge.pki.ed25519.sign({\n    encoding: \"utf8\",\n    message: code,\n    privateKey,\n  });\n}\n\nexport function bytesToBase64(bytes: Uint8Array) {\n  return forge.util.encode64(String.fromCodePoint(...bytes));\n}\n\nexport function bytesToBase64Url(bytes: Uint8Array): string {\n  return bytesToBase64(bytes)\n    .replace(/\\//g, \"_\")\n    .replace(/\\+/g, \"-\")\n    .replace(/=+$/, \"\");\n}\n\nexport async function signChallenge(keys: Keys, challengeCode: string) {\n  const signature = await signCode(challengeCode, keys.privateKey);\n  return bytesToBase64Url(signature);\n}\n\nexport function base64ToBuffer(data: string) {\n  return forge.util.binary.base64.decode(data);\n}\n\nexport function base64ToStringBuffer(data: string) {\n  return forge.util.createBuffer(base64ToBuffer(data));\n}\n\nexport function stringBufferToBase64(buffer: forge.util.ByteStringBuffer) {\n  return forge.util.encode64(buffer.getBytes());\n}\n\nexport async function encryptData(data: string, secret: Uint8Array) {\n  if (secret.byteLength !== 32)\n    throw new Error(\"Secret must be at least 256-bit\");\n\n  const iv = await new Promise<string>((resolve, reject) => {\n    forge.random.getBytes(16, (err, bytes) => {\n      if (err) reject(err);\n      resolve(bytes);\n    });\n  });\n\n  const cipher = forge.cipher.createCipher(\n    \"AES-GCM\",\n    forge.util.createBuffer(secret),\n  );\n  cipher.start({\n    iv,\n    tagLength: 128,\n  });\n  cipher.update(forge.util.createBuffer(data, \"utf8\"));\n  cipher.finish();\n\n  const encryptedData = cipher.output;\n  const tag = cipher.mode.tag;\n\n  return `${forge.util.encode64(iv)}.${stringBufferToBase64(\n    encryptedData,\n  )}.${stringBufferToBase64(tag)}` as const;\n}\n\nexport function decryptData(data: string, secret: Uint8Array) {\n  if (secret.byteLength !== 32) throw new Error(\"Secret must be 256-bit\");\n\n  const [iv, encryptedData, tag] = data.split(\".\");\n\n  const decipher = forge.cipher.createDecipher(\n    \"AES-GCM\",\n    forge.util.createBuffer(secret),\n  );\n  decipher.start({\n    iv: base64ToStringBuffer(iv),\n    tag: base64ToStringBuffer(tag),\n    tagLength: 128,\n  });\n  decipher.update(base64ToStringBuffer(encryptedData));\n  const pass = decipher.finish();\n\n  if (!pass) throw new Error(\"Error decrypting data\");\n\n  return decipher.output.toString();\n}\n","import { ofetch } from \"ofetch\";\n\nimport { getAuthHeaders } from \"@/backend/accounts/auth\";\nimport { AccountWithToken } from \"@/stores/auth\";\n\nimport { BookmarkInput } from \"./bookmarks\";\nimport { ProgressInput } from \"./progress\";\n\nexport function importProgress(\n  url: string,\n  account: AccountWithToken,\n  progressItems: ProgressInput[],\n) {\n  return ofetch<void>(`/users/${account.userId}/progress/import`, {\n    method: \"PUT\",\n    body: progressItems,\n    baseURL: url,\n    headers: getAuthHeaders(account.token),\n  });\n}\n\nexport function importBookmarks(\n  url: string,\n  account: AccountWithToken,\n  bookmarks: BookmarkInput[],\n) {\n  return ofetch<void>(`/users/${account.userId}/bookmarks`, {\n    method: \"PUT\",\n    body: bookmarks,\n    baseURL: url,\n    headers: getAuthHeaders(account.token),\n  });\n}\n","import { ofetch } from \"ofetch\";\n\nimport { SessionResponse } from \"@/backend/accounts/auth\";\n\nexport interface ChallengeTokenResponse {\n  challenge: string;\n}\n\nexport async function getLoginChallengeToken(\n  url: string,\n  publicKey: string,\n): Promise<ChallengeTokenResponse> {\n  return ofetch<ChallengeTokenResponse>(\"/auth/login/start\", {\n    method: \"POST\",\n    body: {\n      publicKey,\n    },\n    baseURL: url,\n  });\n}\n\nexport interface LoginResponse {\n  session: SessionResponse;\n  token: string;\n}\n\nexport interface LoginInput {\n  publicKey: string;\n  challenge: {\n    code: string;\n    signature: string;\n  };\n  device: string;\n}\n\nexport async function loginAccount(\n  url: string,\n  data: LoginInput,\n): Promise<LoginResponse> {\n  return ofetch<LoginResponse>(\"/auth/login/complete\", {\n    method: \"POST\",\n    body: {\n      namespace: \"movie-web\",\n      ...data,\n    },\n    baseURL: url,\n  });\n}\n","import { ofetch } from \"ofetch\";\n\nimport { getAuthHeaders } from \"@/backend/accounts/auth\";\nimport { ProgressResponse } from \"@/backend/accounts/user\";\nimport { AccountWithToken } from \"@/stores/auth\";\nimport { ProgressMediaItem, ProgressUpdateItem } from \"@/stores/progress\";\n\nexport interface ProgressInput {\n  meta?: {\n    title: string;\n    year: number;\n    poster?: string;\n    type: string;\n  };\n  tmdbId: string;\n  watched: number;\n  duration: number;\n  seasonId?: string;\n  episodeId?: string;\n  seasonNumber?: number;\n  episodeNumber?: number;\n  updatedAt?: string;\n}\n\nexport function progressUpdateItemToInput(\n  item: ProgressUpdateItem,\n): ProgressInput {\n  return {\n    duration: item.progress?.duration ?? 0,\n    watched: item.progress?.watched ?? 0,\n    tmdbId: item.tmdbId,\n    meta: {\n      title: item.title ?? \"\",\n      type: item.type ?? \"\",\n      year: item.year ?? NaN,\n      poster: item.poster,\n    },\n    episodeId: item.episodeId,\n    seasonId: item.seasonId,\n    episodeNumber: item.episodeNumber,\n    seasonNumber: item.seasonNumber,\n  };\n}\n\nexport function progressMediaItemToInputs(\n  tmdbId: string,\n  item: ProgressMediaItem,\n): ProgressInput[] {\n  if (item.type === \"show\") {\n    return Object.entries(item.episodes).flatMap(([_, episode]) => ({\n      duration: item.progress?.duration ?? episode.progress.duration,\n      watched: item.progress?.watched ?? episode.progress.watched,\n      tmdbId,\n      meta: {\n        title: item.title ?? \"\",\n        type: item.type ?? \"\",\n        year: item.year ?? NaN,\n        poster: item.poster,\n      },\n      episodeId: episode.id,\n      seasonId: episode.seasonId,\n      episodeNumber: episode.number,\n      seasonNumber: item.seasons[episode.seasonId].number,\n      updatedAt: new Date(episode.updatedAt).toISOString(),\n    }));\n  }\n  return [\n    {\n      duration: item.progress?.duration ?? 0,\n      watched: item.progress?.watched ?? 0,\n      tmdbId,\n      updatedAt: new Date(item.updatedAt).toISOString(),\n      meta: {\n        title: item.title ?? \"\",\n        type: item.type ?? \"\",\n        year: item.year ?? NaN,\n        poster: item.poster,\n      },\n    },\n  ];\n}\n\nexport async function setProgress(\n  url: string,\n  account: AccountWithToken,\n  input: ProgressInput,\n) {\n  return ofetch<ProgressResponse>(\n    `/users/${account.userId}/progress/${input.tmdbId}`,\n    {\n      method: \"PUT\",\n      headers: getAuthHeaders(account.token),\n      baseURL: url,\n      body: input,\n    },\n  );\n}\n\nexport async function removeProgress(\n  url: string,\n  account: AccountWithToken,\n  id: string,\n  episodeId?: string,\n  seasonId?: string,\n) {\n  await ofetch(`/users/${account.userId}/progress/${id}`, {\n    method: \"DELETE\",\n    headers: getAuthHeaders(account.token),\n    baseURL: url,\n    body: {\n      episodeId,\n      seasonId,\n    },\n  });\n}\n","import { ofetch } from \"ofetch\";\n\nimport { SessionResponse } from \"@/backend/accounts/auth\";\nimport { UserResponse } from \"@/backend/accounts/user\";\n\nexport interface ChallengeTokenResponse {\n  challenge: string;\n}\n\nexport async function getRegisterChallengeToken(\n  url: string,\n  captchaToken?: string,\n): Promise<ChallengeTokenResponse> {\n  return ofetch<ChallengeTokenResponse>(\"/auth/register/start\", {\n    method: \"POST\",\n    body: {\n      captchaToken,\n    },\n    baseURL: url,\n  });\n}\n\nexport interface RegisterResponse {\n  user: UserResponse;\n  session: SessionResponse;\n  token: string;\n}\n\nexport interface RegisterInput {\n  publicKey: string;\n  challenge: {\n    code: string;\n    signature: string;\n  };\n  device: string;\n  profile: {\n    colorA: string;\n    colorB: string;\n    icon: string;\n  };\n}\n\nexport async function registerAccount(\n  url: string,\n  data: RegisterInput,\n): Promise<RegisterResponse> {\n  return ofetch<RegisterResponse>(\"/auth/register/complete\", {\n    method: \"POST\",\n    body: {\n      namespace: \"movie-web\",\n      ...data,\n    },\n    baseURL: url,\n  });\n}\n","import { ofetch } from \"ofetch\";\n\nimport { getAuthHeaders } from \"@/backend/accounts/auth\";\nimport { AccountWithToken } from \"@/stores/auth\";\n\nexport interface SessionResponse {\n  id: string;\n  userId: string;\n  createdAt: string;\n  accessedAt: string;\n  device: string;\n  userAgent: string;\n}\n\nexport interface SessionUpdate {\n  deviceName: string;\n}\n\nexport async function getSessions(url: string, account: AccountWithToken) {\n  return ofetch<SessionResponse[]>(`/users/${account.userId}/sessions`, {\n    headers: getAuthHeaders(account.token),\n    baseURL: url,\n  });\n}\n\nexport async function updateSession(\n  url: string,\n  account: AccountWithToken,\n  update: SessionUpdate,\n) {\n  return ofetch<SessionResponse[]>(`/sessions/${account.sessionId}`, {\n    method: \"PATCH\",\n    headers: getAuthHeaders(account.token),\n    body: update,\n    baseURL: url,\n  });\n}\n\nexport async function removeSession(\n  url: string,\n  token: string,\n  sessionId: string,\n) {\n  return ofetch<SessionResponse[]>(`/sessions/${sessionId}`, {\n    method: \"DELETE\",\n    headers: getAuthHeaders(token),\n    baseURL: url,\n  });\n}\n","import { ofetch } from \"ofetch\";\n\nimport { getAuthHeaders } from \"@/backend/accounts/auth\";\nimport { AccountWithToken } from \"@/stores/auth\";\n\nexport interface SettingsInput {\n  applicationLanguage?: string;\n  applicationTheme?: string | null;\n  defaultSubtitleLanguage?: string;\n  proxyUrls?: string[] | null;\n}\n\nexport interface SettingsResponse {\n  applicationTheme?: string | null;\n  applicationLanguage?: string | null;\n  defaultSubtitleLanguage?: string | null;\n  proxyUrls?: string[] | null;\n}\n\nexport function updateSettings(\n  url: string,\n  account: AccountWithToken,\n  settings: SettingsInput,\n) {\n  return ofetch<SettingsResponse>(`/users/${account.userId}/settings`, {\n    method: \"PUT\",\n    body: settings,\n    baseURL: url,\n    headers: getAuthHeaders(account.token),\n  });\n}\n\nexport function getSettings(url: string, account: AccountWithToken) {\n  return ofetch<SettingsResponse>(`/users/${account.userId}/settings`, {\n    method: \"GET\",\n    baseURL: url,\n    headers: getAuthHeaders(account.token),\n  });\n}\n","import { ofetch } from \"ofetch\";\n\nimport { SessionResponse, getAuthHeaders } from \"@/backend/accounts/auth\";\nimport { AccountWithToken } from \"@/stores/auth\";\nimport { BookmarkMediaItem } from \"@/stores/bookmarks\";\nimport { ProgressMediaItem } from \"@/stores/progress\";\n\nexport interface UserResponse {\n  id: string;\n  namespace: string;\n  name: string;\n  roles: string[];\n  createdAt: string;\n  profile: {\n    colorA: string;\n    colorB: string;\n    icon: string;\n  };\n}\n\nexport interface UserEdit {\n  profile?: {\n    colorA: string;\n    colorB: string;\n    icon: string;\n  };\n}\n\nexport interface BookmarkResponse {\n  tmdbId: string;\n  meta: {\n    title: string;\n    year: number;\n    poster?: string;\n    type: \"show\" | \"movie\";\n  };\n  updatedAt: string;\n}\n\nexport interface ProgressResponse {\n  tmdbId: string;\n  season: {\n    id?: string;\n    number?: number;\n  };\n  episode: {\n    id?: string;\n    number?: number;\n  };\n  meta: {\n    title: string;\n    year: number;\n    poster?: string;\n    type: \"show\" | \"movie\";\n  };\n  duration: string;\n  watched: string;\n  updatedAt: string;\n}\n\nexport function bookmarkResponsesToEntries(responses: BookmarkResponse[]) {\n  const entries = responses.map((bookmark) => {\n    const item: BookmarkMediaItem = {\n      ...bookmark.meta,\n      updatedAt: new Date(bookmark.updatedAt).getTime(),\n    };\n    return [bookmark.tmdbId, item] as const;\n  });\n\n  return Object.fromEntries(entries);\n}\n\nexport function progressResponsesToEntries(responses: ProgressResponse[]) {\n  const items: Record<string, ProgressMediaItem> = {};\n\n  responses.forEach((v) => {\n    if (!items[v.tmdbId]) {\n      items[v.tmdbId] = {\n        title: v.meta.title,\n        poster: v.meta.poster,\n        type: v.meta.type,\n        updatedAt: new Date(v.updatedAt).getTime(),\n        episodes: {},\n        seasons: {},\n        year: v.meta.year,\n      };\n    }\n\n    const item = items[v.tmdbId];\n\n    // Since each watched episode is a single array entry but with the same tmdbId, the root item updatedAt will only have the first episode's timestamp (which is not the newest).\n    // Here, we are setting it explicitly so the updatedAt always has the highest updatedAt from the episodes.\n    if (new Date(v.updatedAt).getTime() > item.updatedAt) {\n      item.updatedAt = new Date(v.updatedAt).getTime();\n    }\n\n    if (item.type === \"movie\") {\n      item.progress = {\n        duration: Number(v.duration),\n        watched: Number(v.watched),\n      };\n    }\n\n    if (item.type === \"show\" && v.season.id && v.episode.id) {\n      item.seasons[v.season.id] = {\n        id: v.season.id,\n        number: v.season.number ?? 0,\n        title: \"\",\n      };\n      item.episodes[v.episode.id] = {\n        id: v.episode.id,\n        number: v.episode.number ?? 0,\n        title: \"\",\n        progress: {\n          duration: Number(v.duration),\n          watched: Number(v.watched),\n        },\n        seasonId: v.season.id,\n        updatedAt: new Date(v.updatedAt).getTime(),\n      };\n    }\n  });\n\n  return items;\n}\n\nexport async function getUser(\n  url: string,\n  token: string,\n): Promise<{ user: UserResponse; session: SessionResponse }> {\n  return ofetch<{ user: UserResponse; session: SessionResponse }>(\n    \"/users/@me\",\n    {\n      headers: getAuthHeaders(token),\n      baseURL: url,\n    },\n  );\n}\n\nexport async function editUser(\n  url: string,\n  account: AccountWithToken,\n  object: UserEdit,\n): Promise<{ user: UserResponse; session: SessionResponse }> {\n  return ofetch<{ user: UserResponse; session: SessionResponse }>(\n    `/users/${account.userId}`,\n    {\n      method: \"PATCH\",\n      headers: getAuthHeaders(account.token),\n      body: object,\n      baseURL: url,\n    },\n  );\n}\n\nexport async function deleteUser(\n  url: string,\n  account: AccountWithToken,\n): Promise<UserResponse> {\n  return ofetch<UserResponse>(`/users/${account.userId}`, {\n    headers: getAuthHeaders(account.token),\n    baseURL: url,\n  });\n}\n\nexport async function getBookmarks(url: string, account: AccountWithToken) {\n  return ofetch<BookmarkResponse[]>(`/users/${account.userId}/bookmarks`, {\n    headers: getAuthHeaders(account.token),\n    baseURL: url,\n  });\n}\n\nexport async function getProgress(url: string, account: AccountWithToken) {\n  return ofetch<ProgressResponse[]>(`/users/${account.userId}/progress`, {\n    headers: getAuthHeaders(account.token),\n    baseURL: url,\n  });\n}\n","import { useCallback } from \"react\";\n\nimport { LoginResponse, SessionResponse } from \"@/backend/accounts/auth\";\nimport { SettingsResponse } from \"@/backend/accounts/settings\";\nimport {\n  BookmarkResponse,\n  ProgressResponse,\n  UserResponse,\n  bookmarkResponsesToEntries,\n  progressResponsesToEntries,\n} from \"@/backend/accounts/user\";\nimport { useAuthStore } from \"@/stores/auth\";\nimport { useBookmarkStore } from \"@/stores/bookmarks\";\nimport { useLanguageStore } from \"@/stores/language\";\nimport { useProgressStore } from \"@/stores/progress\";\nimport { useSubtitleStore } from \"@/stores/subtitles\";\nimport { useThemeStore } from \"@/stores/theme\";\n\nexport function useAuthData() {\n  const loggedIn = !!useAuthStore((s) => s.account);\n  const setAccount = useAuthStore((s) => s.setAccount);\n  const removeAccount = useAuthStore((s) => s.removeAccount);\n  const setProxySet = useAuthStore((s) => s.setProxySet);\n  const clearBookmarks = useBookmarkStore((s) => s.clear);\n  const clearProgress = useProgressStore((s) => s.clear);\n  const setTheme = useThemeStore((s) => s.setTheme);\n  const setAppLanguage = useLanguageStore((s) => s.setLanguage);\n  const importSubtitleLanguage = useSubtitleStore(\n    (s) => s.importSubtitleLanguage,\n  );\n\n  const replaceBookmarks = useBookmarkStore((s) => s.replaceBookmarks);\n  const replaceItems = useProgressStore((s) => s.replaceItems);\n\n  const login = useCallback(\n    async (\n      loginResponse: LoginResponse,\n      user: UserResponse,\n      session: SessionResponse,\n      seed: string,\n    ) => {\n      const account = {\n        token: loginResponse.token,\n        userId: user.id,\n        sessionId: loginResponse.session.id,\n        deviceName: session.device,\n        profile: user.profile,\n        seed,\n      };\n      setAccount(account);\n      return account;\n    },\n    [setAccount],\n  );\n\n  const logout = useCallback(async () => {\n    removeAccount();\n    clearBookmarks();\n    clearProgress();\n  }, [removeAccount, clearBookmarks, clearProgress]);\n\n  const syncData = useCallback(\n    async (\n      _user: UserResponse,\n      _session: SessionResponse,\n      progress: ProgressResponse[],\n      bookmarks: BookmarkResponse[],\n      settings: SettingsResponse,\n    ) => {\n      replaceBookmarks(bookmarkResponsesToEntries(bookmarks));\n      replaceItems(progressResponsesToEntries(progress));\n\n      if (settings.applicationLanguage) {\n        setAppLanguage(settings.applicationLanguage);\n      }\n\n      if (settings.defaultSubtitleLanguage) {\n        importSubtitleLanguage(settings.defaultSubtitleLanguage);\n      }\n\n      if (settings.applicationTheme) {\n        setTheme(settings.applicationTheme);\n      }\n\n      if (settings.proxyUrls) {\n        setProxySet(settings.proxyUrls);\n      }\n    },\n    [\n      replaceBookmarks,\n      replaceItems,\n      setAppLanguage,\n      importSubtitleLanguage,\n      setTheme,\n      setProxySet,\n    ],\n  );\n\n  return {\n    loggedIn,\n    login,\n    logout,\n    syncData,\n  };\n}\n","import { conf } from \"@/setup/config\";\nimport { useAuthStore } from \"@/stores/auth\";\n\nexport function useBackendUrl() {\n  const backendUrl = useAuthStore((s) => s.backendUrl);\n  return backendUrl ?? conf().BACKEND_URL;\n}\n","import { useCallback } from \"react\";\n\nimport { SessionResponse } from \"@/backend/accounts/auth\";\nimport { bookmarkMediaToInput } from \"@/backend/accounts/bookmarks\";\nimport {\n  bytesToBase64,\n  bytesToBase64Url,\n  encryptData,\n  keysFromMnemonic,\n  signChallenge,\n} from \"@/backend/accounts/crypto\";\nimport { importBookmarks, importProgress } from \"@/backend/accounts/import\";\nimport { getLoginChallengeToken, loginAccount } from \"@/backend/accounts/login\";\nimport { progressMediaItemToInputs } from \"@/backend/accounts/progress\";\nimport {\n  getRegisterChallengeToken,\n  registerAccount,\n} from \"@/backend/accounts/register\";\nimport { removeSession } from \"@/backend/accounts/sessions\";\nimport { getSettings } from \"@/backend/accounts/settings\";\nimport {\n  UserResponse,\n  getBookmarks,\n  getProgress,\n  getUser,\n} from \"@/backend/accounts/user\";\nimport { useAuthData } from \"@/hooks/auth/useAuthData\";\nimport { useBackendUrl } from \"@/hooks/auth/useBackendUrl\";\nimport { AccountWithToken, useAuthStore } from \"@/stores/auth\";\nimport { BookmarkMediaItem } from \"@/stores/bookmarks\";\nimport { ProgressMediaItem } from \"@/stores/progress\";\n\nexport interface RegistrationData {\n  recaptchaToken?: string;\n  mnemonic: string;\n  userData: {\n    device: string;\n    profile: {\n      colorA: string;\n      colorB: string;\n      icon: string;\n    };\n  };\n}\n\nexport interface LoginData {\n  mnemonic: string;\n  userData: {\n    device: string;\n  };\n}\n\nexport function useAuth() {\n  const currentAccount = useAuthStore((s) => s.account);\n  const profile = useAuthStore((s) => s.account?.profile);\n  const loggedIn = !!useAuthStore((s) => s.account);\n  const backendUrl = useBackendUrl();\n  const {\n    logout: userDataLogout,\n    login: userDataLogin,\n    syncData,\n  } = useAuthData();\n\n  const login = useCallback(\n    async (loginData: LoginData) => {\n      const keys = await keysFromMnemonic(loginData.mnemonic);\n      const publicKeyBase64Url = bytesToBase64Url(keys.publicKey);\n      const { challenge } = await getLoginChallengeToken(\n        backendUrl,\n        publicKeyBase64Url,\n      );\n      const signature = await signChallenge(keys, challenge);\n      const loginResult = await loginAccount(backendUrl, {\n        challenge: {\n          code: challenge,\n          signature,\n        },\n        publicKey: publicKeyBase64Url,\n        device: await encryptData(loginData.userData.device, keys.seed),\n      });\n\n      const user = await getUser(backendUrl, loginResult.token);\n      const seedBase64 = bytesToBase64(keys.seed);\n      return userDataLogin(loginResult, user.user, user.session, seedBase64);\n    },\n    [userDataLogin, backendUrl],\n  );\n\n  const logout = useCallback(async () => {\n    if (!currentAccount) return;\n    try {\n      await removeSession(\n        backendUrl,\n        currentAccount.token,\n        currentAccount.sessionId,\n      );\n    } catch {\n      // we dont care about failing to delete session\n    }\n    await userDataLogout();\n  }, [userDataLogout, backendUrl, currentAccount]);\n\n  const register = useCallback(\n    async (registerData: RegistrationData) => {\n      const { challenge } = await getRegisterChallengeToken(\n        backendUrl,\n        registerData.recaptchaToken,\n      );\n      const keys = await keysFromMnemonic(registerData.mnemonic);\n      const signature = await signChallenge(keys, challenge);\n      const registerResult = await registerAccount(backendUrl, {\n        challenge: {\n          code: challenge,\n          signature,\n        },\n        publicKey: bytesToBase64Url(keys.publicKey),\n        device: await encryptData(registerData.userData.device, keys.seed),\n        profile: registerData.userData.profile,\n      });\n\n      return userDataLogin(\n        registerResult,\n        registerResult.user,\n        registerResult.session,\n        bytesToBase64(keys.seed),\n      );\n    },\n    [backendUrl, userDataLogin],\n  );\n\n  const importData = useCallback(\n    async (\n      account: AccountWithToken,\n      progressItems: Record<string, ProgressMediaItem>,\n      bookmarks: Record<string, BookmarkMediaItem>,\n    ) => {\n      if (\n        Object.keys(progressItems).length === 0 &&\n        Object.keys(bookmarks).length === 0\n      ) {\n        return;\n      }\n\n      const progressInputs = Object.entries(progressItems).flatMap(\n        ([tmdbId, item]) => progressMediaItemToInputs(tmdbId, item),\n      );\n\n      const bookmarkInputs = Object.entries(bookmarks).map(([tmdbId, item]) =>\n        bookmarkMediaToInput(tmdbId, item),\n      );\n\n      await Promise.all([\n        importProgress(backendUrl, account, progressInputs),\n        importBookmarks(backendUrl, account, bookmarkInputs),\n      ]);\n    },\n    [backendUrl],\n  );\n\n  const restore = useCallback(\n    async (account: AccountWithToken) => {\n      let user: { user: UserResponse; session: SessionResponse };\n      try {\n        user = await getUser(backendUrl, account.token);\n      } catch (err) {\n        const anyError: any = err;\n        if (\n          anyError?.response?.status === 401 ||\n          anyError?.response?.status === 403 ||\n          anyError?.response?.status === 400\n        ) {\n          await logout();\n          return;\n        }\n        console.error(err);\n        throw err;\n      }\n\n      const [bookmarks, progress, settings] = await Promise.all([\n        getBookmarks(backendUrl, account),\n        getProgress(backendUrl, account),\n        getSettings(backendUrl, account),\n      ]);\n\n      syncData(user.user, user.session, progress, bookmarks, settings);\n    },\n    [backendUrl, syncData, logout],\n  );\n\n  return {\n    loggedIn,\n    profile,\n    login,\n    logout,\n    register,\n    restore,\n    importData,\n  };\n}\n","import { useRef } from \"react\";\nimport { useAsync, useInterval } from \"react-use\";\n\nimport { useAuth } from \"@/hooks/auth/useAuth\";\nimport { useAuthStore } from \"@/stores/auth\";\n\nconst AUTH_CHECK_INTERVAL = 12 * 60 * 60 * 1000;\n\nexport function useAuthRestore() {\n  const { account } = useAuthStore();\n  const { restore } = useAuth();\n  const hasRestored = useRef(false);\n\n  useInterval(() => {\n    if (account) restore(account);\n  }, AUTH_CHECK_INTERVAL);\n\n  const result = useAsync(async () => {\n    if (hasRestored.current || !account) return;\n    await restore(account).finally(() => {\n      hasRestored.current = true;\n    });\n  }, []); // no deps because we don't want to it ever rerun after the first time\n\n  return result;\n}\n","import { useCallback, useMemo } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nexport function useQueryParams() {\n  const loc = useLocation();\n\n  const queryParams = useMemo(() => {\n    const obj: Record<string, string> = Object.fromEntries(\n      new URLSearchParams(loc.search).entries(),\n    );\n\n    return obj;\n  }, [loc.search]);\n\n  return queryParams;\n}\n\nexport function useQueryParam(\n  param: string,\n): [string | null, (a: string | null) => void] {\n  const params = useQueryParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const currentValue = params[param] ?? null;\n\n  const set = useCallback(\n    (value: string | null) => {\n      const parsed = new URLSearchParams(location.search);\n      if (value) parsed.set(param, value);\n      else parsed.delete(param);\n      navigate({\n        search: parsed.toString(),\n      });\n    },\n    [param, location.search, navigate],\n  );\n\n  return [currentValue, set];\n}\n","import { create } from \"zustand\";\nimport { immer } from \"zustand/middleware/immer\";\n\nexport interface OverlayTransition {\n  from: string;\n  to: string;\n}\n\nexport interface OverlayRoute {\n  id: string;\n  height: number;\n  width: number;\n}\n\nexport interface ActiveAnchorPoint {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\ninterface OverlayStore {\n  transition: null | OverlayTransition;\n  routes: Record<string, OverlayRoute>;\n  anchorPoint: ActiveAnchorPoint | null;\n  setTransition(newTrans: OverlayTransition | null): void;\n  registerRoute(route: OverlayRoute): void;\n  setAnchorPoint(point: ActiveAnchorPoint | null): void;\n}\n\nexport const useOverlayStore = create(\n  immer<OverlayStore>((set) => ({\n    transition: null,\n    routes: {},\n    anchorPoint: null,\n    setTransition(newTrans) {\n      set((s) => {\n        s.transition = newTrans;\n      });\n    },\n    registerRoute(route) {\n      set((s) => {\n        s.routes[route.id] = route;\n      });\n    },\n    setAnchorPoint(point) {\n      set((s) => {\n        s.anchorPoint = point;\n      });\n    },\n  })),\n);\n","import { useCallback, useEffect, useMemo } from \"react\";\n\nimport { useQueryParam } from \"@/hooks/useQueryParams\";\nimport { useOverlayStore } from \"@/stores/overlay/store\";\n\nfunction splitPath(path: string, prefix?: string): string[] {\n  const parts = [prefix ?? \"\", ...path.split(\"/\")];\n  return parts.filter((v) => v.length > 0);\n}\n\nfunction joinPath(path: string[]): string {\n  return `/${path.join(\"/\")}`;\n}\n\nexport function useRouterAnchorUpdate(id: string) {\n  const [route] = useQueryParam(\"r\");\n  const setAnchorPoint = useOverlayStore((s) => s.setAnchorPoint);\n  const routerActive = useMemo(\n    () => !!route && route.startsWith(`/${id}`),\n    [route, id],\n  );\n\n  const update = useCallback(() => {\n    if (!routerActive) return;\n    const anchor = document.getElementById(`__overlayRouter::${id}`);\n    if (anchor) {\n      const rect = anchor.getBoundingClientRect();\n      setAnchorPoint({\n        h: rect.height,\n        w: rect.width,\n        x: rect.x,\n        y: rect.y,\n      });\n    }\n  }, [routerActive, setAnchorPoint, id]);\n\n  useEffect(() => {\n    update();\n  }, [routerActive, update]);\n\n  useEffect(() => {\n    function resizeEvent() {\n      update();\n    }\n    window.addEventListener(\"resize\", resizeEvent);\n    return () => {\n      window.removeEventListener(\"resize\", resizeEvent);\n    };\n  }, [update]);\n}\n\nexport function useInternalOverlayRouter(id: string) {\n  const [route, setRoute] = useQueryParam(\"r\");\n  const transition = useOverlayStore((s) => s.transition);\n  const setTransition = useOverlayStore((s) => s.setTransition);\n  const routerActive = !!route && route.startsWith(`/${id}`);\n\n  function makePath(path: string) {\n    return joinPath(splitPath(path, id));\n  }\n\n  function navigate(path: string) {\n    const oldRoute = route;\n    const newRoute = joinPath(splitPath(path, id));\n    setTransition({\n      from: oldRoute ?? \"/\",\n      to: newRoute,\n    });\n    setRoute(newRoute);\n  }\n\n  function showBackwardsTransition(path: string) {\n    if (!transition) return \"none\";\n    const current = joinPath(splitPath(path, id));\n\n    if (current === transition.to && transition.from.startsWith(transition.to))\n      return \"yes\";\n    if (\n      current === transition.from &&\n      transition.to.startsWith(transition.from)\n    )\n      return \"yes\";\n    return \"no\";\n  }\n\n  function isCurrentPage(path: string) {\n    return routerActive && route === joinPath(splitPath(path, id));\n  }\n\n  function isOverlayActive() {\n    return routerActive;\n  }\n\n  const close = useCallback(\n    (preventRouteClear?: boolean) => {\n      if (route && !preventRouteClear) setRoute(null);\n      setTransition(null);\n    },\n    [setRoute, route, setTransition],\n  );\n\n  const open = useCallback(\n    (defaultRoute = \"/\") => {\n      setTransition(null);\n      setRoute(joinPath(splitPath(defaultRoute, id)));\n    },\n    [id, setRoute, setTransition],\n  );\n\n  const activeRoute = routerActive\n    ? joinPath(splitPath(route.slice(`/${id}`.length)))\n    : \"/\";\n\n  return {\n    activeRoute,\n    showBackwardsTransition,\n    isCurrentPage,\n    isOverlayActive,\n    navigate,\n    close,\n    open,\n    makePath,\n    currentRoute: route,\n  };\n}\n\nexport function useOverlayRouter(id: string) {\n  const router = useInternalOverlayRouter(id);\n  return {\n    id,\n    route: router.activeRoute,\n    isRouterActive: router.isOverlayActive(),\n    open: router.open,\n    close: router.close,\n    navigate: router.navigate,\n  };\n}\n","import { useEffect } from \"react\";\nimport { useMeasure } from \"react-use\";\nimport { create } from \"zustand\";\nimport { immer } from \"zustand/middleware/immer\";\n\ninterface BannerInstance {\n  id: string;\n  height: number;\n}\n\ninterface BannerStore {\n  banners: BannerInstance[];\n  isOnline: boolean;\n  isTurnstile: boolean;\n  location: string | null;\n  updateHeight(id: string, height: number): void;\n  showBanner(id: string): void;\n  hideBanner(id: string): void;\n  setLocation(loc: string | null): void;\n  updateOnline(isOnline: boolean): void;\n  updateTurnstile(isTurnstile: boolean): void;\n}\n\nexport const useBannerStore = create(\n  immer<BannerStore>((set) => ({\n    banners: [],\n    isOnline: true,\n    isTurnstile: false,\n    location: null,\n    updateOnline(isOnline) {\n      set((s) => {\n        s.isOnline = isOnline;\n      });\n    },\n    updateTurnstile(isTurnstile) {\n      set((s) => {\n        s.isTurnstile = isTurnstile;\n      });\n    },\n    setLocation(loc) {\n      set((s) => {\n        s.location = loc;\n      });\n    },\n    showBanner(id) {\n      set((s) => {\n        if (s.banners.find((v) => v.id === id)) return;\n        s.banners.push({\n          id,\n          height: 0,\n        });\n      });\n    },\n    hideBanner(id) {\n      set((s) => {\n        s.banners = s.banners.filter((v) => v.id !== id);\n      });\n    },\n    updateHeight(id, height) {\n      set((s) => {\n        const found = s.banners.find((v) => v.id === id);\n        if (found) found.height = height;\n      });\n    },\n  })),\n);\n\nexport function useBannerSize(location?: string) {\n  const loc = location ?? null;\n  const banners = useBannerStore((s) => s.banners);\n  const currentLocation = useBannerStore((s) => s.location);\n\n  const size = banners.reduce((a, v) => a + v.height, 0);\n  if (loc !== currentLocation) return 0;\n  return size;\n}\n\nexport function useRegisterBanner<T extends Element>(id: string) {\n  const [ref, { height }] = useMeasure<T>();\n  const updateHeight = useBannerStore((s) => s.updateHeight);\n  const showBanner = useBannerStore((s) => s.showBanner);\n  const hideBanner = useBannerStore((s) => s.hideBanner);\n\n  useEffect(() => {\n    showBanner(id);\n    return () => {\n      hideBanner(id);\n    };\n  }, [showBanner, hideBanner, id]);\n\n  useEffect(() => {\n    updateHeight(id, height);\n  }, [height, id, updateHeight]);\n\n  return [ref];\n}\n","import { useEffect, useRef } from \"react\";\n\nimport { useBannerStore } from \"@/stores/banner\";\n\nexport function useOnlineListener() {\n  const updateOnline = useBannerStore((s) => s.updateOnline);\n  const ref = useRef<boolean>(true);\n\n  useEffect(() => {\n    let counter = 0;\n\n    let abort: null | AbortController = null;\n    const interval = setInterval(() => {\n      // if online try once every 10 iterations intead of every iteration\n      counter += 1;\n      if (ref.current) {\n        if (counter < 10) return;\n      }\n      counter = 0;\n\n      if (abort) abort.abort();\n      abort = new AbortController();\n      const signal = abort.signal;\n      fetch(\"/ping.txt\", { signal })\n        .then(() => {\n          updateOnline(true);\n          ref.current = true;\n        })\n        .catch((err) => {\n          if (err.name === \"AbortError\") return;\n          updateOnline(false);\n          ref.current = false;\n        });\n    }, 5000);\n\n    return () => {\n      clearInterval(interval);\n      if (abort) abort.abort();\n    };\n  }, [updateOnline]);\n}\n","import { ofetch } from \"ofetch\";\n\nexport interface MetaResponse {\n  version: string;\n  name: string;\n  description?: string;\n  hasCaptcha: boolean;\n  captchaClientKey?: string;\n}\n\nexport async function getBackendMeta(url: string): Promise<MetaResponse> {\n  return ofetch<MetaResponse>(\"/meta\", {\n    baseURL: url,\n  });\n}\n","import { MakeSlice } from \"@/stores/player/slices/types\";\n\nexport interface CastingSlice {\n  casting: {\n    instance: cast.framework.CastContext | null;\n    player: cast.framework.RemotePlayer | null;\n    controller: cast.framework.RemotePlayerController | null;\n    setInstance(instance: cast.framework.CastContext): void;\n    setPlayer(player: cast.framework.RemotePlayer): void;\n    setController(controller: cast.framework.RemotePlayerController): void;\n    setIsCasting(isCasting: boolean): void;\n    clear(): void;\n  };\n}\n\nexport const createCastingSlice: MakeSlice<CastingSlice> = (set) => ({\n  casting: {\n    instance: null,\n    player: null,\n    controller: null,\n    setInstance(instance) {\n      set((s) => {\n        s.casting.instance = instance;\n      });\n    },\n    setPlayer(player) {\n      set((s) => {\n        s.casting.player = player;\n      });\n    },\n    setController(controller) {\n      set((s) => {\n        s.casting.controller = controller;\n      });\n    },\n    setIsCasting(isCasting) {\n      set((s) => {\n        s.interface.isCasting = isCasting;\n      });\n    },\n    clear() {\n      set((s) => {\n        s.casting.instance = null;\n      });\n    },\n  },\n});\n","import { Qualities, Stream } from \"@movie-web/providers\";\n\nimport { QualityStore } from \"@/stores/quality\";\n\nexport type SourceQuality = Qualities;\n\nexport type StreamType = \"hls\" | \"mp4\";\n\nexport type SourceFileStream = {\n  type: \"mp4\";\n  url: string;\n};\n\nexport type LoadableSource = {\n  type: StreamType;\n  url: string;\n  preferredHeaders?: Stream[\"preferredHeaders\"];\n};\n\nexport type SourceSliceSource =\n  | {\n      type: \"file\";\n      qualities: Partial<Record<SourceQuality, SourceFileStream>>;\n      preferredHeaders?: Stream[\"preferredHeaders\"];\n    }\n  | {\n      type: \"hls\";\n      url: string;\n      preferredHeaders?: Stream[\"preferredHeaders\"];\n    };\n\nconst qualitySorting: Record<SourceQuality, number> = {\n  unknown: 0,\n  \"360\": 10,\n  \"480\": 20,\n  \"720\": 30,\n  \"1080\": 40,\n  \"4k\": 25, // 4k has lower priority, you need faster internet for it\n};\nconst sortedQualities: SourceQuality[] = Object.entries(qualitySorting)\n  .sort((a, b) => b[1] - a[1])\n  .map<SourceQuality>((v) => v[0] as SourceQuality);\n\nexport function getPreferredQuality(\n  availableQualites: SourceQuality[],\n  qualityPreferences: QualityStore[\"quality\"],\n) {\n  if (\n    qualityPreferences.automaticQuality ||\n    qualityPreferences.lastChosenQuality === null ||\n    qualityPreferences.lastChosenQuality === \"unknown\"\n  )\n    return sortedQualities.find((v) => availableQualites.includes(v));\n\n  // get preferred quality - not automatic or unknown\n  const chosenQualityIndex = sortedQualities.indexOf(\n    qualityPreferences.lastChosenQuality,\n  );\n  let nearestChoseQuality: undefined | SourceQuality;\n\n  // check chosen quality or lower\n  for (let i = chosenQualityIndex; i < sortedQualities.length; i += 1) {\n    if (availableQualites.includes(sortedQualities[i])) {\n      nearestChoseQuality = sortedQualities[i];\n      break;\n    }\n  }\n  if (nearestChoseQuality) return nearestChoseQuality;\n\n  // chosen quality or lower doesn't exist, try higher\n  for (let i = chosenQualityIndex; i >= 0; i -= 1) {\n    if (availableQualites.includes(sortedQualities[i])) {\n      nearestChoseQuality = sortedQualities[i];\n      break;\n    }\n  }\n  return nearestChoseQuality;\n}\n\nexport function selectQuality(\n  source: SourceSliceSource,\n  qualityPreferences: QualityStore[\"quality\"],\n): {\n  stream: LoadableSource;\n  quality: null | SourceQuality;\n} {\n  if (source.type === \"hls\")\n    return {\n      stream: source,\n      quality: null,\n    };\n  if (source.type === \"file\") {\n    const availableQualities = Object.entries(source.qualities)\n      .filter((entry) => (entry[1].url.length ?? 0) > 0)\n      .map((entry) => entry[0]) as SourceQuality[];\n    const quality = getPreferredQuality(availableQualities, qualityPreferences);\n    if (quality) {\n      const stream = source.qualities[quality];\n      if (stream) {\n        return { stream, quality };\n      }\n    }\n  }\n  throw new Error(\"couldn't select quality\");\n}\n\nconst qualityNameMap: Record<SourceQuality, string> = {\n  \"4k\": \"4K\",\n  \"1080\": \"1080p\",\n  \"360\": \"360p\",\n  \"480\": \"480p\",\n  \"720\": \"720p\",\n  unknown: \"unknown\",\n};\n\nexport const allQualities = Object.keys(qualityNameMap) as SourceQuality[];\n\nexport function qualityToString(quality: SourceQuality): string {\n  return qualityNameMap[quality];\n}\n","import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\nimport { SourceQuality } from \"@/stores/player/utils/qualities\";\n\nexport interface QualityStore {\n  quality: {\n    lastChosenQuality: SourceQuality | null;\n    automaticQuality: boolean;\n  };\n  setLastChosenQuality(v: SourceQuality | null): void;\n  setAutomaticQuality(v: boolean): void;\n}\n\nexport const useQualityStore = create(\n  persist(\n    immer<QualityStore>((set) => ({\n      quality: {\n        automaticQuality: true,\n        lastChosenQuality: null,\n      },\n      setLastChosenQuality(v) {\n        set((s) => {\n          s.quality.lastChosenQuality = v;\n        });\n      },\n      setAutomaticQuality(v) {\n        set((s) => {\n          s.quality.automaticQuality = v;\n        });\n      },\n    })),\n    {\n      name: \"__MW::quality\",\n    },\n  ),\n);\n","import { ScrapeMedia } from \"@movie-web/providers\";\n\nimport { MakeSlice } from \"@/stores/player/slices/types\";\nimport {\n  SourceQuality,\n  SourceSliceSource,\n  selectQuality,\n} from \"@/stores/player/utils/qualities\";\nimport { useQualityStore } from \"@/stores/quality\";\nimport { ValuesOf } from \"@/utils/typeguard\";\n\nexport const playerStatus = {\n  IDLE: \"idle\",\n  SCRAPING: \"scraping\",\n  PLAYING: \"playing\",\n  SCRAPE_NOT_FOUND: \"scrapeNotFound\",\n  PLAYBACK_ERROR: \"playbackError\",\n} as const;\n\nexport type PlayerStatus = ValuesOf<typeof playerStatus>;\n\nexport interface PlayerMetaEpisode {\n  number: number;\n  tmdbId: string;\n  title: string;\n}\n\nexport interface PlayerMeta {\n  type: \"movie\" | \"show\";\n  title: string;\n  tmdbId: string;\n  imdbId?: string;\n  releaseYear: number;\n  poster?: string;\n  episodes?: PlayerMetaEpisode[];\n  episode?: PlayerMetaEpisode;\n  season?: {\n    number: number;\n    tmdbId: string;\n    title: string;\n  };\n}\n\nexport interface Caption {\n  id: string;\n  language: string;\n  url?: string;\n  srtData: string;\n}\n\nexport interface CaptionListItem {\n  id: string;\n  language: string;\n  url: string;\n  needsProxy: boolean;\n}\n\nexport interface SourceSlice {\n  status: PlayerStatus;\n  source: SourceSliceSource | null;\n  sourceId: string | null;\n  qualities: SourceQuality[];\n  currentQuality: SourceQuality | null;\n  captionList: CaptionListItem[];\n  caption: {\n    selected: Caption | null;\n    asTrack: boolean;\n  };\n  meta: PlayerMeta | null;\n  setStatus(status: PlayerStatus): void;\n  setSource(\n    stream: SourceSliceSource,\n    captions: CaptionListItem[],\n    startAt: number,\n  ): void;\n  switchQuality(quality: SourceQuality): void;\n  setMeta(meta: PlayerMeta, status?: PlayerStatus): void;\n  setCaption(caption: Caption | null): void;\n  setSourceId(id: string | null): void;\n  enableAutomaticQuality(): void;\n  redisplaySource(startAt: number): void;\n}\n\nexport function metaToScrapeMedia(meta: PlayerMeta): ScrapeMedia {\n  if (meta.type === \"show\") {\n    if (!meta.episode || !meta.season) throw new Error(\"missing show data\");\n    return {\n      title: meta.title,\n      releaseYear: meta.releaseYear,\n      tmdbId: meta.tmdbId,\n      type: \"show\",\n      imdbId: meta.imdbId,\n      episode: meta.episode,\n      season: meta.season,\n    };\n  }\n\n  return {\n    title: meta.title,\n    releaseYear: meta.releaseYear,\n    tmdbId: meta.tmdbId,\n    type: \"movie\",\n    imdbId: meta.imdbId,\n  };\n}\n\nexport const createSourceSlice: MakeSlice<SourceSlice> = (set, get) => ({\n  source: null,\n  sourceId: null,\n  qualities: [],\n  captionList: [],\n  currentQuality: null,\n  status: playerStatus.IDLE,\n  meta: null,\n  caption: {\n    selected: null,\n    asTrack: false,\n  },\n  setSourceId(id) {\n    set((s) => {\n      s.status = playerStatus.PLAYING;\n      s.sourceId = id;\n    });\n  },\n  setStatus(status: PlayerStatus) {\n    set((s) => {\n      s.status = status;\n    });\n  },\n  setMeta(meta, newStatus) {\n    set((s) => {\n      s.meta = meta;\n      s.interface.hideNextEpisodeBtn = false;\n      if (newStatus) s.status = newStatus;\n    });\n  },\n  setCaption(caption) {\n    const store = get();\n    store.display?.setCaption(caption);\n    set((s) => {\n      s.caption.selected = caption;\n    });\n  },\n  setSource(\n    stream: SourceSliceSource,\n    captions: CaptionListItem[],\n    startAt: number,\n  ) {\n    let qualities: string[] = [];\n    if (stream.type === \"file\") qualities = Object.keys(stream.qualities);\n    const qualityPreferences = useQualityStore.getState();\n    const loadableStream = selectQuality(stream, qualityPreferences.quality);\n\n    set((s) => {\n      s.source = stream;\n      s.qualities = qualities as SourceQuality[];\n      s.currentQuality = loadableStream.quality;\n      s.captionList = captions;\n      s.interface.error = undefined;\n      s.status = playerStatus.PLAYING;\n    });\n    const store = get();\n    store.redisplaySource(startAt);\n  },\n  redisplaySource(startAt: number) {\n    const store = get();\n    const quality = store.currentQuality;\n    if (!store.source) return;\n    const qualityPreferences = useQualityStore.getState();\n    const loadableStream = selectQuality(store.source, {\n      automaticQuality: qualityPreferences.quality.automaticQuality,\n      lastChosenQuality: quality,\n    });\n    set((s) => {\n      s.interface.error = undefined;\n      s.status = playerStatus.PLAYING;\n    });\n    store.display?.load({\n      source: loadableStream.stream,\n      startAt,\n      automaticQuality: qualityPreferences.quality.automaticQuality,\n      preferredQuality: qualityPreferences.quality.lastChosenQuality,\n    });\n  },\n  switchQuality(quality) {\n    const store = get();\n    if (!store.source) return;\n    if (store.source.type === \"file\") {\n      const selectedQuality = store.source.qualities[quality];\n      if (!selectedQuality) return;\n      set((s) => {\n        s.currentQuality = quality;\n        s.status = playerStatus.PLAYING;\n        s.interface.error = undefined;\n      });\n      store.display?.load({\n        source: selectedQuality,\n        startAt: store.progress.time,\n        automaticQuality: false,\n        preferredQuality: quality,\n      });\n    } else if (store.source.type === \"hls\") {\n      store.display?.changeQuality(false, quality);\n    }\n  },\n  enableAutomaticQuality() {\n    const store = get();\n    store.display?.changeQuality(true, null);\n  },\n});\n","import { DisplayInterface } from \"@/components/player/display/displayInterface\";\nimport { playerStatus } from \"@/stores/player/slices/source\";\nimport { MakeSlice } from \"@/stores/player/slices/types\";\n\nexport interface DisplaySlice {\n  display: DisplayInterface | null;\n  setDisplay(display: DisplayInterface | null): void;\n  reset(): void;\n}\n\nexport const createDisplaySlice: MakeSlice<DisplaySlice> = (set, get) => ({\n  display: null,\n  setDisplay(newDisplay: DisplayInterface | null) {\n    const display = get().display;\n    if (display) display.destroy();\n\n    if (!newDisplay) {\n      set((s) => {\n        s.display = null;\n      });\n      return;\n    }\n\n    // make display events update the state\n    newDisplay.on(\"pause\", () =>\n      set((s) => {\n        s.mediaPlaying.isPaused = true;\n        s.mediaPlaying.isPlaying = false;\n      }),\n    );\n    newDisplay.on(\"play\", () =>\n      set((s) => {\n        s.mediaPlaying.hasPlayedOnce = true;\n        s.mediaPlaying.isPaused = false;\n        s.mediaPlaying.isPlaying = true;\n      }),\n    );\n    newDisplay.on(\"fullscreen\", (isFullscreen) =>\n      set((s) => {\n        s.interface.isFullscreen = isFullscreen;\n      }),\n    );\n    newDisplay.on(\"time\", (time) =>\n      set((s) => {\n        s.progress.time = time;\n      }),\n    );\n    newDisplay.on(\"volumechange\", (vol) =>\n      set((s) => {\n        s.mediaPlaying.volume = vol;\n      }),\n    );\n    newDisplay.on(\"duration\", (duration) =>\n      set((s) => {\n        s.progress.duration = duration;\n      }),\n    );\n    newDisplay.on(\"buffered\", (buffered) =>\n      set((s) => {\n        s.progress.buffered = buffered;\n      }),\n    );\n    newDisplay.on(\"loading\", (isLoading) =>\n      set((s) => {\n        s.mediaPlaying.isLoading = isLoading;\n      }),\n    );\n    newDisplay.on(\"qualities\", (qualities) => {\n      set((s) => {\n        s.qualities = qualities;\n      });\n    });\n    newDisplay.on(\"changedquality\", (quality) => {\n      set((s) => {\n        s.currentQuality = quality;\n      });\n    });\n    newDisplay.on(\"needstrack\", (needsTrack) => {\n      set((s) => {\n        s.caption.asTrack = needsTrack;\n      });\n    });\n    newDisplay.on(\"canairplay\", (canAirplay) => {\n      set((s) => {\n        s.interface.canAirplay = canAirplay;\n      });\n    });\n    newDisplay.on(\"playbackrate\", (rate) => {\n      set((s) => {\n        s.mediaPlaying.playbackRate = rate;\n      });\n    });\n    newDisplay.on(\"error\", (err) => {\n      set((s) => {\n        s.status = playerStatus.PLAYBACK_ERROR;\n        s.interface.error = err;\n      });\n    });\n\n    set((s) => {\n      s.display = newDisplay;\n    });\n  },\n  reset() {\n    get().display?.load({\n      source: null,\n      startAt: 0,\n      automaticQuality: false,\n      preferredQuality: null,\n    });\n    set((s) => {\n      s.status = playerStatus.IDLE;\n      s.meta = null;\n      s.thumbnails.images = [];\n      s.progress.time = 0;\n      s.progress.duration = 0;\n    });\n  },\n});\n","import { DisplayError } from \"@/components/player/display/displayInterface\";\nimport { MakeSlice } from \"@/stores/player/slices/types\";\n\nexport enum VideoPlayerTimeFormat {\n  REGULAR = 0,\n  REMAINING = 1,\n}\n\nexport enum PlayerHoverState {\n  NOT_HOVERING = \"not_hovering\",\n  MOUSE_HOVER = \"mouse_hover\",\n  MOBILE_TAPPED = \"mobile_tapped\",\n}\n\nexport interface InterfaceSlice {\n  interface: {\n    isFullscreen: boolean;\n    isSeeking: boolean;\n    lastVolume: number;\n    hasOpenOverlay: boolean;\n    hovering: PlayerHoverState;\n    lastHoveringState: PlayerHoverState;\n    canAirplay: boolean;\n    isCasting: boolean;\n    hideNextEpisodeBtn: boolean;\n    shouldStartFromBeginning: boolean;\n    error?: DisplayError;\n\n    volumeChangedWithKeybind: boolean; // has the volume recently been adjusted with the up/down arrows recently?\n    volumeChangedWithKeybindDebounce: NodeJS.Timeout | null; // debounce for the duration of the \"volume changed thingamajig\"\n\n    leftControlHovering: boolean; // is the cursor hovered over the left side of player controls\n    isHoveringControls: boolean; // is the cursor hovered over any controls?\n    timeFormat: VideoPlayerTimeFormat; // Time format of the video player\n  };\n  updateInterfaceHovering(newState: PlayerHoverState): void;\n  setSeeking(seeking: boolean): void;\n  setTimeFormat(format: VideoPlayerTimeFormat): void;\n  setHoveringLeftControls(state: boolean): void;\n  setHoveringAnyControls(state: boolean): void;\n  setHasOpenOverlay(state: boolean): void;\n  setLastVolume(state: number): void;\n  hideNextEpisodeButton(): void;\n  setShouldStartFromBeginning(val: boolean): void;\n}\n\nexport const createInterfaceSlice: MakeSlice<InterfaceSlice> = (set, get) => ({\n  interface: {\n    isCasting: false,\n    hasOpenOverlay: false,\n    isFullscreen: false,\n    isSeeking: false,\n    lastVolume: 0,\n    leftControlHovering: false,\n    isHoveringControls: false,\n    hovering: PlayerHoverState.NOT_HOVERING,\n    lastHoveringState: PlayerHoverState.NOT_HOVERING,\n    volumeChangedWithKeybind: false,\n    volumeChangedWithKeybindDebounce: null,\n    timeFormat: VideoPlayerTimeFormat.REGULAR,\n    canAirplay: false,\n    hideNextEpisodeBtn: false,\n    shouldStartFromBeginning: false,\n  },\n\n  setShouldStartFromBeginning(val) {\n    set((s) => {\n      s.interface.shouldStartFromBeginning = val;\n    });\n  },\n  setLastVolume(state) {\n    set((s) => {\n      s.interface.lastVolume = state;\n    });\n  },\n  setHasOpenOverlay(state) {\n    set((s) => {\n      s.interface.hasOpenOverlay = state;\n    });\n  },\n  setTimeFormat(format) {\n    set((s) => {\n      s.interface.timeFormat = format;\n    });\n  },\n  updateInterfaceHovering(newState: PlayerHoverState) {\n    set((s) => {\n      if (newState !== PlayerHoverState.NOT_HOVERING)\n        s.interface.lastHoveringState = newState;\n      s.interface.hovering = newState;\n    });\n  },\n  setSeeking(seeking) {\n    const display = get().display;\n    display?.setSeeking(seeking);\n    set((s) => {\n      s.interface.isSeeking = seeking;\n    });\n  },\n  setHoveringLeftControls(state) {\n    set((s) => {\n      s.interface.leftControlHovering = state;\n    });\n  },\n  setHoveringAnyControls(state) {\n    set((s) => {\n      s.interface.isHoveringControls = state;\n    });\n  },\n  hideNextEpisodeButton() {\n    set((s) => {\n      s.interface.hideNextEpisodeBtn = true;\n    });\n  },\n});\n","import { MakeSlice } from \"@/stores/player/slices/types\";\n\nexport interface PlayingSlice {\n  mediaPlaying: {\n    isPlaying: boolean;\n    isPaused: boolean;\n    isSeeking: boolean; // seeking with progress bar\n    isDragSeeking: boolean; // is seeking for our custom progress bar\n    isLoading: boolean; // buffering or not\n    hasPlayedOnce: boolean; // has the video played at all?\n    volume: number;\n    playbackRate: number;\n  };\n  play(): void;\n  pause(): void;\n}\n\nexport const createPlayingSlice: MakeSlice<PlayingSlice> = (set) => ({\n  mediaPlaying: {\n    isPlaying: false,\n    isPaused: true,\n    isLoading: false,\n    isSeeking: false,\n    isDragSeeking: false,\n    hasPlayedOnce: false,\n    volume: 1,\n    playbackRate: 1,\n  },\n  play() {\n    set((state) => {\n      state.mediaPlaying.isPlaying = true;\n      state.mediaPlaying.isPaused = false;\n    });\n  },\n  pause() {\n    set((state) => {\n      state.mediaPlaying.isPlaying = false;\n      state.mediaPlaying.isPaused = false;\n    });\n  },\n});\n","import { MakeSlice } from \"@/stores/player/slices/types\";\n\nexport interface ProgressSlice {\n  progress: {\n    time: number; // current time of video\n    duration: number; // length of video\n    buffered: number; // how much is buffered\n    draggingTime: number; // when dragging, time thats at the cursor\n  };\n  setDraggingTime(draggingTime: number): void;\n}\n\nexport const createProgressSlice: MakeSlice<ProgressSlice> = (set) => ({\n  progress: {\n    time: 0,\n    duration: 0,\n    buffered: 0,\n    draggingTime: 0,\n  },\n  setDraggingTime(draggingTime: number) {\n    set((s) => {\n      s.progress.draggingTime = draggingTime;\n    });\n  },\n});\n","import { MakeSlice } from \"@/stores/player/slices/types\";\n\nexport interface ThumbnailImage {\n  at: number;\n  data: string;\n}\n\nexport interface ThumbnailSlice {\n  thumbnails: {\n    images: ThumbnailImage[];\n    addImage(img: ThumbnailImage): void;\n    resetImages(): void;\n  };\n}\n\nexport interface ThumbnailImagePosition {\n  index: number;\n  image: ThumbnailImage;\n}\n\n/**\n * get nearest image at the timestamp provided\n * @param images images, must be sorted\n */\nexport function nearestImageAt(\n  images: ThumbnailImage[],\n  at: number,\n): ThumbnailImagePosition | null {\n  // no images, early return\n  if (images.length === 0) return null;\n\n  const indexPastTimestamp = images.findIndex((v) => v.at > at);\n\n  // no image found past timestamp, so last image must be closest\n  if (indexPastTimestamp === -1)\n    return {\n      index: images.length - 1,\n      image: images[images.length - 1],\n    };\n\n  const imagePastTimestamp = images[indexPastTimestamp];\n\n  // if past timestamp is first image, just return that image\n  if (indexPastTimestamp === 0)\n    return {\n      index: indexPastTimestamp,\n      image: imagePastTimestamp,\n    };\n\n  //             distance before             distance past\n  //                    |                          |\n  //  [before] --------------------- [at] --------------------- [past]\n  const imageBeforeTimestamp = images[indexPastTimestamp - 1];\n  const distanceBefore = at - imageBeforeTimestamp.at;\n  const distancePast = imagePastTimestamp.at - at;\n\n  // if distance of before timestamp is smaller than the distance past\n  // before is closer, return that\n  //  [before] --X-------------- [past]\n  if (distanceBefore < distancePast)\n    return {\n      index: indexPastTimestamp - 1,\n      image: imageBeforeTimestamp,\n    };\n\n  // must be closer to past here, return past\n  //  [before] --------------X-- [past]\n  return {\n    index: indexPastTimestamp,\n    image: imagePastTimestamp,\n  };\n}\n\nexport const createThumbnailSlice: MakeSlice<ThumbnailSlice> = (set, get) => ({\n  thumbnails: {\n    images: [],\n    resetImages() {\n      set((s) => {\n        s.thumbnails.images = [];\n      });\n    },\n    addImage(img) {\n      const store = get();\n      const exactOrPastImageIndex = store.thumbnails.images.findIndex(\n        (v) => v.at >= img.at,\n      );\n\n      // not found past or exact, so just append to the end\n      if (exactOrPastImageIndex === -1) {\n        set((s) => {\n          s.thumbnails.images.push(img);\n          s.thumbnails.images = [...s.thumbnails.images];\n        });\n        return;\n      }\n\n      const exactOrPastImage = store.thumbnails.images[exactOrPastImageIndex];\n\n      // found exact, replace data\n      if (exactOrPastImage.at === img.at) {\n        set((s) => {\n          s.thumbnails.images[exactOrPastImageIndex] = img;\n          s.thumbnails.images = [...s.thumbnails.images];\n        });\n        return;\n      }\n\n      // found one past, insert right before it\n      set((s) => {\n        s.thumbnails.images.splice(exactOrPastImageIndex, 0, img);\n        s.thumbnails.images = [...s.thumbnails.images];\n      });\n    },\n  },\n});\n","import { create } from \"zustand\";\nimport { immer } from \"zustand/middleware/immer\";\n\nimport { createCastingSlice } from \"@/stores/player/slices/casting\";\nimport { createDisplaySlice } from \"@/stores/player/slices/display\";\nimport { createInterfaceSlice } from \"@/stores/player/slices/interface\";\nimport { createPlayingSlice } from \"@/stores/player/slices/playing\";\nimport { createProgressSlice } from \"@/stores/player/slices/progress\";\nimport { createSourceSlice } from \"@/stores/player/slices/source\";\nimport { createThumbnailSlice } from \"@/stores/player/slices/thumbnails\";\nimport { AllSlices } from \"@/stores/player/slices/types\";\n\nexport const usePlayerStore = create(\n  immer<AllSlices>((...a) => ({\n    ...createInterfaceSlice(...a),\n    ...createProgressSlice(...a),\n    ...createPlayingSlice(...a),\n    ...createSourceSlice(...a),\n    ...createDisplaySlice(...a),\n    ...createCastingSlice(...a),\n    ...createThumbnailSlice(...a),\n  })),\n);\n","import { RunOutput } from \"@movie-web/providers\";\nimport DOMPurify from \"dompurify\";\nimport { convert, detect, parse } from \"subsrt-ts\";\nimport { ContentCaption } from \"subsrt-ts/dist/types/handler\";\n\nimport { CaptionListItem } from \"@/stores/player/slices/source\";\n\nexport type CaptionCueType = ContentCaption;\nexport const sanitize = DOMPurify.sanitize;\n\nexport function captionIsVisible(\n  start: number,\n  end: number,\n  delay: number,\n  currentTime: number,\n) {\n  const delayedStart = start / 1000 + delay;\n  const delayedEnd = end / 1000 + delay;\n  return (\n    Math.max(0, delayedStart) <= currentTime &&\n    Math.max(0, delayedEnd) >= currentTime\n  );\n}\n\nexport function makeQueId(index: number, start: number, end: number): string {\n  return `${index}-${start}-${end}`;\n}\n\nexport function convertSubtitlesToVtt(text: string): string {\n  const textTrimmed = text.trim();\n  if (textTrimmed === \"\") {\n    throw new Error(\"Given text is empty\");\n  }\n  const vtt = convert(textTrimmed, \"vtt\");\n  if (detect(vtt) === \"\") {\n    throw new Error(\"Invalid subtitle format\");\n  }\n  return vtt;\n}\n\nexport function convertSubtitlesToSrt(text: string): string {\n  const textTrimmed = text.trim();\n  if (textTrimmed === \"\") {\n    throw new Error(\"Given text is empty\");\n  }\n  const srt = convert(textTrimmed, \"srt\");\n  if (detect(srt) === \"\") {\n    throw new Error(\"Invalid subtitle format\");\n  }\n  return srt;\n}\n\nexport function parseSubtitles(\n  text: string,\n  _language?: string,\n): CaptionCueType[] {\n  const vtt = convertSubtitlesToVtt(text);\n  return parse(vtt).filter((cue) => cue.type === \"caption\") as CaptionCueType[];\n}\n\nfunction stringToBase64(input: string): string {\n  return btoa(String.fromCodePoint(...new TextEncoder().encode(input)));\n}\n\nexport function convertSubtitlesToSrtDataurl(text: string): string {\n  return `data:application/x-subrip;base64,${stringToBase64(\n    convertSubtitlesToSrt(text),\n  )}`;\n}\n\nexport function convertSubtitlesToObjectUrl(text: string): string {\n  return URL.createObjectURL(\n    new Blob([convertSubtitlesToVtt(text)], {\n      type: \"text/vtt\",\n    }),\n  );\n}\n\nexport function convertProviderCaption(\n  captions: RunOutput[\"stream\"][\"captions\"],\n): CaptionListItem[] {\n  return captions.map((v) => ({\n    id: v.id,\n    language: v.language,\n    url: v.url,\n    needsProxy: v.hasCorsRestrictions,\n  }));\n}\n","import { list } from \"subsrt-ts\";\n\nimport { proxiedFetch } from \"@/backend/helpers/fetch\";\nimport { convertSubtitlesToSrt } from \"@/components/player/utils/captions\";\nimport { CaptionListItem } from \"@/stores/player/slices/source\";\nimport { SimpleCache } from \"@/utils/cache\";\n\nexport const subtitleTypeList = list().map((type) => `.${type}`);\nconst downloadCache = new SimpleCache<string, string>();\ndownloadCache.setCompare((a, b) => a === b);\nconst expirySeconds = 24 * 60 * 60;\n\n/**\n * Always returns SRT\n */\nexport async function downloadCaption(\n  caption: CaptionListItem,\n): Promise<string> {\n  const cached = downloadCache.get(caption.url);\n  if (cached) return cached;\n\n  let data: string | undefined;\n  if (caption.needsProxy) {\n    data = await proxiedFetch<string>(caption.url, { responseType: \"text\" });\n  } else {\n    data = await fetch(caption.url).then((v) => v.text());\n  }\n  if (!data) throw new Error(\"failed to get caption data\");\n\n  const output = convertSubtitlesToSrt(data);\n  downloadCache.set(caption.url, output, expirySeconds);\n  return output;\n}\n","import { useCallback } from \"react\";\n\nimport { downloadCaption } from \"@/backend/helpers/subs\";\nimport { usePlayerStore } from \"@/stores/player/store\";\nimport { useSubtitleStore } from \"@/stores/subtitles\";\n\nexport function useCaptions() {\n  const setLanguage = useSubtitleStore((s) => s.setLanguage);\n  const enabled = useSubtitleStore((s) => s.enabled);\n  const resetSubtitleSpecificSettings = useSubtitleStore(\n    (s) => s.resetSubtitleSpecificSettings,\n  );\n  const setCaption = usePlayerStore((s) => s.setCaption);\n  const lastSelectedLanguage = useSubtitleStore((s) => s.lastSelectedLanguage);\n  const captionList = usePlayerStore((s) => s.captionList);\n\n  const selectCaptionById = useCallback(\n    async (captionId: string) => {\n      const caption = captionList.find((v) => v.id === captionId);\n      if (!caption) return;\n      const srtData = await downloadCaption(caption);\n      setCaption({\n        id: caption.id,\n        language: caption.language,\n        srtData,\n        url: caption.url,\n      });\n      resetSubtitleSpecificSettings();\n      setLanguage(caption.language);\n    },\n    [setLanguage, captionList, setCaption, resetSubtitleSpecificSettings],\n  );\n\n  const selectLanguage = useCallback(\n    async (language: string) => {\n      const caption = captionList.find((v) => v.language === language);\n      if (!caption) return;\n      return selectCaptionById(caption.id);\n    },\n    [captionList, selectCaptionById],\n  );\n\n  const disable = useCallback(async () => {\n    setCaption(null);\n    setLanguage(null);\n  }, [setCaption, setLanguage]);\n\n  const selectLastUsedLanguage = useCallback(async () => {\n    const language = lastSelectedLanguage ?? \"en\";\n    await selectLanguage(language);\n    return true;\n  }, [lastSelectedLanguage, selectLanguage]);\n\n  const toggleLastUsed = useCallback(async () => {\n    if (enabled) disable();\n    else await selectLastUsedLanguage();\n  }, [selectLastUsedLanguage, disable, enabled]);\n\n  const selectLastUsedLanguageIfEnabled = useCallback(async () => {\n    if (enabled) await selectLastUsedLanguage();\n  }, [selectLastUsedLanguage, enabled]);\n\n  return {\n    selectLanguage,\n    disable,\n    selectLastUsedLanguage,\n    toggleLastUsed,\n    selectLastUsedLanguageIfEnabled,\n    selectCaptionById,\n  };\n}\n","import { useCallback, useEffect, useMemo, useRef } from \"react\";\n\nimport { usePlayerStore } from \"@/stores/player/store\";\nimport { useVolumeStore } from \"@/stores/volume\";\n\nimport { useCaptions } from \"./useCaptions\";\n\nexport function useInitializePlayer() {\n  const display = usePlayerStore((s) => s.display);\n  const volume = useVolumeStore((s) => s.volume);\n\n  const init = useCallback(() => {\n    display?.setVolume(volume);\n  }, [display, volume]);\n\n  return {\n    init,\n  };\n}\n\nexport function useInitializeSource() {\n  const source = usePlayerStore((s) => s.source);\n  const sourceIdentifier = useMemo(\n    () => (source ? JSON.stringify(source) : null),\n    [source],\n  );\n  const { selectLastUsedLanguageIfEnabled } = useCaptions();\n\n  const funRef = useRef(selectLastUsedLanguageIfEnabled);\n  useEffect(() => {\n    funRef.current = selectLastUsedLanguageIfEnabled;\n  }, [selectLastUsedLanguageIfEnabled]);\n\n  useEffect(() => {\n    if (sourceIdentifier) funRef.current();\n  }, [sourceIdentifier]);\n}\n","import { useInitializePlayer } from \"@/components/player/hooks/useInitializePlayer\";\nimport {\n  CaptionListItem,\n  PlayerMeta,\n  PlayerStatus,\n  playerStatus,\n} from \"@/stores/player/slices/source\";\nimport { usePlayerStore } from \"@/stores/player/store\";\nimport { SourceSliceSource } from \"@/stores/player/utils/qualities\";\nimport { ProgressMediaItem, useProgressStore } from \"@/stores/progress\";\n\nexport interface Source {\n  url: string;\n  type: \"hls\" | \"mp4\";\n}\n\nfunction getProgress(\n  items: Record<string, ProgressMediaItem>,\n  meta: PlayerMeta | null,\n): number {\n  const item = items[meta?.tmdbId ?? \"\"];\n  if (!item || !meta) return 0;\n  if (meta.type === \"movie\") {\n    if (!item.progress) return 0;\n    return item.progress.watched;\n  }\n\n  const ep = item.episodes[meta.episode?.tmdbId ?? \"\"];\n  if (!ep) return 0;\n  return ep.progress.watched;\n}\n\nexport function usePlayer() {\n  const setStatus = usePlayerStore((s) => s.setStatus);\n  const setMeta = usePlayerStore((s) => s.setMeta);\n  const setSource = usePlayerStore((s) => s.setSource);\n  const setCaption = usePlayerStore((s) => s.setCaption);\n  const setSourceId = usePlayerStore((s) => s.setSourceId);\n  const status = usePlayerStore((s) => s.status);\n  const shouldStartFromBeginning = usePlayerStore(\n    (s) => s.interface.shouldStartFromBeginning,\n  );\n  const setShouldStartFromBeginning = usePlayerStore(\n    (s) => s.setShouldStartFromBeginning,\n  );\n  const reset = usePlayerStore((s) => s.reset);\n  const meta = usePlayerStore((s) => s.meta);\n  const { init } = useInitializePlayer();\n  const progressStore = useProgressStore();\n\n  return {\n    meta,\n    reset,\n    status,\n    shouldStartFromBeginning,\n    setShouldStartFromBeginning,\n    setMeta(m: PlayerMeta, newStatus?: PlayerStatus) {\n      setMeta(m, newStatus);\n    },\n    playMedia(\n      source: SourceSliceSource,\n      captions: CaptionListItem[],\n      sourceId: string | null,\n      startAtOverride?: number,\n    ) {\n      const start = startAtOverride ?? getProgress(progressStore.items, meta);\n      setCaption(null);\n      setSource(source, captions, start);\n      setSourceId(sourceId);\n      setStatus(playerStatus.PLAYING);\n      init();\n    },\n    setScrapeStatus() {\n      setStatus(playerStatus.SCRAPING);\n    },\n    setScrapeNotFound() {\n      setStatus(playerStatus.SCRAPE_NOT_FOUND);\n    },\n  };\n}\n","import { detect } from \"detect-browser\";\nimport fscreen from \"fscreen\";\nimport Hls from \"hls.js\";\n\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(\n  navigator.userAgent,\n);\n\nlet cachedVolumeResult: boolean | null = null;\nexport async function canChangeVolume(): Promise<boolean> {\n  if (cachedVolumeResult === null) {\n    const timeoutPromise = new Promise<false>((resolve) => {\n      setTimeout(() => resolve(false), 1e3);\n    });\n    const promise = new Promise<true>((resolve) => {\n      const video = document.createElement(\"video\");\n      const handler = () => {\n        video.removeEventListener(\"volumechange\", handler);\n        resolve(true);\n      };\n\n      video.addEventListener(\"volumechange\", handler);\n\n      video.volume = 0.5;\n    });\n\n    cachedVolumeResult = await Promise.race([promise, timeoutPromise]);\n  }\n  return cachedVolumeResult;\n}\n\nexport function canFullscreenAnyElement(): boolean {\n  return fscreen.fullscreenEnabled;\n}\n\nexport function canWebkitFullscreen(): boolean {\n  return canFullscreenAnyElement() || isSafari;\n}\n\nexport function canFullscreen(): boolean {\n  return canFullscreenAnyElement() || canWebkitFullscreen();\n}\n\nexport function canPictureInPicture(): boolean {\n  return \"pictureInPictureEnabled\" in document;\n}\n\nexport function canWebkitPictureInPicture(): boolean {\n  return \"webkitSupportsPresentationMode\" in document.createElement(\"video\");\n}\n\nexport function canPlayHlsNatively(video: HTMLVideoElement): boolean {\n  if (Hls.isSupported()) return false; // no need to play natively\n  return !!video.canPlayType(\"application/vnd.apple.mpegurl\");\n}\n\nexport type ExtensionDetectionResult =\n  | \"unknown\" // unknown detection or weird browser\n  | \"firefox\" // firefox extensions\n  | \"chrome\" // chrome extension (could be chromium, but still works with chrome extensions)\n  | \"ios\"; // ios, no extensions\n\nexport function detectExtensionInstall(): ExtensionDetectionResult {\n  const res = detect();\n\n  // not a browser or failed to detect\n  if (res?.type !== \"browser\") return \"unknown\";\n\n  if (res.name === \"ios\" || res.name === \"ios-webview\") return \"ios\";\n  if (\n    res.name === \"chrome\" ||\n    res.name === \"chromium-webview\" ||\n    res.name === \"edge-chromium\" ||\n    res.name === \"opera\"\n  )\n    return \"chrome\";\n  if (res.name === \"firefox\") return \"firefox\";\n  return \"unknown\";\n}\n","import React, { RefObject, useCallback, useEffect, useState } from \"react\";\n\nexport type MouseActivity = React.MouseEvent<HTMLElement> | MouseEvent;\n\ntype ActivityEvent = MouseActivity | React.TouchEvent<HTMLElement> | TouchEvent;\n\nexport function makePercentageString(num: number) {\n  return `${num.toFixed(2)}%`;\n}\n\nexport function makePercentage(num: number) {\n  return Number(Math.max(0, Math.min(num, 100)).toFixed(2));\n}\n\nfunction isClickEvent(\n  evt: ActivityEvent,\n): evt is React.MouseEvent<HTMLElement> | MouseEvent {\n  return (\n    evt.type === \"mousedown\" ||\n    evt.type === \"mouseup\" ||\n    evt.type === \"mousemove\"\n  );\n}\n\nconst getEventX = (evt: ActivityEvent) => {\n  return isClickEvent(evt) ? evt.pageX : evt.changedTouches[0].pageX;\n};\n\nexport function useProgressBar(\n  barRef: RefObject<HTMLElement>,\n  commit: (percentage: number) => void,\n  commitImmediately = false,\n) {\n  const [mouseDown, setMouseDown] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    function mouseMove(ev: ActivityEvent) {\n      if (!mouseDown || !barRef.current) return;\n      const rect = barRef.current.getBoundingClientRect();\n      const pos = (getEventX(ev) - rect.left) / barRef.current.offsetWidth;\n      setProgress(pos * 100);\n      if (commitImmediately) commit(pos);\n    }\n\n    function mouseUp(ev: ActivityEvent) {\n      if (!mouseDown) return;\n      setMouseDown(false);\n      document.body.removeAttribute(\"data-no-select\");\n\n      if (!barRef.current) return;\n      const rect = barRef.current.getBoundingClientRect();\n      const pos = (getEventX(ev) - rect.left) / barRef.current.offsetWidth;\n      commit(pos);\n    }\n\n    document.addEventListener(\"mousemove\", mouseMove);\n    document.addEventListener(\"touchmove\", mouseMove);\n    document.addEventListener(\"mouseup\", mouseUp);\n    document.addEventListener(\"touchend\", mouseUp);\n\n    return () => {\n      document.removeEventListener(\"mousemove\", mouseMove);\n      document.removeEventListener(\"touchmove\", mouseMove);\n      document.removeEventListener(\"mouseup\", mouseUp);\n      document.removeEventListener(\"touchend\", mouseUp);\n    };\n  }, [mouseDown, barRef, commit, commitImmediately]);\n\n  const dragMouseDown = useCallback(\n    (ev: ActivityEvent) => {\n      setMouseDown(true);\n      document.body.setAttribute(\"data-no-select\", \"true\");\n\n      if (!barRef.current) return;\n      const rect = barRef.current.getBoundingClientRect();\n      const pos =\n        ((getEventX(ev) - rect.left) / barRef.current.offsetWidth) * 100;\n      setProgress(pos);\n    },\n    [setProgress, barRef],\n  );\n\n  return {\n    dragging: mouseDown,\n    dragPercentage: progress,\n    dragMouseDown,\n  };\n}\n","export function formatSeconds(secs: number, showHours = false): string {\n  if (Number.isNaN(secs)) {\n    if (showHours) return \"0:00:00\";\n    return \"0:00\";\n  }\n\n  let time = secs;\n  const seconds = Math.floor(time % 60);\n\n  time /= 60;\n  const minutes = Math.floor(time % 60);\n\n  time /= 60;\n  const hours = Math.floor(time);\n\n  const paddedSecs = seconds.toString().padStart(2, \"0\");\n  const paddedMins = minutes.toString().padStart(2, \"0\");\n\n  if (!showHours) return [paddedMins, paddedSecs].join(\":\");\n  return [hours, paddedMins, paddedSecs].join(\":\");\n}\n\nexport function durationExceedsHour(secs: number): boolean {\n  return secs > 60 * 60;\n}\n","import { usePlayerStore } from \"@/stores/player/store\";\nimport { useVolumeStore } from \"@/stores/volume\";\n\nexport function useVolume() {\n  const volume = usePlayerStore((s) => s.mediaPlaying.volume);\n  const lastVolume = usePlayerStore((s) => s.interface.lastVolume);\n  const setLastVolume = usePlayerStore((s) => s.setLastVolume);\n  const display = usePlayerStore((s) => s.display);\n  const setStoredVolume = useVolumeStore((s) => s.setVolume);\n\n  const toggleVolume = () => {\n    let newVolume = 0;\n\n    if (volume > 0) {\n      newVolume = 0;\n      setLastVolume(volume);\n    } else if (lastVolume > 0) newVolume = lastVolume;\n    else newVolume = 1;\n\n    display?.setVolume(newVolume);\n    setStoredVolume(newVolume);\n  };\n\n  return {\n    toggleMute() {\n      toggleVolume();\n    },\n    setVolume(vol: number) {\n      setStoredVolume(vol);\n      setLastVolume(vol);\n      display?.setVolume(vol);\n    },\n  };\n}\n","import { useEffect, useRef, useState } from \"react\";\n\nexport function useIsMobile(horizontal?: boolean) {\n  const [isMobile, setIsMobile] = useState(false);\n  const isMobileCurrent = useRef<boolean | null>(false);\n\n  useEffect(() => {\n    function onResize() {\n      const value = horizontal\n        ? window.innerHeight < 600\n        : window.innerWidth < 1024;\n      const isChanged = isMobileCurrent.current !== value;\n      if (!isChanged) return;\n\n      isMobileCurrent.current = value;\n      setIsMobile(value);\n    }\n\n    onResize();\n    window.addEventListener(\"resize\", onResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, [horizontal]);\n\n  return {\n    isMobile,\n  };\n}\n","import { Stream } from \"@movie-web/providers\";\n\nimport { setDomainRule } from \"@/backend/extension/messaging\";\n\nfunction extractDomain(url: string): string | null {\n  try {\n    const u = new URL(url);\n    return u.hostname;\n  } catch {\n    return null;\n  }\n}\n\nfunction extractDomainsFromStream(stream: Stream): string[] {\n  if (stream.type === \"hls\") {\n    return [extractDomain(stream.playlist)].filter((v): v is string => !!v);\n  }\n  if (stream.type === \"file\") {\n    return Object.values(stream.qualities)\n      .map((v) => extractDomain(v.url))\n      .filter((v): v is string => !!v);\n  }\n  return [];\n}\n\nfunction buildHeadersFromStream(stream: Stream): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(stream.headers ?? {}).forEach((entry) => {\n    headers[entry[0]] = entry[1];\n  });\n  Object.entries(stream.preferredHeaders ?? {}).forEach((entry) => {\n    headers[entry[0]] = entry[1];\n  });\n  return headers;\n}\n\nexport async function prepareStream(stream: Stream) {\n  await setDomainRule({\n    ruleId: 1,\n    targetDomains: extractDomainsFromStream(stream),\n    requestHeaders: buildHeadersFromStream(stream),\n  });\n}\n","import {\n  makeProviders,\n  makeStandardFetcher,\n  targets,\n} from \"@movie-web/providers\";\n\nimport { isExtensionActiveCached } from \"@/backend/extension/messaging\";\nimport {\n  makeExtensionFetcher,\n  makeLoadBalancedSimpleProxyFetcher,\n} from \"@/backend/providers/fetchers\";\n\nexport function getProviders() {\n  if (isExtensionActiveCached()) {\n    return makeProviders({\n      fetcher: makeExtensionFetcher(),\n      target: targets.BROWSER_EXTENSION,\n      consistentIpForRequests: true,\n    });\n  }\n\n  return makeProviders({\n    fetcher: makeStandardFetcher(fetch),\n    proxiedFetcher: makeLoadBalancedSimpleProxyFetcher(),\n    target: targets.BROWSER,\n  });\n}\n","import { Stream } from \"@movie-web/providers\";\n\nimport {\n  SourceFileStream,\n  SourceQuality,\n  SourceSliceSource,\n} from \"@/stores/player/utils/qualities\";\n\nconst allowedQualitiesMap: Record<SourceQuality, SourceQuality> = {\n  \"4k\": \"4k\",\n  \"1080\": \"1080\",\n  \"480\": \"480\",\n  \"360\": \"360\",\n  \"720\": \"720\",\n  unknown: \"unknown\",\n};\nconst allowedQualities = Object.keys(allowedQualitiesMap);\nconst allowedFileTypes = [\"mp4\"];\n\nfunction isAllowedQuality(inp: string): inp is SourceQuality {\n  return allowedQualities.includes(inp);\n}\n\nexport function convertRunoutputToSource(out: {\n  stream: Stream;\n}): SourceSliceSource {\n  if (out.stream.type === \"hls\") {\n    return {\n      type: \"hls\",\n      url: out.stream.playlist,\n      preferredHeaders: out.stream.preferredHeaders,\n    };\n  }\n  if (out.stream.type === \"file\") {\n    const qualities: Partial<Record<SourceQuality, SourceFileStream>> = {};\n    Object.entries(out.stream.qualities).forEach((entry) => {\n      if (!isAllowedQuality(entry[0])) {\n        console.warn(`unrecognized quality: ${entry[0]}`);\n        return;\n      }\n      if (!allowedFileTypes.includes(entry[1].type)) {\n        console.warn(`unrecognized file type: ${entry[1].type}`);\n        return;\n      }\n      qualities[entry[0]] = {\n        type: entry[1].type,\n        url: entry[1].url,\n      };\n    });\n    return {\n      type: \"file\",\n      qualities,\n      preferredHeaders: out.stream.preferredHeaders,\n    };\n  }\n  throw new Error(\"unrecognized type\");\n}\n","import {\n  EmbedOutput,\n  NotFoundError,\n  SourcererOutput,\n} from \"@movie-web/providers\";\nimport { useAsyncFn } from \"react-use\";\n\nimport { isExtensionActiveCached } from \"@/backend/extension/messaging\";\nimport { prepareStream } from \"@/backend/extension/streams\";\nimport {\n  connectServerSideEvents,\n  makeProviderUrl,\n} from \"@/backend/helpers/providerApi\";\nimport {\n  scrapeSourceOutputToProviderMetric,\n  useReportProviders,\n} from \"@/backend/helpers/report\";\nimport { getLoadbalancedProviderApiUrl } from \"@/backend/providers/fetchers\";\nimport { getProviders } from \"@/backend/providers/providers\";\nimport { convertProviderCaption } from \"@/components/player/utils/captions\";\nimport { convertRunoutputToSource } from \"@/components/player/utils/convertRunoutputToSource\";\nimport { useOverlayRouter } from \"@/hooks/useOverlayRouter\";\nimport { metaToScrapeMedia } from \"@/stores/player/slices/source\";\nimport { usePlayerStore } from \"@/stores/player/store\";\n\nexport function useEmbedScraping(\n  routerId: string,\n  sourceId: string,\n  url: string,\n  embedId: string,\n) {\n  const setSource = usePlayerStore((s) => s.setSource);\n  const setCaption = usePlayerStore((s) => s.setCaption);\n  const setSourceId = usePlayerStore((s) => s.setSourceId);\n  const progress = usePlayerStore((s) => s.progress.time);\n  const meta = usePlayerStore((s) => s.meta);\n  const router = useOverlayRouter(routerId);\n  const { report } = useReportProviders();\n\n  const [request, run] = useAsyncFn(async () => {\n    const providerApiUrl = getLoadbalancedProviderApiUrl();\n    let result: EmbedOutput | undefined;\n    if (!meta) return;\n    try {\n      if (providerApiUrl && !isExtensionActiveCached()) {\n        const baseUrlMaker = makeProviderUrl(providerApiUrl);\n        const conn = await connectServerSideEvents<EmbedOutput>(\n          baseUrlMaker.scrapeEmbed(embedId, url),\n          [\"completed\", \"noOutput\"],\n        );\n        result = await conn.promise();\n      } else {\n        result = await getProviders().runEmbedScraper({\n          id: embedId,\n          url,\n        });\n      }\n    } catch (err) {\n      console.error(`Failed to scrape ${embedId}`, err);\n      const notFound = err instanceof NotFoundError;\n      const status = notFound ? \"notfound\" : \"failed\";\n      report([\n        scrapeSourceOutputToProviderMetric(\n          meta,\n          sourceId,\n          embedId,\n          status,\n          err,\n        ),\n      ]);\n      throw err;\n    }\n    report([\n      scrapeSourceOutputToProviderMetric(meta, sourceId, null, \"success\", null),\n    ]);\n    if (isExtensionActiveCached()) await prepareStream(result.stream[0]);\n    setSourceId(sourceId);\n    setCaption(null);\n    setSource(\n      convertRunoutputToSource({ stream: result.stream[0] }),\n      convertProviderCaption(result.stream[0].captions),\n      progress,\n    );\n    router.close();\n  }, [embedId, sourceId, meta, router, report, setCaption]);\n\n  return {\n    run,\n    loading: request.loading,\n    errored: !!request.error,\n  };\n}\n\nexport function useSourceScraping(sourceId: string | null, routerId: string) {\n  const meta = usePlayerStore((s) => s.meta);\n  const setSource = usePlayerStore((s) => s.setSource);\n  const setCaption = usePlayerStore((s) => s.setCaption);\n  const setSourceId = usePlayerStore((s) => s.setSourceId);\n  const progress = usePlayerStore((s) => s.progress.time);\n  const router = useOverlayRouter(routerId);\n  const { report } = useReportProviders();\n\n  const [request, run] = useAsyncFn(async () => {\n    if (!sourceId || !meta) return null;\n    const scrapeMedia = metaToScrapeMedia(meta);\n    const providerApiUrl = getLoadbalancedProviderApiUrl();\n\n    let result: SourcererOutput | undefined;\n    try {\n      if (providerApiUrl && !isExtensionActiveCached()) {\n        const baseUrlMaker = makeProviderUrl(providerApiUrl);\n        const conn = await connectServerSideEvents<SourcererOutput>(\n          baseUrlMaker.scrapeSource(sourceId, scrapeMedia),\n          [\"completed\", \"noOutput\"],\n        );\n        result = await conn.promise();\n      } else {\n        result = await getProviders().runSourceScraper({\n          id: sourceId,\n          media: scrapeMedia,\n        });\n      }\n    } catch (err) {\n      console.error(`Failed to scrape ${sourceId}`, err);\n      const notFound = err instanceof NotFoundError;\n      const status = notFound ? \"notfound\" : \"failed\";\n      report([\n        scrapeSourceOutputToProviderMetric(meta, sourceId, null, status, err),\n      ]);\n      throw err;\n    }\n    report([\n      scrapeSourceOutputToProviderMetric(meta, sourceId, null, \"success\", null),\n    ]);\n\n    if (result.stream) {\n      if (isExtensionActiveCached()) await prepareStream(result.stream[0]);\n      setCaption(null);\n      setSource(\n        convertRunoutputToSource({ stream: result.stream[0] }),\n        convertProviderCaption(result.stream[0].captions),\n        progress,\n      );\n      setSourceId(sourceId);\n      router.close();\n      return null;\n    }\n    if (result.embeds.length === 1) {\n      let embedResult: EmbedOutput | undefined;\n      if (!meta) return;\n      try {\n        if (providerApiUrl && !isExtensionActiveCached()) {\n          const baseUrlMaker = makeProviderUrl(providerApiUrl);\n          const conn = await connectServerSideEvents<EmbedOutput>(\n            baseUrlMaker.scrapeEmbed(\n              result.embeds[0].embedId,\n              result.embeds[0].url,\n            ),\n            [\"completed\", \"noOutput\"],\n          );\n          embedResult = await conn.promise();\n        } else {\n          embedResult = await getProviders().runEmbedScraper({\n            id: result.embeds[0].embedId,\n            url: result.embeds[0].url,\n          });\n        }\n      } catch (err) {\n        console.error(`Failed to scrape ${result.embeds[0].embedId}`, err);\n        const notFound = err instanceof NotFoundError;\n        const status = notFound ? \"notfound\" : \"failed\";\n        report([\n          scrapeSourceOutputToProviderMetric(\n            meta,\n            sourceId,\n            result.embeds[0].embedId,\n            status,\n            err,\n          ),\n        ]);\n        throw err;\n      }\n      report([\n        scrapeSourceOutputToProviderMetric(\n          meta,\n          sourceId,\n          result.embeds[0].embedId,\n          \"success\",\n          null,\n        ),\n      ]);\n      setSourceId(sourceId);\n      setCaption(null);\n      if (isExtensionActiveCached()) await prepareStream(embedResult.stream[0]);\n      setSource(\n        convertRunoutputToSource({ stream: embedResult.stream[0] }),\n        convertProviderCaption(embedResult.stream[0].captions),\n        progress,\n      );\n      router.close();\n    }\n    return result.embeds;\n  }, [sourceId, meta, router, setCaption]);\n\n  return {\n    run,\n    watching: (request.value ?? null) === null,\n    loading: request.loading,\n    items: request.value,\n    notfound: !!(request.error instanceof NotFoundError),\n    errored: !!request.error,\n  };\n}\n","import * as Cards from \"./Cards\";\nimport * as Links from \"./Links\";\nimport * as Misc from \"./Misc\";\nimport * as Sections from \"./Sections\";\n\nexport const Menu = {\n  ...Cards,\n  ...Links,\n  ...Sections,\n  ...Misc,\n};\n","import { useCallback, useMemo } from \"react\";\n\nimport { DetailedMeta } from \"@/backend/metadata/getmeta\";\nimport { MWMediaType } from \"@/backend/metadata/types/mw\";\nimport { usePlayer } from \"@/components/player/hooks/usePlayer\";\nimport {\n  PlayerMeta,\n  metaToScrapeMedia,\n  playerStatus,\n} from \"@/stores/player/slices/source\";\n\nexport function usePlayerMeta() {\n  const { meta, setMeta } = usePlayer();\n  const scrapeMedia = useMemo(\n    () => (meta ? metaToScrapeMedia(meta) : null),\n    [meta],\n  );\n\n  const setDirectMeta = useCallback(\n    (m: PlayerMeta) => {\n      setMeta(m, playerStatus.SCRAPING);\n    },\n    [setMeta],\n  );\n\n  const setPlayerMeta = useCallback(\n    (m: DetailedMeta, episodeId?: string) => {\n      let playerMeta: PlayerMeta;\n      if (m.meta.type === MWMediaType.SERIES) {\n        const ep = m.meta.seasonData.episodes.find((v) => v.id === episodeId);\n        if (!ep) return null;\n        playerMeta = {\n          type: \"show\",\n          releaseYear: +(m.meta.year ?? 0),\n          title: m.meta.title,\n          poster: m.meta.poster,\n          tmdbId: m.tmdbId ?? \"\",\n          imdbId: m.imdbId,\n          episodes: m.meta.seasonData.episodes.map((v) => ({\n            number: v.number,\n            title: v.title,\n            tmdbId: v.id,\n          })),\n          episode: {\n            number: ep.number,\n            title: ep.title,\n            tmdbId: ep.id,\n          },\n          season: {\n            number: m.meta.seasonData.number,\n            title: m.meta.seasonData.title,\n            tmdbId: m.meta.seasonData.id,\n          },\n        };\n      } else {\n        playerMeta = {\n          type: \"movie\",\n          releaseYear: +(m.meta.year ?? 0),\n          title: m.meta.title,\n          poster: m.meta.poster,\n          tmdbId: m.tmdbId ?? \"\",\n          imdbId: m.imdbId,\n        };\n      }\n      setDirectMeta(playerMeta);\n      return playerMeta;\n    },\n    [setDirectMeta],\n  );\n\n  return {\n    playerMeta: meta,\n    setPlayerMeta,\n    setDirectMeta,\n    scrapeMedia,\n  };\n}\n","const hasAiredCache: { [key: string]: boolean } = {};\n\nexport function hasAired(date: string) {\n  if (hasAiredCache[date]) return hasAiredCache[date];\n\n  const now = new Date();\n  const airDate = new Date(date);\n\n  hasAiredCache[date] = airDate < now;\n  return hasAiredCache[date];\n}\n","export function handleBuffered(time: number, buffered: TimeRanges): number {\n  for (let i = 0; i < buffered.length; i += 1) {\n    if (buffered.start(buffered.length - 1 - i) < time) {\n      return buffered.end(buffered.length - 1 - i);\n    }\n  }\n  return 0;\n}\n","const mediaErrorMap: Record<number, { name: string; key: string }> = {\n  1: {\n    name: \"MEDIA_ERR_ABORTED\",\n    key: \"player.playbackError.errors.errorAborted\",\n  },\n  2: {\n    name: \"MEDIA_ERR_NETWORK\",\n    key: \"player.playbackError.errors.errorNetwork\",\n  },\n  3: {\n    name: \"MEDIA_ERR_DECODE\",\n    key: \"player.playbackError.errors.errorDecode\",\n  },\n  4: {\n    name: \"MEDIA_ERR_SRC_NOT_SUPPORTED\",\n    key: \"player.playbackError.errors.errorNotSupported\",\n  },\n};\n\nexport function getMediaErrorDetails(\n  err: MediaError | null,\n): (typeof mediaErrorMap)[number] {\n  const item = mediaErrorMap[err?.code ?? -1];\n  if (!item) {\n    return {\n      name: \"MEDIA_ERR_GENERIC\",\n      key: \"player.playbackError.errors.errorGenericMedia\",\n    };\n  }\n  return item;\n}\n","import { conf } from \"@/setup/config\";\n\nexport function processCdnLink(url: string): string {\n  const parsedUrl = new URL(url);\n  const replacements = conf().CDN_REPLACEMENTS;\n  for (const [before, after] of replacements) {\n    if (parsedUrl.hostname.endsWith(before)) {\n      parsedUrl.hostname = after;\n      parsedUrl.port = \"\";\n      parsedUrl.protocol = \"https://\";\n      return parsedUrl.toString();\n    }\n  }\n\n  return url;\n}\n","export type EventMap = Record<string, any>;\ntype EventKey<T extends EventMap> = string & keyof T;\ntype EventReceiver<T> = (params: T) => void;\n\nexport interface Emitter<T extends EventMap> {\n  on<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;\n  off<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;\n  emit<K extends EventKey<T>>(eventName: K, params: T[K]): void;\n}\n\nexport interface Listener<T extends EventMap> {\n  on<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;\n  off<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;\n}\n\nexport function makeEmitter<T extends EventMap>(): Emitter<T> {\n  const listeners: Partial<\n    Record<EventKey<T>, ((...params: any[]) => void)[]>\n  > = {};\n\n  return {\n    on(eventName, fn) {\n      if (!listeners[eventName]) listeners[eventName] = [];\n      listeners[eventName]?.push(fn);\n    },\n    off(eventName, fn) {\n      listeners[eventName] =\n        listeners[eventName]?.filter((v) => v !== fn) ?? [];\n    },\n    emit(eventName, params) {\n      (listeners[eventName] ?? []).forEach((fn) => fn(params));\n    },\n  };\n}\n","import fscreen from \"fscreen\";\nimport Hls, { Level } from \"hls.js\";\n\nimport {\n  DisplayInterface,\n  DisplayInterfaceEvents,\n} from \"@/components/player/display/displayInterface\";\nimport { handleBuffered } from \"@/components/player/utils/handleBuffered\";\nimport { getMediaErrorDetails } from \"@/components/player/utils/mediaErrorDetails\";\nimport {\n  LoadableSource,\n  SourceQuality,\n  getPreferredQuality,\n} from \"@/stores/player/utils/qualities\";\nimport { processCdnLink } from \"@/utils/cdn\";\nimport {\n  canChangeVolume,\n  canFullscreen,\n  canFullscreenAnyElement,\n  canPictureInPicture,\n  canPlayHlsNatively,\n  canWebkitFullscreen,\n  canWebkitPictureInPicture,\n} from \"@/utils/detectFeatures\";\nimport { makeEmitter } from \"@/utils/events\";\n\nconst levelConversionMap: Record<number, SourceQuality> = {\n  360: \"360\",\n  1080: \"1080\",\n  720: \"720\",\n  480: \"480\",\n};\n\nfunction hlsLevelToQuality(level: Level): SourceQuality | null {\n  return levelConversionMap[level.height] ?? null;\n}\n\nfunction qualityToHlsLevel(quality: SourceQuality): number | null {\n  const found = Object.entries(levelConversionMap).find(\n    (entry) => entry[1] === quality,\n  );\n  return found ? +found[0] : null;\n}\n\nfunction hlsLevelsToQualities(levels: Level[]): SourceQuality[] {\n  return levels\n    .map((v) => hlsLevelToQuality(v))\n    .filter((v): v is SourceQuality => !!v);\n}\n\nexport function makeVideoElementDisplayInterface(): DisplayInterface {\n  const { emit, on, off } = makeEmitter<DisplayInterfaceEvents>();\n  let source: LoadableSource | null = null;\n  let hls: Hls | null = null;\n  let videoElement: HTMLVideoElement | null = null;\n  let containerElement: HTMLElement | null = null;\n  let isFullscreen = false;\n  let isPausedBeforeSeeking = false;\n  let isSeeking = false;\n  let startAt = 0;\n  let automaticQuality = false;\n  let preferenceQuality: SourceQuality | null = null;\n  let lastVolume = 1;\n\n  function reportLevels() {\n    if (!hls) return;\n    const levels = hls.levels;\n    const convertedLevels = levels\n      .map((v) => hlsLevelToQuality(v))\n      .filter((v): v is SourceQuality => !!v);\n    emit(\"qualities\", convertedLevels);\n  }\n\n  function setupQualityForHls() {\n    if (videoElement && canPlayHlsNatively(videoElement)) {\n      return; // nothing to change\n    }\n\n    if (!hls) return;\n    if (!automaticQuality) {\n      const qualities = hlsLevelsToQualities(hls.levels);\n      const availableQuality = getPreferredQuality(qualities, {\n        lastChosenQuality: preferenceQuality,\n        automaticQuality,\n      });\n      if (availableQuality) {\n        const levelIndex = hls.levels.findIndex(\n          (v) => v.height === qualityToHlsLevel(availableQuality),\n        );\n        if (levelIndex !== -1) {\n          hls.currentLevel = levelIndex;\n          hls.loadLevel = levelIndex;\n        }\n      }\n    } else {\n      hls.currentLevel = -1;\n      hls.loadLevel = -1;\n    }\n    const quality = hlsLevelToQuality(hls.levels[hls.currentLevel]);\n    emit(\"changedquality\", quality);\n  }\n\n  function setupSource(vid: HTMLVideoElement, src: LoadableSource) {\n    if (src.type === \"hls\") {\n      if (canPlayHlsNatively(vid)) {\n        vid.src = processCdnLink(src.url);\n        vid.currentTime = startAt;\n        return;\n      }\n\n      if (!Hls.isSupported()) throw new Error(\"HLS not supported\");\n      if (!hls) {\n        hls = new Hls({\n          maxBufferSize: 500 * 1000 * 1000, // 500 mb of buffering, should load more fragments at once\n          fragLoadPolicy: {\n            default: {\n              maxLoadTimeMs: 30 * 1000, // allow it load extra long, fragments are slow if requested for the first time on an origin\n              maxTimeToFirstByteMs: 30 * 1000,\n              errorRetry: {\n                maxNumRetry: 2,\n                retryDelayMs: 1000,\n                maxRetryDelayMs: 8000,\n              },\n              timeoutRetry: {\n                maxNumRetry: 3,\n                maxRetryDelayMs: 0,\n                retryDelayMs: 0,\n              },\n            },\n          },\n        });\n        hls.on(Hls.Events.ERROR, (event, data) => {\n          console.error(\"HLS error\", data);\n          if (data.fatal && src?.url === data.frag?.baseurl) {\n            emit(\"error\", {\n              message: data.error.message,\n              stackTrace: data.error.stack,\n              errorName: data.error.name,\n              type: \"hls\",\n            });\n          }\n        });\n        hls.on(Hls.Events.MANIFEST_LOADED, () => {\n          if (!hls) return;\n          reportLevels();\n          setupQualityForHls();\n        });\n        hls.on(Hls.Events.LEVEL_SWITCHED, () => {\n          if (!hls) return;\n          const quality = hlsLevelToQuality(hls.levels[hls.currentLevel]);\n          emit(\"changedquality\", quality);\n        });\n      }\n\n      hls.attachMedia(vid);\n      hls.loadSource(processCdnLink(src.url));\n      vid.currentTime = startAt;\n      return;\n    }\n\n    vid.src = processCdnLink(src.url);\n    vid.currentTime = startAt;\n  }\n\n  function setSource() {\n    if (!videoElement || !source) return;\n    setupSource(videoElement, source);\n\n    videoElement.addEventListener(\"play\", () => {\n      emit(\"play\", undefined);\n      emit(\"loading\", false);\n    });\n    videoElement.addEventListener(\"error\", () => {\n      const err = videoElement?.error ?? null;\n      const errorDetails = getMediaErrorDetails(err);\n      emit(\"error\", {\n        errorName: errorDetails.name,\n        key: errorDetails.key,\n        type: \"htmlvideo\",\n      });\n    });\n    videoElement.addEventListener(\"playing\", () => emit(\"play\", undefined));\n    videoElement.addEventListener(\"pause\", () => emit(\"pause\", undefined));\n    videoElement.addEventListener(\"canplay\", () => emit(\"loading\", false));\n    videoElement.addEventListener(\"waiting\", () => emit(\"loading\", true));\n    videoElement.addEventListener(\"volumechange\", () =>\n      emit(\"volumechange\", videoElement?.muted ? 0 : videoElement?.volume ?? 0),\n    );\n    videoElement.addEventListener(\"timeupdate\", () =>\n      emit(\"time\", videoElement?.currentTime ?? 0),\n    );\n    videoElement.addEventListener(\"loadedmetadata\", () => {\n      if (\n        source?.type === \"hls\" &&\n        videoElement &&\n        canPlayHlsNatively(videoElement)\n      ) {\n        emit(\"qualities\", [\"unknown\"]);\n        emit(\"changedquality\", \"unknown\");\n      }\n      emit(\"duration\", videoElement?.duration ?? 0);\n    });\n    videoElement.addEventListener(\"progress\", () => {\n      if (videoElement)\n        emit(\n          \"buffered\",\n          handleBuffered(videoElement.currentTime, videoElement.buffered),\n        );\n    });\n    videoElement.addEventListener(\"webkitendfullscreen\", () => {\n      isFullscreen = false;\n      emit(\"fullscreen\", isFullscreen);\n      if (!isFullscreen) emit(\"needstrack\", false);\n    });\n    videoElement.addEventListener(\n      \"webkitplaybacktargetavailabilitychanged\",\n      (e: any) => {\n        if (e.availability === \"available\") {\n          emit(\"canairplay\", true);\n        }\n      },\n    );\n    videoElement.addEventListener(\"ratechange\", () => {\n      if (videoElement) emit(\"playbackrate\", videoElement.playbackRate);\n    });\n  }\n\n  function unloadSource() {\n    if (videoElement) {\n      videoElement.removeAttribute(\"src\");\n      videoElement.load();\n    }\n    if (hls) {\n      hls.destroy();\n      hls = null;\n    }\n  }\n\n  function destroyVideoElement() {\n    unloadSource();\n    if (videoElement) {\n      videoElement = null;\n    }\n  }\n\n  function fullscreenChange() {\n    isFullscreen =\n      !!document.fullscreenElement || // other browsers\n      !!(document as any).webkitFullscreenElement; // safari\n    emit(\"fullscreen\", isFullscreen);\n    if (!isFullscreen) emit(\"needstrack\", false);\n  }\n  fscreen.addEventListener(\"fullscreenchange\", fullscreenChange);\n\n  return {\n    on,\n    off,\n    getType() {\n      return \"web\";\n    },\n    destroy: () => {\n      destroyVideoElement();\n      fscreen.removeEventListener(\"fullscreenchange\", fullscreenChange);\n    },\n    load(ops) {\n      if (!ops.source) unloadSource();\n      automaticQuality = ops.automaticQuality;\n      preferenceQuality = ops.preferredQuality;\n      source = ops.source;\n      emit(\"loading\", true);\n      startAt = ops.startAt;\n      setSource();\n    },\n    changeQuality(newAutomaticQuality, newPreferredQuality) {\n      if (source?.type !== \"hls\") return;\n      automaticQuality = newAutomaticQuality;\n      preferenceQuality = newPreferredQuality;\n      setupQualityForHls();\n    },\n\n    processVideoElement(video) {\n      destroyVideoElement();\n      videoElement = video;\n      setSource();\n      this.setVolume(lastVolume);\n    },\n    processContainerElement(container) {\n      containerElement = container;\n    },\n    setMeta() {},\n    setCaption() {},\n\n    pause() {\n      videoElement?.pause();\n    },\n    play() {\n      videoElement?.play();\n    },\n    setSeeking(active) {\n      if (active === isSeeking) return;\n      isSeeking = active;\n\n      // if it was playing when starting to seek, play again\n      if (!active) {\n        if (!isPausedBeforeSeeking) this.play();\n        return;\n      }\n\n      isPausedBeforeSeeking = videoElement?.paused ?? true;\n      this.pause();\n    },\n    setTime(t) {\n      if (!videoElement) return;\n      // clamp time between 0 and max duration\n      let time = Math.min(t, videoElement.duration);\n      time = Math.max(0, time);\n\n      if (Number.isNaN(time)) return;\n      emit(\"time\", time);\n      videoElement.currentTime = time;\n    },\n    async setVolume(v) {\n      // clamp time between 0 and 1\n      let volume = Math.min(v, 1);\n      volume = Math.max(0, volume);\n\n      // actually set\n      lastVolume = v;\n      if (!videoElement) return;\n      videoElement.muted = volume === 0; // Muted attribute is always supported\n\n      // update state\n      const isChangeable = await canChangeVolume();\n      if (isChangeable) {\n        videoElement.volume = volume;\n      } else {\n        // For browsers where it can't be changed\n        emit(\"volumechange\", volume === 0 ? 0 : 1);\n      }\n    },\n    toggleFullscreen() {\n      if (isFullscreen) {\n        isFullscreen = false;\n        emit(\"fullscreen\", isFullscreen);\n        emit(\"needstrack\", false);\n        if (!fscreen.fullscreenElement) return;\n        fscreen.exitFullscreen();\n        return;\n      }\n\n      // enter fullscreen\n      isFullscreen = true;\n      emit(\"fullscreen\", isFullscreen);\n      if (!canFullscreen() || fscreen.fullscreenElement) return;\n      if (canFullscreenAnyElement()) {\n        if (containerElement) fscreen.requestFullscreen(containerElement);\n        return;\n      }\n      if (canWebkitFullscreen()) {\n        if (videoElement) {\n          emit(\"needstrack\", true);\n          (videoElement as any).webkitEnterFullscreen();\n        }\n      }\n    },\n    togglePictureInPicture() {\n      if (!videoElement) return;\n      if (canWebkitPictureInPicture()) {\n        const webkitPlayer = videoElement as any;\n        webkitPlayer.webkitSetPresentationMode(\n          webkitPlayer.webkitPresentationMode === \"picture-in-picture\"\n            ? \"inline\"\n            : \"picture-in-picture\",\n        );\n      }\n      if (canPictureInPicture()) {\n        if (videoElement !== document.pictureInPictureElement) {\n          videoElement.requestPictureInPicture();\n        } else {\n          document.exitPictureInPicture();\n        }\n      }\n    },\n    startAirplay() {\n      const videoPlayer = videoElement as any;\n      if (videoPlayer && videoPlayer.webkitShowPlaybackTargetPicker) {\n        videoPlayer.webkitShowPlaybackTargetPicker();\n      }\n    },\n    setPlaybackRate(rate) {\n      if (videoElement) videoElement.playbackRate = rate;\n    },\n  };\n}\n","import fscreen from \"fscreen\";\n\nimport { MWMediaType } from \"@/backend/metadata/types/mw\";\nimport {\n  DisplayCaption,\n  DisplayInterface,\n  DisplayInterfaceEvents,\n  DisplayMeta,\n} from \"@/components/player/display/displayInterface\";\nimport { LoadableSource } from \"@/stores/player/utils/qualities\";\nimport { processCdnLink } from \"@/utils/cdn\";\nimport {\n  canChangeVolume,\n  canFullscreen,\n  canFullscreenAnyElement,\n} from \"@/utils/detectFeatures\";\nimport { makeEmitter } from \"@/utils/events\";\n\nexport interface ChromeCastDisplayInterfaceOptions {\n  controller: cast.framework.RemotePlayerController;\n  player: cast.framework.RemotePlayer;\n  instance: cast.framework.CastContext;\n}\n\n/*\n ** Chromecasting is unfinished, here is its limitations:\n **  1. Captions - chromecast requires only VTT, but needs it from a URL. we only have SRT urls\n **  2. HLS - we've having some issues with content types. sometimes it loads, sometimes it doesn't\n */\n\nexport function makeChromecastDisplayInterface(\n  ops: ChromeCastDisplayInterfaceOptions,\n): DisplayInterface {\n  const { emit, on, off } = makeEmitter<DisplayInterfaceEvents>();\n  let isPaused = false;\n  let playbackRate = 1;\n  let source: LoadableSource | null = null;\n  let videoElement: HTMLVideoElement | null = null;\n  let containerElement: HTMLElement | null = null;\n  let isFullscreen = false;\n  let isPausedBeforeSeeking = false;\n  let isSeeking = false;\n  let startAt = 0;\n  let meta: DisplayMeta = {\n    title: \"\",\n    type: MWMediaType.MOVIE,\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let caption: DisplayCaption | null = null;\n\n  function listenForEvents() {\n    const listen = async (e: cast.framework.RemotePlayerChangedEvent) => {\n      switch (e.field) {\n        case \"volumeLevel\":\n          if (await canChangeVolume()) emit(\"volumechange\", e.value);\n          break;\n        case \"currentTime\":\n          emit(\"time\", e.value);\n          break;\n        case \"duration\":\n          emit(\"duration\", e.value ?? 0);\n          break;\n        case \"mediaInfo\":\n          if (e.value) emit(\"duration\", e.value.duration ?? 0);\n          break;\n        case \"playerState\":\n          emit(\"loading\", e.value === \"BUFFERING\");\n          if (e.value === \"PLAYING\") emit(\"play\", undefined);\n          else if (e.value === \"PAUSED\") emit(\"pause\", undefined);\n          isPaused = e.value === \"PAUSED\";\n          break;\n        case \"isMuted\":\n          emit(\"volumechange\", e.value ? 1 : 0);\n          break;\n        case \"displayStatus\":\n        case \"canSeek\":\n        case \"title\":\n        case \"isPaused\":\n        case \"canPause\":\n        case \"isMediaLoaded\":\n        case \"statusText\":\n        case \"isConnected\":\n        case \"displayName\":\n        case \"canControlVolume\":\n        case \"savedPlayerState\":\n          break;\n        default:\n          break;\n      }\n    };\n    ops.controller?.addEventListener(\n      cast.framework.RemotePlayerEventType.ANY_CHANGE,\n      listen,\n    );\n    return () => {\n      ops.controller?.removeEventListener(\n        cast.framework.RemotePlayerEventType.ANY_CHANGE,\n        listen,\n      );\n    };\n  }\n\n  function setupSource() {\n    if (!source) {\n      ops.controller?.stop();\n      return;\n    }\n\n    let type = \"video/mp4\";\n    if (source.type === \"hls\") type = \"application/x-mpegurl\";\n\n    const metaData = new chrome.cast.media.GenericMediaMetadata();\n    metaData.title = meta.title;\n\n    const mediaInfo = new chrome.cast.media.MediaInfo(\"video\", type);\n    (mediaInfo as any).contentUrl = processCdnLink(source.url);\n    mediaInfo.streamType = chrome.cast.media.StreamType.BUFFERED;\n    mediaInfo.metadata = metaData;\n    mediaInfo.customData = {\n      playbackRate,\n    };\n\n    const request = new chrome.cast.media.LoadRequest(mediaInfo);\n    request.autoplay = true;\n    request.currentTime = startAt;\n\n    if (source.type === \"hls\") {\n      const staticMedia = chrome.cast.media as any;\n      const media = request.media as any;\n      media.hlsSegmentFormat = staticMedia.HlsSegmentFormat.FMP4;\n      media.hlsVideoSegmentFormat = staticMedia.HlsVideoSegmentFormat.FMP4;\n    }\n\n    const session = ops.instance.getCurrentSession();\n    session?.loadMedia(request);\n  }\n\n  function setSource() {\n    if (!videoElement || !source) return;\n    setupSource();\n  }\n\n  function destroyVideoElement() {\n    if (videoElement) videoElement = null;\n  }\n\n  function fullscreenChange() {\n    isFullscreen =\n      !!document.fullscreenElement || // other browsers\n      !!(document as any).webkitFullscreenElement; // safari\n    emit(\"fullscreen\", isFullscreen);\n    if (!isFullscreen) emit(\"needstrack\", false);\n  }\n  fscreen.addEventListener(\"fullscreenchange\", fullscreenChange);\n\n  // start listening immediately\n  const stopListening = listenForEvents();\n\n  return {\n    on,\n    off,\n    getType() {\n      return \"casting\";\n    },\n    destroy: () => {\n      stopListening();\n      destroyVideoElement();\n      fscreen.removeEventListener(\"fullscreenchange\", fullscreenChange);\n    },\n    load(loadOps) {\n      source = loadOps.source;\n      emit(\"loading\", true);\n      startAt = loadOps.startAt;\n      setSource();\n    },\n    changeQuality() {\n      // cant control qualities\n    },\n    setCaption(newCaption) {\n      caption = newCaption;\n      setSource();\n    },\n\n    processVideoElement(video) {\n      destroyVideoElement();\n      videoElement = video;\n      setSource();\n    },\n    processContainerElement(container) {\n      containerElement = container;\n    },\n    setMeta(data) {\n      meta = data;\n      setSource();\n    },\n\n    pause() {\n      if (!isPaused) {\n        ops.controller.playOrPause();\n        isPaused = true;\n      }\n    },\n    play() {\n      if (isPaused) {\n        ops.controller.playOrPause();\n        isPaused = false;\n      }\n    },\n    setSeeking(active) {\n      if (active === isSeeking) return;\n      isSeeking = active;\n\n      // if it was playing when starting to seek, play again\n      if (!active) {\n        if (!isPausedBeforeSeeking) this.play();\n        return;\n      }\n\n      isPausedBeforeSeeking = isPaused ?? true;\n      this.pause();\n    },\n    setTime(t) {\n      if (!videoElement) return;\n      // clamp time between 0 and max duration\n      let time = Math.min(t, ops.player.duration);\n      time = Math.max(0, time);\n\n      if (Number.isNaN(time)) return;\n      emit(\"time\", time);\n      ops.player.currentTime = time;\n      ops.controller.seek();\n    },\n    async setVolume(v) {\n      // clamp time between 0 and 1\n      let volume = Math.min(v, 1);\n      volume = Math.max(0, volume);\n\n      // update state\n      const isChangeable = await canChangeVolume();\n      if (isChangeable) {\n        ops.player.volumeLevel = volume;\n        ops.controller.setVolumeLevel();\n        emit(\"volumechange\", volume);\n      } else {\n        // For browsers where it can't be changed\n        emit(\"volumechange\", volume === 0 ? 0 : 1);\n      }\n    },\n    toggleFullscreen() {\n      if (isFullscreen) {\n        isFullscreen = false;\n        emit(\"fullscreen\", isFullscreen);\n        emit(\"needstrack\", false);\n        if (!fscreen.fullscreenElement) return;\n        fscreen.exitFullscreen();\n        return;\n      }\n\n      // enter fullscreen\n      isFullscreen = true;\n      emit(\"fullscreen\", isFullscreen);\n      if (!canFullscreen() || fscreen.fullscreenElement) return;\n      if (canFullscreenAnyElement()) {\n        if (containerElement) fscreen.requestFullscreen(containerElement);\n      }\n    },\n    togglePictureInPicture() {\n      // Can't PIP while Chromecasting\n    },\n    startAirplay() {\n      // cant airplay while chromecasting\n    },\n    setPlaybackRate(rate) {\n      playbackRate = rate;\n      setSource();\n    },\n  };\n}\n","const CHROMECAST_SENDER_SDK =\n  \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n\nconst callbacks: ((available: boolean) => void)[] = [];\nlet _available: boolean | null = null;\n\nfunction init(available: boolean) {\n  _available = available;\n  callbacks.forEach((cb) => cb(available));\n}\n\nexport function isChromecastAvailable(cb: (available: boolean) => void) {\n  if (_available !== null) return cb(_available);\n  callbacks.push(cb);\n}\n\nexport function initializeChromecast() {\n  window.__onGCastApiAvailable = (isAvailable) => {\n    init(isAvailable);\n  };\n\n  // add script if doesnt exist yet\n  const exists = !!document.getElementById(\"chromecast-script\");\n  if (!exists) {\n    const script = document.createElement(\"script\");\n    script.setAttribute(\"src\", CHROMECAST_SENDER_SDK);\n    script.setAttribute(\"id\", \"chromecast-script\");\n    document.body.appendChild(script);\n  }\n}\n","/// <reference types=\"chromecast-caf-sender\"/>\n\nimport { useEffect, useState } from \"react\";\n\nimport { isChromecastAvailable } from \"@/setup/chromecast\";\n\nexport function useChromecastAvailable() {\n  const [available, setAvailable] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    isChromecastAvailable((bool) => setAvailable(bool));\n  }, []);\n\n  return available;\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { useEffect, useState } from \"react\";\nimport { generatePath, useNavigate, useParams } from \"react-router-dom\";\n\nfunction decode(query: string | null | undefined) {\n  return query ? decodeURIComponent(query) : \"\";\n}\n\nexport function useSearchQuery(): [\n  string,\n  (inp: string, force?: boolean) => void,\n  () => void,\n] {\n  const navigate = useNavigate();\n  const params = useParams<{ query: string }>();\n  const [search, setSearch] = useState(decode(params.query));\n\n  useEffect(() => {\n    setSearch(decode(params.query));\n  }, [params.query]);\n\n  const updateParams = (inp: string, commitToUrl = false) => {\n    setSearch(inp);\n    if (!commitToUrl) return;\n    if (inp.length === 0) {\n      navigate(\"/\", { replace: true });\n      return;\n    }\n    navigate(\n      generatePath(\"/browse/:query\", {\n        query: inp,\n      }),\n      { replace: true },\n    );\n  };\n\n  const onUnFocus = (newSearch?: string) => {\n    updateParams(newSearch ?? search, true);\n  };\n\n  return [search, updateParams, onUnFocus];\n}\n","import {\n  ProgressEpisodeItem,\n  ProgressItem,\n  ProgressMediaItem,\n  ProgressSeasonItem,\n} from \"@/stores/progress\";\n\nexport interface ShowProgressResult {\n  episode?: ProgressEpisodeItem;\n  season?: ProgressSeasonItem;\n  progress: ProgressItem;\n  show: boolean;\n}\n\nconst defaultProgress = {\n  duration: 0,\n  watched: 0,\n};\n\nfunction progressIsCompleted(duration: number, watched: number): boolean {\n  const timeFromEnd = duration - watched;\n\n  // too close to the end, is completed\n  if (timeFromEnd < 60 * 2) return true;\n\n  // satisfies all constraints, not completed\n  return false;\n}\n\nfunction progressIsNotStarted(duration: number, watched: number): boolean {\n  // too short watch time\n  if (watched < 20) return true;\n\n  // satisfies all constraints, not completed\n  return false;\n}\n\nfunction progressIsAcceptableRange(duration: number, watched: number): boolean {\n  // not started enough yet, not acceptable\n  if (progressIsNotStarted(duration, watched)) return false;\n\n  // is already at the end, not acceptable\n  if (progressIsCompleted(duration, watched)) return false;\n\n  // satisfied all constraints\n  return true;\n}\n\nexport function shouldShowProgress(\n  item: ProgressMediaItem,\n): ShowProgressResult {\n  // non shows just hide or show depending on acceptable ranges\n  if (item.type !== \"show\") {\n    return {\n      show: progressIsAcceptableRange(\n        item.progress?.duration ?? 0,\n        item.progress?.watched ?? 0,\n      ),\n      progress: item.progress ?? defaultProgress,\n    };\n  }\n\n  // shows only hide an item if its too early in episode, it still shows if its near the end.\n  // Otherwise you would lose episode progress\n  const ep = Object.values(item.episodes)\n    .sort((a, b) => b.updatedAt - a.updatedAt)\n    .filter(\n      (epi) =>\n        !progressIsNotStarted(epi.progress.duration, epi.progress.watched),\n    )[0];\n  const season = item.seasons[ep?.seasonId];\n  if (!ep || !season)\n    return {\n      show: false,\n      progress: defaultProgress,\n    };\n  return {\n    season,\n    episode: ep,\n    show: true,\n    progress: ep.progress,\n  };\n}\n","import { useEffect } from \"react\";\n\nexport function useSlashFocus(ref: React.RefObject<HTMLInputElement>) {\n  useEffect(() => {\n    const listener = (e: KeyboardEvent) => {\n      if (e.key === \"/\") {\n        if (\n          document.activeElement &&\n          document.activeElement.tagName.toLowerCase() === \"input\"\n        )\n          return;\n        e.preventDefault();\n        ref.current?.focus();\n      }\n    };\n\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, [ref]);\n}\n","import { useCallback, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// 10% chance of getting a joke title\nconst shouldGiveJokeTitle = () => Math.floor(Math.random() * 10) === 0;\n\nexport function useRandomTranslation() {\n  const { t } = useTranslation();\n  const shouldJoke = useMemo(() => shouldGiveJokeTitle(), []);\n  const seed = useMemo(() => Math.random(), []);\n\n  const getRandomTranslation = useCallback(\n    (key: string): string => {\n      const defaultTitle = t(`${key}.default`) ?? \"\";\n      if (!shouldJoke) return defaultTitle;\n\n      const keys = t(`${key}.extra`, {\n        returnObjects: true,\n        defaultValue: defaultTitle,\n      });\n      if (Array.isArray(keys)) {\n        if (keys.length === 0) return defaultTitle;\n        return keys[Math.floor(seed * keys.length)];\n      }\n\n      return typeof keys === \"string\" ? keys : defaultTitle;\n    },\n    [t, seed, shouldJoke],\n  );\n\n  return { t: getRandomTranslation };\n}\n","import { useCallback } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nimport { useQueryParam } from \"@/hooks/useQueryParams\";\nimport { useOnboardingStore } from \"@/stores/onboarding\";\n\nexport function useRedirectBack() {\n  const [url] = useQueryParam(\"redirect\");\n  const navigate = useNavigate();\n  const setCompleted = useOnboardingStore((s) => s.setCompleted);\n\n  const redirectBack = useCallback(() => {\n    navigate(url ?? \"/\");\n  }, [navigate, url]);\n\n  const completeAndRedirect = useCallback(() => {\n    setCompleted(true);\n    redirectBack();\n  }, [redirectBack, setCompleted]);\n\n  return { completeAndRedirect };\n}\n\nexport function useNavigateOnboarding() {\n  const navigate = useNavigate();\n  const loc = useLocation();\n  const nav = useCallback(\n    (path: string) => {\n      navigate({\n        pathname: path,\n        search: loc.search,\n      });\n    },\n    [navigate, loc],\n  );\n  return nav;\n}\n","import { useEffect, useMemo } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useEffectOnce } from \"react-use\";\nimport { create } from \"zustand\";\nimport { immer } from \"zustand/middleware/immer\";\n\ninterface HistoryRoute {\n  path: string;\n}\n\ninterface HistoryStore {\n  routes: HistoryRoute[];\n  registerRoute(route: HistoryRoute): void;\n}\n\nexport const useHistoryStore = create(\n  immer<HistoryStore>((set) => ({\n    routes: [],\n    registerRoute(route) {\n      set((s) => {\n        s.routes.push(route);\n      });\n    },\n  })),\n);\n\nexport function useHistoryListener() {\n  const location = useLocation();\n  const registerRoute = useHistoryStore((s) => s.registerRoute);\n  useEffect(() => {\n    registerRoute({ path: location.pathname });\n  }, [location.pathname, registerRoute]);\n\n  useEffectOnce(() => {\n    registerRoute({ path: location.pathname });\n  });\n}\n\nexport function useLastNonPlayerLink() {\n  const routes = useHistoryStore((s) => s.routes);\n  const location = useLocation();\n  const lastNonPlayerLink = useMemo(() => {\n    const reversedRoutes = [...routes];\n    reversedRoutes.reverse();\n    const route = reversedRoutes.find(\n      (v) =>\n        !v.path.startsWith(\"/media\") && // cannot be a player link\n        location.pathname !== v.path && // cannot be current link\n        !v.path.startsWith(\"/s/\") && // cannot be a quick search link\n        !v.path.startsWith(\"/onboarding\"), // cannot be an onboarding link\n    );\n    return route?.path ?? \"/\";\n  }, [routes, location]);\n  return lastNonPlayerLink;\n}\n"],"file":"assets/index-Cu6Y0eur.js"}